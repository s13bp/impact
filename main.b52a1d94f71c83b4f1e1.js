/*! For license information please see main.b52a1d94f71c83b4f1e1.js.LICENSE.txt */
(()=>{var __webpack_modules__={2003:e=>{"use strict";e.exports=function({mustBeMetaMask:e=!1,silent:t=!1,timeout:n=3e3}={}){!function(){if("boolean"!=typeof e)throw new Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");if("boolean"!=typeof t)throw new Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");if("number"!=typeof n)throw new Error("@metamask/detect-provider: Expected option 'timeout' to be a number.")}();let r=!1;return new Promise((i=>{function a(){if(r)return;r=!0,window.removeEventListener("ethereum#initialized",a);const{ethereum:n}=window;if(!n||e&&!n.isMetaMask){const r=e&&n?"Non-MetaMask window.ethereum detected.":"Unable to detect window.ethereum.";!t&&console.error("@metamask/detect-provider:",r),i(null)}else i(n)}window.ethereum?a():(window.addEventListener("ethereum#initialized",a,{once:!0}),setTimeout((()=>{a()}),n))}))}},4537:e=>{"use strict";e.exports=function(e,t){for(var n=new Array(arguments.length-1),r=0,i=2,a=!0;i<arguments.length;)n[r++]=arguments[i++];return new Promise((function(i,s){n[r]=function(e){if(a)if(a=!1,e)s(e);else{for(var t=new Array(arguments.length-1),n=0;n<t.length;)t[n++]=arguments[n];i.apply(null,t)}};try{e.apply(t||null,n)}catch(e){a&&(a=!1,s(e))}}))}},7419:(e,t)=>{"use strict";var n=t;n.length=function(e){var t=e.length;if(!t)return 0;for(var n=0;--t%4>1&&"="===e.charAt(t);)++n;return Math.ceil(3*e.length)/4-n};for(var r=new Array(64),i=new Array(123),a=0;a<64;)i[r[a]=a<26?a+65:a<52?a+71:a<62?a-4:a-59|43]=a++;n.encode=function(e,t,n){for(var i,a=null,s=[],o=0,f=0;t<n;){var d=e[t++];switch(f){case 0:s[o++]=r[d>>2],i=(3&d)<<4,f=1;break;case 1:s[o++]=r[i|d>>4],i=(15&d)<<2,f=2;break;case 2:s[o++]=r[i|d>>6],s[o++]=r[63&d],f=0}o>8191&&((a||(a=[])).push(String.fromCharCode.apply(String,s)),o=0)}return f&&(s[o++]=r[i],s[o++]=61,1===f&&(s[o++]=61)),a?(o&&a.push(String.fromCharCode.apply(String,s.slice(0,o))),a.join("")):String.fromCharCode.apply(String,s.slice(0,o))};var s="invalid encoding";n.decode=function(e,t,n){for(var r,a=n,o=0,f=0;f<e.length;){var d=e.charCodeAt(f++);if(61===d&&o>1)break;if(void 0===(d=i[d]))throw Error(s);switch(o){case 0:r=d,o=1;break;case 1:t[n++]=r<<2|(48&d)>>4,r=d,o=2;break;case 2:t[n++]=(15&r)<<4|(60&d)>>2,r=d,o=3;break;case 3:t[n++]=(3&r)<<6|d,o=0}}if(1===o)throw Error(s);return n-a},n.test=function(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)}},9211:e=>{"use strict";function t(){this._listeners={}}e.exports=t,t.prototype.on=function(e,t,n){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:n||this}),this},t.prototype.off=function(e,t){if(void 0===e)this._listeners={};else if(void 0===t)this._listeners[e]=[];else for(var n=this._listeners[e],r=0;r<n.length;)n[r].fn===t?n.splice(r,1):++r;return this},t.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var n=[],r=1;r<arguments.length;)n.push(arguments[r++]);for(r=0;r<t.length;)t[r].fn.apply(t[r++].ctx,n)}return this}},945:e=>{"use strict";function t(e){return"undefined"!=typeof Float32Array?function(){var t=new Float32Array([-0]),n=new Uint8Array(t.buffer),r=128===n[3];function i(e,r,i){t[0]=e,r[i]=n[0],r[i+1]=n[1],r[i+2]=n[2],r[i+3]=n[3]}function a(e,r,i){t[0]=e,r[i]=n[3],r[i+1]=n[2],r[i+2]=n[1],r[i+3]=n[0]}function s(e,r){return n[0]=e[r],n[1]=e[r+1],n[2]=e[r+2],n[3]=e[r+3],t[0]}function o(e,r){return n[3]=e[r],n[2]=e[r+1],n[1]=e[r+2],n[0]=e[r+3],t[0]}e.writeFloatLE=r?i:a,e.writeFloatBE=r?a:i,e.readFloatLE=r?s:o,e.readFloatBE=r?o:s}():function(){function t(e,t,n,r){var i=t<0?1:0;if(i&&(t=-t),0===t)e(1/t>0?0:2147483648,n,r);else if(isNaN(t))e(2143289344,n,r);else if(t>34028234663852886e22)e((i<<31|2139095040)>>>0,n,r);else if(t<11754943508222875e-54)e((i<<31|Math.round(t/1401298464324817e-60))>>>0,n,r);else{var a=Math.floor(Math.log(t)/Math.LN2);e((i<<31|a+127<<23|8388607&Math.round(t*Math.pow(2,-a)*8388608))>>>0,n,r)}}function s(e,t,n){var r=e(t,n),i=2*(r>>31)+1,a=r>>>23&255,s=8388607&r;return 255===a?s?NaN:i*(1/0):0===a?1401298464324817e-60*i*s:i*Math.pow(2,a-150)*(s+8388608)}e.writeFloatLE=t.bind(null,n),e.writeFloatBE=t.bind(null,r),e.readFloatLE=s.bind(null,i),e.readFloatBE=s.bind(null,a)}(),"undefined"!=typeof Float64Array?function(){var t=new Float64Array([-0]),n=new Uint8Array(t.buffer),r=128===n[7];function i(e,r,i){t[0]=e,r[i]=n[0],r[i+1]=n[1],r[i+2]=n[2],r[i+3]=n[3],r[i+4]=n[4],r[i+5]=n[5],r[i+6]=n[6],r[i+7]=n[7]}function a(e,r,i){t[0]=e,r[i]=n[7],r[i+1]=n[6],r[i+2]=n[5],r[i+3]=n[4],r[i+4]=n[3],r[i+5]=n[2],r[i+6]=n[1],r[i+7]=n[0]}function s(e,r){return n[0]=e[r],n[1]=e[r+1],n[2]=e[r+2],n[3]=e[r+3],n[4]=e[r+4],n[5]=e[r+5],n[6]=e[r+6],n[7]=e[r+7],t[0]}function o(e,r){return n[7]=e[r],n[6]=e[r+1],n[5]=e[r+2],n[4]=e[r+3],n[3]=e[r+4],n[2]=e[r+5],n[1]=e[r+6],n[0]=e[r+7],t[0]}e.writeDoubleLE=r?i:a,e.writeDoubleBE=r?a:i,e.readDoubleLE=r?s:o,e.readDoubleBE=r?o:s}():function(){function t(e,t,n,r,i,a){var s=r<0?1:0;if(s&&(r=-r),0===r)e(0,i,a+t),e(1/r>0?0:2147483648,i,a+n);else if(isNaN(r))e(0,i,a+t),e(2146959360,i,a+n);else if(r>17976931348623157e292)e(0,i,a+t),e((s<<31|2146435072)>>>0,i,a+n);else{var o;if(r<22250738585072014e-324)e((o=r/5e-324)>>>0,i,a+t),e((s<<31|o/4294967296)>>>0,i,a+n);else{var f=Math.floor(Math.log(r)/Math.LN2);1024===f&&(f=1023),e(4503599627370496*(o=r*Math.pow(2,-f))>>>0,i,a+t),e((s<<31|f+1023<<20|1048576*o&1048575)>>>0,i,a+n)}}}function s(e,t,n,r,i){var a=e(r,i+t),s=e(r,i+n),o=2*(s>>31)+1,f=s>>>20&2047,d=4294967296*(1048575&s)+a;return 2047===f?d?NaN:o*(1/0):0===f?5e-324*o*d:o*Math.pow(2,f-1075)*(d+4503599627370496)}e.writeDoubleLE=t.bind(null,n,0,4),e.writeDoubleBE=t.bind(null,r,4,0),e.readDoubleLE=s.bind(null,i,0,4),e.readDoubleBE=s.bind(null,a,4,0)}(),e}function n(e,t,n){t[n]=255&e,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24}function r(e,t,n){t[n]=e>>>24,t[n+1]=e>>>16&255,t[n+2]=e>>>8&255,t[n+3]=255&e}function i(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function a(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}e.exports=t(t)},7199:module=>{"use strict";function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(e){}return null}module.exports=inquire},6662:e=>{"use strict";e.exports=function(e,t,n){var r=n||8192,i=r>>>1,a=null,s=r;return function(n){if(n<1||n>i)return e(n);s+n>r&&(a=e(r),s=0);var o=t.call(a,s,s+=n);return 7&s&&(s=1+(7|s)),o}}},4997:(e,t)=>{"use strict";var n=t;n.length=function(e){for(var t=0,n=0,r=0;r<e.length;++r)(n=e.charCodeAt(r))<128?t+=1:n<2048?t+=2:55296==(64512&n)&&56320==(64512&e.charCodeAt(r+1))?(++r,t+=4):t+=3;return t},n.read=function(e,t,n){if(n-t<1)return"";for(var r,i=null,a=[],s=0;t<n;)(r=e[t++])<128?a[s++]=r:r>191&&r<224?a[s++]=(31&r)<<6|63&e[t++]:r>239&&r<365?(r=((7&r)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536,a[s++]=55296+(r>>10),a[s++]=56320+(1023&r)):a[s++]=(15&r)<<12|(63&e[t++])<<6|63&e[t++],s>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,a)),s=0);return i?(s&&i.push(String.fromCharCode.apply(String,a.slice(0,s))),i.join("")):String.fromCharCode.apply(String,a.slice(0,s))},n.write=function(e,t,n){for(var r,i,a=n,s=0;s<e.length;++s)(r=e.charCodeAt(s))<128?t[n++]=r:r<2048?(t[n++]=r>>6|192,t[n++]=63&r|128):55296==(64512&r)&&56320==(64512&(i=e.charCodeAt(s+1)))?(r=65536+((1023&r)<<10)+(1023&i),++s,t[n++]=r>>18|240,t[n++]=r>>12&63|128,t[n++]=r>>6&63|128,t[n++]=63&r|128):(t[n++]=r>>12|224,t[n++]=r>>6&63|128,t[n++]=63&r|128);return n-a}},8599:e=>{"use strict";const{AbortController:t,AbortSignal:n}="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0;e.exports=t,e.exports.AbortSignal=n,e.exports.default=t},2044:(e,t,n)=>{const{AbortController:r}=n(5353);function i(e){const t=new r;function n(){t.abort();for(const t of e)t&&t.removeEventListener&&t.removeEventListener("abort",n)}for(const t of e)if(t&&t.addEventListener){if(t.aborted){n();break}t.addEventListener("abort",n)}return t.signal}e.exports=i,e.exports.anySignal=i},2882:e=>{"use strict";for(var t="qpzry9x8gf2tvdw0s3jn54khce6mua7l",n={},r=0;r<t.length;r++){var i=t.charAt(r);if(void 0!==n[i])throw new TypeError(i+" is ambiguous");n[i]=r}function a(e){var t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function s(e){for(var t=1,n=0;n<e.length;++n){var r=e.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+e+")";t=a(t)^r>>5}for(t=a(t),n=0;n<e.length;++n){var i=e.charCodeAt(n);t=a(t)^31&i}return t}function o(e,t){if(t=t||90,e.length<8)return e+" too short";if(e.length>t)return"Exceeds length limit";var r=e.toLowerCase(),i=e.toUpperCase();if(e!==r&&e!==i)return"Mixed-case string "+e;var o=(e=r).lastIndexOf("1");if(-1===o)return"No separator character for "+e;if(0===o)return"Missing prefix for "+e;var f=e.slice(0,o),d=e.slice(o+1);if(d.length<6)return"Data too short";var l=s(f);if("string"==typeof l)return l;for(var c=[],u=0;u<d.length;++u){var p=d.charAt(u),m=n[p];if(void 0===m)return"Unknown character "+p;l=a(l)^m,u+6>=d.length||c.push(m)}return 1!==l?"Invalid checksum for "+e:{prefix:f,words:c}}function f(e,t,n,r){for(var i=0,a=0,s=(1<<n)-1,o=[],f=0;f<e.length;++f)for(i=i<<t|e[f],a+=t;a>=n;)a-=n,o.push(i>>a&s);if(r)a>0&&o.push(i<<n-a&s);else{if(a>=t)return"Excess padding";if(i<<n-a&s)return"Non-zero padding"}return o}e.exports={decodeUnsafe:function(){var e=o.apply(null,arguments);if("object"==typeof e)return e},decode:function(e){var t=o.apply(null,arguments);if("object"==typeof t)return t;throw new Error(t)},encode:function(e,n,r){if(r=r||90,e.length+7+n.length>r)throw new TypeError("Exceeds length limit");var i=s(e=e.toLowerCase());if("string"==typeof i)throw new Error(i);for(var o=e+"1",f=0;f<n.length;++f){var d=n[f];if(d>>5!=0)throw new Error("Non 5-bit word");i=a(i)^d,o+=t.charAt(d)}for(f=0;f<6;++f)i=a(i);for(i^=1,f=0;f<6;++f)o+=t.charAt(i>>5*(5-f)&31);return o},toWordsUnsafe:function(e){var t=f(e,8,5,!0);if(Array.isArray(t))return t},toWords:function(e){var t=f(e,8,5,!0);if(Array.isArray(t))return t;throw new Error(t)},fromWordsUnsafe:function(e){var t=f(e,5,8,!1);if(Array.isArray(t))return t},fromWords:function(e){var t=f(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}}},3294:(e,t,n)=>{"use strict";const r=n(6154);e.exports=function(e){return"function"==typeof e.stream?r(e.stream()):r(new Response(e).body)}},3550:function(e,t,n){!function(e,t){"use strict";function r(e,t){if(!e)throw new Error(t||"Assertion failed")}function i(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}function a(e,t,n){if(a.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(n=t,t=10),this._init(e||0,t||10,n||"be"))}var s;"object"==typeof e?e.exports=a:t.BN=a,a.BN=a,a.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:n(6601).Buffer}catch(e){}function o(e,t){var n=e.charCodeAt(t);return n>=65&&n<=70?n-55:n>=97&&n<=102?n-87:n-48&15}function f(e,t,n){var r=o(e,n);return n-1>=t&&(r|=o(e,n-1)<<4),r}function d(e,t,n,r){for(var i=0,a=Math.min(e.length,n),s=t;s<a;s++){var o=e.charCodeAt(s)-48;i*=r,i+=o>=49?o-49+10:o>=17?o-17+10:o}return i}a.isBN=function(e){return e instanceof a||null!==e&&"object"==typeof e&&e.constructor.wordSize===a.wordSize&&Array.isArray(e.words)},a.max=function(e,t){return e.cmp(t)>0?e:t},a.min=function(e,t){return e.cmp(t)<0?e:t},a.prototype._init=function(e,t,n){if("number"==typeof e)return this._initNumber(e,t,n);if("object"==typeof e)return this._initArray(e,t,n);"hex"===t&&(t=16),r(t===(0|t)&&t>=2&&t<=36);var i=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<e.length&&(16===t?this._parseHex(e,i,n):(this._parseBase(e,t,i),"le"===n&&this._initArray(this.toArray(),t,n)))},a.prototype._initNumber=function(e,t,n){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(r(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),t,n)},a.prototype._initArray=function(e,t,n){if(r("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var a,s,o=0;if("be"===n)for(i=e.length-1,a=0;i>=0;i-=3)s=e[i]|e[i-1]<<8|e[i-2]<<16,this.words[a]|=s<<o&67108863,this.words[a+1]=s>>>26-o&67108863,(o+=24)>=26&&(o-=26,a++);else if("le"===n)for(i=0,a=0;i<e.length;i+=3)s=e[i]|e[i+1]<<8|e[i+2]<<16,this.words[a]|=s<<o&67108863,this.words[a+1]=s>>>26-o&67108863,(o+=24)>=26&&(o-=26,a++);return this.strip()},a.prototype._parseHex=function(e,t,n){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var i,a=0,s=0;if("be"===n)for(r=e.length-1;r>=t;r-=2)i=f(e,t,r)<<a,this.words[s]|=67108863&i,a>=18?(a-=18,s+=1,this.words[s]|=i>>>26):a+=8;else for(r=(e.length-t)%2==0?t+1:t;r<e.length;r+=2)i=f(e,t,r)<<a,this.words[s]|=67108863&i,a>=18?(a-=18,s+=1,this.words[s]|=i>>>26):a+=8;this.strip()},a.prototype._parseBase=function(e,t,n){this.words=[0],this.length=1;for(var r=0,i=1;i<=67108863;i*=t)r++;r--,i=i/t|0;for(var a=e.length-n,s=a%r,o=Math.min(a,a-s)+n,f=0,l=n;l<o;l+=r)f=d(e,l,l+r,t),this.imuln(i),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f);if(0!==s){var c=1;for(f=d(e,l,e.length,t),l=0;l<s;l++)c*=t;this.imuln(c),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f)}this.strip()},a.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},a.prototype.clone=function(){var e=new a(null);return this.copy(e),e},a.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},a.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},a.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},a.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var l=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],u=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function p(e,t,n){n.negative=t.negative^e.negative;var r=e.length+t.length|0;n.length=r,r=r-1|0;var i=0|e.words[0],a=0|t.words[0],s=i*a,o=67108863&s,f=s/67108864|0;n.words[0]=o;for(var d=1;d<r;d++){for(var l=f>>>26,c=67108863&f,u=Math.min(d,t.length-1),p=Math.max(0,d-e.length+1);p<=u;p++){var m=d-p|0;l+=(s=(i=0|e.words[m])*(a=0|t.words[p])+c)/67108864|0,c=67108863&s}n.words[d]=0|c,f=0|l}return 0!==f?n.words[d]=0|f:n.length--,n.strip()}a.prototype.toString=function(e,t){var n;if(t=0|t||1,16===(e=e||10)||"hex"===e){n="";for(var i=0,a=0,s=0;s<this.length;s++){var o=this.words[s],f=(16777215&(o<<i|a)).toString(16);n=0!=(a=o>>>24-i&16777215)||s!==this.length-1?l[6-f.length]+f+n:f+n,(i+=2)>=26&&(i-=26,s--)}for(0!==a&&(n=a.toString(16)+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(e===(0|e)&&e>=2&&e<=36){var d=c[e],p=u[e];n="";var m=this.clone();for(m.negative=0;!m.isZero();){var y=m.modn(p).toString(e);n=(m=m.idivn(p)).isZero()?y+n:l[d-y.length]+y+n}for(this.isZero()&&(n="0"+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},a.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},a.prototype.toJSON=function(){return this.toString(16)},a.prototype.toBuffer=function(e,t){return r(void 0!==s),this.toArrayLike(s,e,t)},a.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},a.prototype.toArrayLike=function(e,t,n){var i=this.byteLength(),a=n||Math.max(1,i);r(i<=a,"byte array longer than desired length"),r(a>0,"Requested array length <= 0"),this.strip();var s,o,f="le"===t,d=new e(a),l=this.clone();if(f){for(o=0;!l.isZero();o++)s=l.andln(255),l.iushrn(8),d[o]=s;for(;o<a;o++)d[o]=0}else{for(o=0;o<a-i;o++)d[o]=0;for(o=0;!l.isZero();o++)s=l.andln(255),l.iushrn(8),d[a-o-1]=s}return d},Math.clz32?a.prototype._countBits=function(e){return 32-Math.clz32(e)}:a.prototype._countBits=function(e){var t=e,n=0;return t>=4096&&(n+=13,t>>>=13),t>=64&&(n+=7,t>>>=7),t>=8&&(n+=4,t>>>=4),t>=2&&(n+=2,t>>>=2),n+t},a.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,n=0;return 0==(8191&t)&&(n+=13,t>>>=13),0==(127&t)&&(n+=7,t>>>=7),0==(15&t)&&(n+=4,t>>>=4),0==(3&t)&&(n+=2,t>>>=2),0==(1&t)&&n++,n},a.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},a.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var n=this._zeroBits(this.words[t]);if(e+=n,26!==n)break}return e},a.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},a.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},a.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},a.prototype.isNeg=function(){return 0!==this.negative},a.prototype.neg=function(){return this.clone().ineg()},a.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},a.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this.strip()},a.prototype.ior=function(e){return r(0==(this.negative|e.negative)),this.iuor(e)},a.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},a.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},a.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var n=0;n<t.length;n++)this.words[n]=this.words[n]&e.words[n];return this.length=t.length,this.strip()},a.prototype.iand=function(e){return r(0==(this.negative|e.negative)),this.iuand(e)},a.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},a.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},a.prototype.iuxor=function(e){var t,n;this.length>e.length?(t=this,n=e):(t=e,n=this);for(var r=0;r<n.length;r++)this.words[r]=t.words[r]^n.words[r];if(this!==t)for(;r<t.length;r++)this.words[r]=t.words[r];return this.length=t.length,this.strip()},a.prototype.ixor=function(e){return r(0==(this.negative|e.negative)),this.iuxor(e)},a.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},a.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},a.prototype.inotn=function(e){r("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),n=e%26;this._expand(t),n>0&&t--;for(var i=0;i<t;i++)this.words[i]=67108863&~this.words[i];return n>0&&(this.words[i]=~this.words[i]&67108863>>26-n),this.strip()},a.prototype.notn=function(e){return this.clone().inotn(e)},a.prototype.setn=function(e,t){r("number"==typeof e&&e>=0);var n=e/26|0,i=e%26;return this._expand(n+1),this.words[n]=t?this.words[n]|1<<i:this.words[n]&~(1<<i),this.strip()},a.prototype.iadd=function(e){var t,n,r;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(n=this,r=e):(n=e,r=this);for(var i=0,a=0;a<r.length;a++)t=(0|n.words[a])+(0|r.words[a])+i,this.words[a]=67108863&t,i=t>>>26;for(;0!==i&&a<n.length;a++)t=(0|n.words[a])+i,this.words[a]=67108863&t,i=t>>>26;if(this.length=n.length,0!==i)this.words[this.length]=i,this.length++;else if(n!==this)for(;a<n.length;a++)this.words[a]=n.words[a];return this},a.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},a.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var n,r,i=this.cmp(e);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(n=this,r=e):(n=e,r=this);for(var a=0,s=0;s<r.length;s++)a=(t=(0|n.words[s])-(0|r.words[s])+a)>>26,this.words[s]=67108863&t;for(;0!==a&&s<n.length;s++)a=(t=(0|n.words[s])+a)>>26,this.words[s]=67108863&t;if(0===a&&s<n.length&&n!==this)for(;s<n.length;s++)this.words[s]=n.words[s];return this.length=Math.max(this.length,s),n!==this&&(this.negative=1),this.strip()},a.prototype.sub=function(e){return this.clone().isub(e)};var m=function(e,t,n){var r,i,a,s=e.words,o=t.words,f=n.words,d=0,l=0|s[0],c=8191&l,u=l>>>13,p=0|s[1],m=8191&p,y=p>>>13,h=0|s[2],b=8191&h,g=h>>>13,_=0|s[3],T=8191&_,v=_>>>13,w=0|s[4],Y=8191&w,A=w>>>13,I=0|s[5],C=8191&I,E=I>>>13,S=0|s[6],N=8191&S,k=S>>>13,x=0|s[7],D=8191&x,F=x>>>13,P=0|s[8],L=8191&P,R=P>>>13,B=0|s[9],M=8191&B,V=B>>>13,O=0|o[0],U=8191&O,$=O>>>13,z=0|o[1],j=8191&z,q=z>>>13,H=0|o[2],G=8191&H,W=H>>>13,J=0|o[3],K=8191&J,X=J>>>13,Z=0|o[4],Q=8191&Z,ee=Z>>>13,te=0|o[5],ne=8191&te,re=te>>>13,ie=0|o[6],ae=8191&ie,se=ie>>>13,oe=0|o[7],fe=8191&oe,de=oe>>>13,le=0|o[8],ce=8191&le,ue=le>>>13,pe=0|o[9],me=8191&pe,ye=pe>>>13;n.negative=e.negative^t.negative,n.length=19;var he=(d+(r=Math.imul(c,U))|0)+((8191&(i=(i=Math.imul(c,$))+Math.imul(u,U)|0))<<13)|0;d=((a=Math.imul(u,$))+(i>>>13)|0)+(he>>>26)|0,he&=67108863,r=Math.imul(m,U),i=(i=Math.imul(m,$))+Math.imul(y,U)|0,a=Math.imul(y,$);var be=(d+(r=r+Math.imul(c,j)|0)|0)+((8191&(i=(i=i+Math.imul(c,q)|0)+Math.imul(u,j)|0))<<13)|0;d=((a=a+Math.imul(u,q)|0)+(i>>>13)|0)+(be>>>26)|0,be&=67108863,r=Math.imul(b,U),i=(i=Math.imul(b,$))+Math.imul(g,U)|0,a=Math.imul(g,$),r=r+Math.imul(m,j)|0,i=(i=i+Math.imul(m,q)|0)+Math.imul(y,j)|0,a=a+Math.imul(y,q)|0;var ge=(d+(r=r+Math.imul(c,G)|0)|0)+((8191&(i=(i=i+Math.imul(c,W)|0)+Math.imul(u,G)|0))<<13)|0;d=((a=a+Math.imul(u,W)|0)+(i>>>13)|0)+(ge>>>26)|0,ge&=67108863,r=Math.imul(T,U),i=(i=Math.imul(T,$))+Math.imul(v,U)|0,a=Math.imul(v,$),r=r+Math.imul(b,j)|0,i=(i=i+Math.imul(b,q)|0)+Math.imul(g,j)|0,a=a+Math.imul(g,q)|0,r=r+Math.imul(m,G)|0,i=(i=i+Math.imul(m,W)|0)+Math.imul(y,G)|0,a=a+Math.imul(y,W)|0;var _e=(d+(r=r+Math.imul(c,K)|0)|0)+((8191&(i=(i=i+Math.imul(c,X)|0)+Math.imul(u,K)|0))<<13)|0;d=((a=a+Math.imul(u,X)|0)+(i>>>13)|0)+(_e>>>26)|0,_e&=67108863,r=Math.imul(Y,U),i=(i=Math.imul(Y,$))+Math.imul(A,U)|0,a=Math.imul(A,$),r=r+Math.imul(T,j)|0,i=(i=i+Math.imul(T,q)|0)+Math.imul(v,j)|0,a=a+Math.imul(v,q)|0,r=r+Math.imul(b,G)|0,i=(i=i+Math.imul(b,W)|0)+Math.imul(g,G)|0,a=a+Math.imul(g,W)|0,r=r+Math.imul(m,K)|0,i=(i=i+Math.imul(m,X)|0)+Math.imul(y,K)|0,a=a+Math.imul(y,X)|0;var Te=(d+(r=r+Math.imul(c,Q)|0)|0)+((8191&(i=(i=i+Math.imul(c,ee)|0)+Math.imul(u,Q)|0))<<13)|0;d=((a=a+Math.imul(u,ee)|0)+(i>>>13)|0)+(Te>>>26)|0,Te&=67108863,r=Math.imul(C,U),i=(i=Math.imul(C,$))+Math.imul(E,U)|0,a=Math.imul(E,$),r=r+Math.imul(Y,j)|0,i=(i=i+Math.imul(Y,q)|0)+Math.imul(A,j)|0,a=a+Math.imul(A,q)|0,r=r+Math.imul(T,G)|0,i=(i=i+Math.imul(T,W)|0)+Math.imul(v,G)|0,a=a+Math.imul(v,W)|0,r=r+Math.imul(b,K)|0,i=(i=i+Math.imul(b,X)|0)+Math.imul(g,K)|0,a=a+Math.imul(g,X)|0,r=r+Math.imul(m,Q)|0,i=(i=i+Math.imul(m,ee)|0)+Math.imul(y,Q)|0,a=a+Math.imul(y,ee)|0;var ve=(d+(r=r+Math.imul(c,ne)|0)|0)+((8191&(i=(i=i+Math.imul(c,re)|0)+Math.imul(u,ne)|0))<<13)|0;d=((a=a+Math.imul(u,re)|0)+(i>>>13)|0)+(ve>>>26)|0,ve&=67108863,r=Math.imul(N,U),i=(i=Math.imul(N,$))+Math.imul(k,U)|0,a=Math.imul(k,$),r=r+Math.imul(C,j)|0,i=(i=i+Math.imul(C,q)|0)+Math.imul(E,j)|0,a=a+Math.imul(E,q)|0,r=r+Math.imul(Y,G)|0,i=(i=i+Math.imul(Y,W)|0)+Math.imul(A,G)|0,a=a+Math.imul(A,W)|0,r=r+Math.imul(T,K)|0,i=(i=i+Math.imul(T,X)|0)+Math.imul(v,K)|0,a=a+Math.imul(v,X)|0,r=r+Math.imul(b,Q)|0,i=(i=i+Math.imul(b,ee)|0)+Math.imul(g,Q)|0,a=a+Math.imul(g,ee)|0,r=r+Math.imul(m,ne)|0,i=(i=i+Math.imul(m,re)|0)+Math.imul(y,ne)|0,a=a+Math.imul(y,re)|0;var we=(d+(r=r+Math.imul(c,ae)|0)|0)+((8191&(i=(i=i+Math.imul(c,se)|0)+Math.imul(u,ae)|0))<<13)|0;d=((a=a+Math.imul(u,se)|0)+(i>>>13)|0)+(we>>>26)|0,we&=67108863,r=Math.imul(D,U),i=(i=Math.imul(D,$))+Math.imul(F,U)|0,a=Math.imul(F,$),r=r+Math.imul(N,j)|0,i=(i=i+Math.imul(N,q)|0)+Math.imul(k,j)|0,a=a+Math.imul(k,q)|0,r=r+Math.imul(C,G)|0,i=(i=i+Math.imul(C,W)|0)+Math.imul(E,G)|0,a=a+Math.imul(E,W)|0,r=r+Math.imul(Y,K)|0,i=(i=i+Math.imul(Y,X)|0)+Math.imul(A,K)|0,a=a+Math.imul(A,X)|0,r=r+Math.imul(T,Q)|0,i=(i=i+Math.imul(T,ee)|0)+Math.imul(v,Q)|0,a=a+Math.imul(v,ee)|0,r=r+Math.imul(b,ne)|0,i=(i=i+Math.imul(b,re)|0)+Math.imul(g,ne)|0,a=a+Math.imul(g,re)|0,r=r+Math.imul(m,ae)|0,i=(i=i+Math.imul(m,se)|0)+Math.imul(y,ae)|0,a=a+Math.imul(y,se)|0;var Ye=(d+(r=r+Math.imul(c,fe)|0)|0)+((8191&(i=(i=i+Math.imul(c,de)|0)+Math.imul(u,fe)|0))<<13)|0;d=((a=a+Math.imul(u,de)|0)+(i>>>13)|0)+(Ye>>>26)|0,Ye&=67108863,r=Math.imul(L,U),i=(i=Math.imul(L,$))+Math.imul(R,U)|0,a=Math.imul(R,$),r=r+Math.imul(D,j)|0,i=(i=i+Math.imul(D,q)|0)+Math.imul(F,j)|0,a=a+Math.imul(F,q)|0,r=r+Math.imul(N,G)|0,i=(i=i+Math.imul(N,W)|0)+Math.imul(k,G)|0,a=a+Math.imul(k,W)|0,r=r+Math.imul(C,K)|0,i=(i=i+Math.imul(C,X)|0)+Math.imul(E,K)|0,a=a+Math.imul(E,X)|0,r=r+Math.imul(Y,Q)|0,i=(i=i+Math.imul(Y,ee)|0)+Math.imul(A,Q)|0,a=a+Math.imul(A,ee)|0,r=r+Math.imul(T,ne)|0,i=(i=i+Math.imul(T,re)|0)+Math.imul(v,ne)|0,a=a+Math.imul(v,re)|0,r=r+Math.imul(b,ae)|0,i=(i=i+Math.imul(b,se)|0)+Math.imul(g,ae)|0,a=a+Math.imul(g,se)|0,r=r+Math.imul(m,fe)|0,i=(i=i+Math.imul(m,de)|0)+Math.imul(y,fe)|0,a=a+Math.imul(y,de)|0;var Ae=(d+(r=r+Math.imul(c,ce)|0)|0)+((8191&(i=(i=i+Math.imul(c,ue)|0)+Math.imul(u,ce)|0))<<13)|0;d=((a=a+Math.imul(u,ue)|0)+(i>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,r=Math.imul(M,U),i=(i=Math.imul(M,$))+Math.imul(V,U)|0,a=Math.imul(V,$),r=r+Math.imul(L,j)|0,i=(i=i+Math.imul(L,q)|0)+Math.imul(R,j)|0,a=a+Math.imul(R,q)|0,r=r+Math.imul(D,G)|0,i=(i=i+Math.imul(D,W)|0)+Math.imul(F,G)|0,a=a+Math.imul(F,W)|0,r=r+Math.imul(N,K)|0,i=(i=i+Math.imul(N,X)|0)+Math.imul(k,K)|0,a=a+Math.imul(k,X)|0,r=r+Math.imul(C,Q)|0,i=(i=i+Math.imul(C,ee)|0)+Math.imul(E,Q)|0,a=a+Math.imul(E,ee)|0,r=r+Math.imul(Y,ne)|0,i=(i=i+Math.imul(Y,re)|0)+Math.imul(A,ne)|0,a=a+Math.imul(A,re)|0,r=r+Math.imul(T,ae)|0,i=(i=i+Math.imul(T,se)|0)+Math.imul(v,ae)|0,a=a+Math.imul(v,se)|0,r=r+Math.imul(b,fe)|0,i=(i=i+Math.imul(b,de)|0)+Math.imul(g,fe)|0,a=a+Math.imul(g,de)|0,r=r+Math.imul(m,ce)|0,i=(i=i+Math.imul(m,ue)|0)+Math.imul(y,ce)|0,a=a+Math.imul(y,ue)|0;var Ie=(d+(r=r+Math.imul(c,me)|0)|0)+((8191&(i=(i=i+Math.imul(c,ye)|0)+Math.imul(u,me)|0))<<13)|0;d=((a=a+Math.imul(u,ye)|0)+(i>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,r=Math.imul(M,j),i=(i=Math.imul(M,q))+Math.imul(V,j)|0,a=Math.imul(V,q),r=r+Math.imul(L,G)|0,i=(i=i+Math.imul(L,W)|0)+Math.imul(R,G)|0,a=a+Math.imul(R,W)|0,r=r+Math.imul(D,K)|0,i=(i=i+Math.imul(D,X)|0)+Math.imul(F,K)|0,a=a+Math.imul(F,X)|0,r=r+Math.imul(N,Q)|0,i=(i=i+Math.imul(N,ee)|0)+Math.imul(k,Q)|0,a=a+Math.imul(k,ee)|0,r=r+Math.imul(C,ne)|0,i=(i=i+Math.imul(C,re)|0)+Math.imul(E,ne)|0,a=a+Math.imul(E,re)|0,r=r+Math.imul(Y,ae)|0,i=(i=i+Math.imul(Y,se)|0)+Math.imul(A,ae)|0,a=a+Math.imul(A,se)|0,r=r+Math.imul(T,fe)|0,i=(i=i+Math.imul(T,de)|0)+Math.imul(v,fe)|0,a=a+Math.imul(v,de)|0,r=r+Math.imul(b,ce)|0,i=(i=i+Math.imul(b,ue)|0)+Math.imul(g,ce)|0,a=a+Math.imul(g,ue)|0;var Ce=(d+(r=r+Math.imul(m,me)|0)|0)+((8191&(i=(i=i+Math.imul(m,ye)|0)+Math.imul(y,me)|0))<<13)|0;d=((a=a+Math.imul(y,ye)|0)+(i>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,r=Math.imul(M,G),i=(i=Math.imul(M,W))+Math.imul(V,G)|0,a=Math.imul(V,W),r=r+Math.imul(L,K)|0,i=(i=i+Math.imul(L,X)|0)+Math.imul(R,K)|0,a=a+Math.imul(R,X)|0,r=r+Math.imul(D,Q)|0,i=(i=i+Math.imul(D,ee)|0)+Math.imul(F,Q)|0,a=a+Math.imul(F,ee)|0,r=r+Math.imul(N,ne)|0,i=(i=i+Math.imul(N,re)|0)+Math.imul(k,ne)|0,a=a+Math.imul(k,re)|0,r=r+Math.imul(C,ae)|0,i=(i=i+Math.imul(C,se)|0)+Math.imul(E,ae)|0,a=a+Math.imul(E,se)|0,r=r+Math.imul(Y,fe)|0,i=(i=i+Math.imul(Y,de)|0)+Math.imul(A,fe)|0,a=a+Math.imul(A,de)|0,r=r+Math.imul(T,ce)|0,i=(i=i+Math.imul(T,ue)|0)+Math.imul(v,ce)|0,a=a+Math.imul(v,ue)|0;var Ee=(d+(r=r+Math.imul(b,me)|0)|0)+((8191&(i=(i=i+Math.imul(b,ye)|0)+Math.imul(g,me)|0))<<13)|0;d=((a=a+Math.imul(g,ye)|0)+(i>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,r=Math.imul(M,K),i=(i=Math.imul(M,X))+Math.imul(V,K)|0,a=Math.imul(V,X),r=r+Math.imul(L,Q)|0,i=(i=i+Math.imul(L,ee)|0)+Math.imul(R,Q)|0,a=a+Math.imul(R,ee)|0,r=r+Math.imul(D,ne)|0,i=(i=i+Math.imul(D,re)|0)+Math.imul(F,ne)|0,a=a+Math.imul(F,re)|0,r=r+Math.imul(N,ae)|0,i=(i=i+Math.imul(N,se)|0)+Math.imul(k,ae)|0,a=a+Math.imul(k,se)|0,r=r+Math.imul(C,fe)|0,i=(i=i+Math.imul(C,de)|0)+Math.imul(E,fe)|0,a=a+Math.imul(E,de)|0,r=r+Math.imul(Y,ce)|0,i=(i=i+Math.imul(Y,ue)|0)+Math.imul(A,ce)|0,a=a+Math.imul(A,ue)|0;var Se=(d+(r=r+Math.imul(T,me)|0)|0)+((8191&(i=(i=i+Math.imul(T,ye)|0)+Math.imul(v,me)|0))<<13)|0;d=((a=a+Math.imul(v,ye)|0)+(i>>>13)|0)+(Se>>>26)|0,Se&=67108863,r=Math.imul(M,Q),i=(i=Math.imul(M,ee))+Math.imul(V,Q)|0,a=Math.imul(V,ee),r=r+Math.imul(L,ne)|0,i=(i=i+Math.imul(L,re)|0)+Math.imul(R,ne)|0,a=a+Math.imul(R,re)|0,r=r+Math.imul(D,ae)|0,i=(i=i+Math.imul(D,se)|0)+Math.imul(F,ae)|0,a=a+Math.imul(F,se)|0,r=r+Math.imul(N,fe)|0,i=(i=i+Math.imul(N,de)|0)+Math.imul(k,fe)|0,a=a+Math.imul(k,de)|0,r=r+Math.imul(C,ce)|0,i=(i=i+Math.imul(C,ue)|0)+Math.imul(E,ce)|0,a=a+Math.imul(E,ue)|0;var Ne=(d+(r=r+Math.imul(Y,me)|0)|0)+((8191&(i=(i=i+Math.imul(Y,ye)|0)+Math.imul(A,me)|0))<<13)|0;d=((a=a+Math.imul(A,ye)|0)+(i>>>13)|0)+(Ne>>>26)|0,Ne&=67108863,r=Math.imul(M,ne),i=(i=Math.imul(M,re))+Math.imul(V,ne)|0,a=Math.imul(V,re),r=r+Math.imul(L,ae)|0,i=(i=i+Math.imul(L,se)|0)+Math.imul(R,ae)|0,a=a+Math.imul(R,se)|0,r=r+Math.imul(D,fe)|0,i=(i=i+Math.imul(D,de)|0)+Math.imul(F,fe)|0,a=a+Math.imul(F,de)|0,r=r+Math.imul(N,ce)|0,i=(i=i+Math.imul(N,ue)|0)+Math.imul(k,ce)|0,a=a+Math.imul(k,ue)|0;var ke=(d+(r=r+Math.imul(C,me)|0)|0)+((8191&(i=(i=i+Math.imul(C,ye)|0)+Math.imul(E,me)|0))<<13)|0;d=((a=a+Math.imul(E,ye)|0)+(i>>>13)|0)+(ke>>>26)|0,ke&=67108863,r=Math.imul(M,ae),i=(i=Math.imul(M,se))+Math.imul(V,ae)|0,a=Math.imul(V,se),r=r+Math.imul(L,fe)|0,i=(i=i+Math.imul(L,de)|0)+Math.imul(R,fe)|0,a=a+Math.imul(R,de)|0,r=r+Math.imul(D,ce)|0,i=(i=i+Math.imul(D,ue)|0)+Math.imul(F,ce)|0,a=a+Math.imul(F,ue)|0;var xe=(d+(r=r+Math.imul(N,me)|0)|0)+((8191&(i=(i=i+Math.imul(N,ye)|0)+Math.imul(k,me)|0))<<13)|0;d=((a=a+Math.imul(k,ye)|0)+(i>>>13)|0)+(xe>>>26)|0,xe&=67108863,r=Math.imul(M,fe),i=(i=Math.imul(M,de))+Math.imul(V,fe)|0,a=Math.imul(V,de),r=r+Math.imul(L,ce)|0,i=(i=i+Math.imul(L,ue)|0)+Math.imul(R,ce)|0,a=a+Math.imul(R,ue)|0;var De=(d+(r=r+Math.imul(D,me)|0)|0)+((8191&(i=(i=i+Math.imul(D,ye)|0)+Math.imul(F,me)|0))<<13)|0;d=((a=a+Math.imul(F,ye)|0)+(i>>>13)|0)+(De>>>26)|0,De&=67108863,r=Math.imul(M,ce),i=(i=Math.imul(M,ue))+Math.imul(V,ce)|0,a=Math.imul(V,ue);var Fe=(d+(r=r+Math.imul(L,me)|0)|0)+((8191&(i=(i=i+Math.imul(L,ye)|0)+Math.imul(R,me)|0))<<13)|0;d=((a=a+Math.imul(R,ye)|0)+(i>>>13)|0)+(Fe>>>26)|0,Fe&=67108863;var Pe=(d+(r=Math.imul(M,me))|0)+((8191&(i=(i=Math.imul(M,ye))+Math.imul(V,me)|0))<<13)|0;return d=((a=Math.imul(V,ye))+(i>>>13)|0)+(Pe>>>26)|0,Pe&=67108863,f[0]=he,f[1]=be,f[2]=ge,f[3]=_e,f[4]=Te,f[5]=ve,f[6]=we,f[7]=Ye,f[8]=Ae,f[9]=Ie,f[10]=Ce,f[11]=Ee,f[12]=Se,f[13]=Ne,f[14]=ke,f[15]=xe,f[16]=De,f[17]=Fe,f[18]=Pe,0!==d&&(f[19]=d,n.length++),n};function y(e,t,n){return(new h).mulp(e,t,n)}function h(e,t){this.x=e,this.y=t}Math.imul||(m=p),a.prototype.mulTo=function(e,t){var n,r=this.length+e.length;return n=10===this.length&&10===e.length?m(this,e,t):r<63?p(this,e,t):r<1024?function(e,t,n){n.negative=t.negative^e.negative,n.length=e.length+t.length;for(var r=0,i=0,a=0;a<n.length-1;a++){var s=i;i=0;for(var o=67108863&r,f=Math.min(a,t.length-1),d=Math.max(0,a-e.length+1);d<=f;d++){var l=a-d,c=(0|e.words[l])*(0|t.words[d]),u=67108863&c;o=67108863&(u=u+o|0),i+=(s=(s=s+(c/67108864|0)|0)+(u>>>26)|0)>>>26,s&=67108863}n.words[a]=o,r=s,s=i}return 0!==r?n.words[a]=r:n.length--,n.strip()}(this,e,t):y(this,e,t),n},h.prototype.makeRBT=function(e){for(var t=new Array(e),n=a.prototype._countBits(e)-1,r=0;r<e;r++)t[r]=this.revBin(r,n,e);return t},h.prototype.revBin=function(e,t,n){if(0===e||e===n-1)return e;for(var r=0,i=0;i<t;i++)r|=(1&e)<<t-i-1,e>>=1;return r},h.prototype.permute=function(e,t,n,r,i,a){for(var s=0;s<a;s++)r[s]=t[e[s]],i[s]=n[e[s]]},h.prototype.transform=function(e,t,n,r,i,a){this.permute(a,e,t,n,r,i);for(var s=1;s<i;s<<=1)for(var o=s<<1,f=Math.cos(2*Math.PI/o),d=Math.sin(2*Math.PI/o),l=0;l<i;l+=o)for(var c=f,u=d,p=0;p<s;p++){var m=n[l+p],y=r[l+p],h=n[l+p+s],b=r[l+p+s],g=c*h-u*b;b=c*b+u*h,h=g,n[l+p]=m+h,r[l+p]=y+b,n[l+p+s]=m-h,r[l+p+s]=y-b,p!==o&&(g=f*c-d*u,u=f*u+d*c,c=g)}},h.prototype.guessLen13b=function(e,t){var n=1|Math.max(t,e),r=1&n,i=0;for(n=n/2|0;n;n>>>=1)i++;return 1<<i+1+r},h.prototype.conjugate=function(e,t,n){if(!(n<=1))for(var r=0;r<n/2;r++){var i=e[r];e[r]=e[n-r-1],e[n-r-1]=i,i=t[r],t[r]=-t[n-r-1],t[n-r-1]=-i}},h.prototype.normalize13b=function(e,t){for(var n=0,r=0;r<t/2;r++){var i=8192*Math.round(e[2*r+1]/t)+Math.round(e[2*r]/t)+n;e[r]=67108863&i,n=i<67108864?0:i/67108864|0}return e},h.prototype.convert13b=function(e,t,n,i){for(var a=0,s=0;s<t;s++)a+=0|e[s],n[2*s]=8191&a,a>>>=13,n[2*s+1]=8191&a,a>>>=13;for(s=2*t;s<i;++s)n[s]=0;r(0===a),r(0==(-8192&a))},h.prototype.stub=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=0;return t},h.prototype.mulp=function(e,t,n){var r=2*this.guessLen13b(e.length,t.length),i=this.makeRBT(r),a=this.stub(r),s=new Array(r),o=new Array(r),f=new Array(r),d=new Array(r),l=new Array(r),c=new Array(r),u=n.words;u.length=r,this.convert13b(e.words,e.length,s,r),this.convert13b(t.words,t.length,d,r),this.transform(s,a,o,f,r,i),this.transform(d,a,l,c,r,i);for(var p=0;p<r;p++){var m=o[p]*l[p]-f[p]*c[p];f[p]=o[p]*c[p]+f[p]*l[p],o[p]=m}return this.conjugate(o,f,r),this.transform(o,f,u,a,r,i),this.conjugate(u,a,r),this.normalize13b(u,r),n.negative=e.negative^t.negative,n.length=e.length+t.length,n.strip()},a.prototype.mul=function(e){var t=new a(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},a.prototype.mulf=function(e){var t=new a(null);return t.words=new Array(this.length+e.length),y(this,e,t)},a.prototype.imul=function(e){return this.clone().mulTo(e,this)},a.prototype.imuln=function(e){r("number"==typeof e),r(e<67108864);for(var t=0,n=0;n<this.length;n++){var i=(0|this.words[n])*e,a=(67108863&i)+(67108863&t);t>>=26,t+=i/67108864|0,t+=a>>>26,this.words[n]=67108863&a}return 0!==t&&(this.words[n]=t,this.length++),this},a.prototype.muln=function(e){return this.clone().imuln(e)},a.prototype.sqr=function(){return this.mul(this)},a.prototype.isqr=function(){return this.imul(this.clone())},a.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),n=0;n<t.length;n++){var r=n/26|0,i=n%26;t[n]=(e.words[r]&1<<i)>>>i}return t}(e);if(0===t.length)return new a(1);for(var n=this,r=0;r<t.length&&0===t[r];r++,n=n.sqr());if(++r<t.length)for(var i=n.sqr();r<t.length;r++,i=i.sqr())0!==t[r]&&(n=n.mul(i));return n},a.prototype.iushln=function(e){r("number"==typeof e&&e>=0);var t,n=e%26,i=(e-n)/26,a=67108863>>>26-n<<26-n;if(0!==n){var s=0;for(t=0;t<this.length;t++){var o=this.words[t]&a,f=(0|this.words[t])-o<<n;this.words[t]=f|s,s=o>>>26-n}s&&(this.words[t]=s,this.length++)}if(0!==i){for(t=this.length-1;t>=0;t--)this.words[t+i]=this.words[t];for(t=0;t<i;t++)this.words[t]=0;this.length+=i}return this.strip()},a.prototype.ishln=function(e){return r(0===this.negative),this.iushln(e)},a.prototype.iushrn=function(e,t,n){var i;r("number"==typeof e&&e>=0),i=t?(t-t%26)/26:0;var a=e%26,s=Math.min((e-a)/26,this.length),o=67108863^67108863>>>a<<a,f=n;if(i-=s,i=Math.max(0,i),f){for(var d=0;d<s;d++)f.words[d]=this.words[d];f.length=s}if(0===s);else if(this.length>s)for(this.length-=s,d=0;d<this.length;d++)this.words[d]=this.words[d+s];else this.words[0]=0,this.length=1;var l=0;for(d=this.length-1;d>=0&&(0!==l||d>=i);d--){var c=0|this.words[d];this.words[d]=l<<26-a|c>>>a,l=c&o}return f&&0!==l&&(f.words[f.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},a.prototype.ishrn=function(e,t,n){return r(0===this.negative),this.iushrn(e,t,n)},a.prototype.shln=function(e){return this.clone().ishln(e)},a.prototype.ushln=function(e){return this.clone().iushln(e)},a.prototype.shrn=function(e){return this.clone().ishrn(e)},a.prototype.ushrn=function(e){return this.clone().iushrn(e)},a.prototype.testn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26,i=1<<t;return!(this.length<=n||!(this.words[n]&i))},a.prototype.imaskn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==t&&n++,this.length=Math.min(n,this.length),0!==t){var i=67108863^67108863>>>t<<t;this.words[this.length-1]&=i}return this.strip()},a.prototype.maskn=function(e){return this.clone().imaskn(e)},a.prototype.iaddn=function(e){return r("number"==typeof e),r(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},a.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},a.prototype.isubn=function(e){if(r("number"==typeof e),r(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this.strip()},a.prototype.addn=function(e){return this.clone().iaddn(e)},a.prototype.subn=function(e){return this.clone().isubn(e)},a.prototype.iabs=function(){return this.negative=0,this},a.prototype.abs=function(){return this.clone().iabs()},a.prototype._ishlnsubmul=function(e,t,n){var i,a,s=e.length+n;this._expand(s);var o=0;for(i=0;i<e.length;i++){a=(0|this.words[i+n])+o;var f=(0|e.words[i])*t;o=((a-=67108863&f)>>26)-(f/67108864|0),this.words[i+n]=67108863&a}for(;i<this.length-n;i++)o=(a=(0|this.words[i+n])+o)>>26,this.words[i+n]=67108863&a;if(0===o)return this.strip();for(r(-1===o),o=0,i=0;i<this.length;i++)o=(a=-(0|this.words[i])+o)>>26,this.words[i]=67108863&a;return this.negative=1,this.strip()},a.prototype._wordDiv=function(e,t){var n=(this.length,e.length),r=this.clone(),i=e,s=0|i.words[i.length-1];0!=(n=26-this._countBits(s))&&(i=i.ushln(n),r.iushln(n),s=0|i.words[i.length-1]);var o,f=r.length-i.length;if("mod"!==t){(o=new a(null)).length=f+1,o.words=new Array(o.length);for(var d=0;d<o.length;d++)o.words[d]=0}var l=r.clone()._ishlnsubmul(i,1,f);0===l.negative&&(r=l,o&&(o.words[f]=1));for(var c=f-1;c>=0;c--){var u=67108864*(0|r.words[i.length+c])+(0|r.words[i.length+c-1]);for(u=Math.min(u/s|0,67108863),r._ishlnsubmul(i,u,c);0!==r.negative;)u--,r.negative=0,r._ishlnsubmul(i,1,c),r.isZero()||(r.negative^=1);o&&(o.words[c]=u)}return o&&o.strip(),r.strip(),"div"!==t&&0!==n&&r.iushrn(n),{div:o||null,mod:r}},a.prototype.divmod=function(e,t,n){return r(!e.isZero()),this.isZero()?{div:new a(0),mod:new a(0)}:0!==this.negative&&0===e.negative?(o=this.neg().divmod(e,t),"mod"!==t&&(i=o.div.neg()),"div"!==t&&(s=o.mod.neg(),n&&0!==s.negative&&s.iadd(e)),{div:i,mod:s}):0===this.negative&&0!==e.negative?(o=this.divmod(e.neg(),t),"mod"!==t&&(i=o.div.neg()),{div:i,mod:o.mod}):0!=(this.negative&e.negative)?(o=this.neg().divmod(e.neg(),t),"div"!==t&&(s=o.mod.neg(),n&&0!==s.negative&&s.isub(e)),{div:o.div,mod:s}):e.length>this.length||this.cmp(e)<0?{div:new a(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new a(this.modn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new a(this.modn(e.words[0]))}:this._wordDiv(e,t);var i,s,o},a.prototype.div=function(e){return this.divmod(e,"div",!1).div},a.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},a.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},a.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var n=0!==t.div.negative?t.mod.isub(e):t.mod,r=e.ushrn(1),i=e.andln(1),a=n.cmp(r);return a<0||1===i&&0===a?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},a.prototype.modn=function(e){r(e<=67108863);for(var t=(1<<26)%e,n=0,i=this.length-1;i>=0;i--)n=(t*n+(0|this.words[i]))%e;return n},a.prototype.idivn=function(e){r(e<=67108863);for(var t=0,n=this.length-1;n>=0;n--){var i=(0|this.words[n])+67108864*t;this.words[n]=i/e|0,t=i%e}return this.strip()},a.prototype.divn=function(e){return this.clone().idivn(e)},a.prototype.egcd=function(e){r(0===e.negative),r(!e.isZero());var t=this,n=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i=new a(1),s=new a(0),o=new a(0),f=new a(1),d=0;t.isEven()&&n.isEven();)t.iushrn(1),n.iushrn(1),++d;for(var l=n.clone(),c=t.clone();!t.isZero();){for(var u=0,p=1;0==(t.words[0]&p)&&u<26;++u,p<<=1);if(u>0)for(t.iushrn(u);u-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(l),s.isub(c)),i.iushrn(1),s.iushrn(1);for(var m=0,y=1;0==(n.words[0]&y)&&m<26;++m,y<<=1);if(m>0)for(n.iushrn(m);m-- >0;)(o.isOdd()||f.isOdd())&&(o.iadd(l),f.isub(c)),o.iushrn(1),f.iushrn(1);t.cmp(n)>=0?(t.isub(n),i.isub(o),s.isub(f)):(n.isub(t),o.isub(i),f.isub(s))}return{a:o,b:f,gcd:n.iushln(d)}},a.prototype._invmp=function(e){r(0===e.negative),r(!e.isZero());var t=this,n=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i,s=new a(1),o=new a(0),f=n.clone();t.cmpn(1)>0&&n.cmpn(1)>0;){for(var d=0,l=1;0==(t.words[0]&l)&&d<26;++d,l<<=1);if(d>0)for(t.iushrn(d);d-- >0;)s.isOdd()&&s.iadd(f),s.iushrn(1);for(var c=0,u=1;0==(n.words[0]&u)&&c<26;++c,u<<=1);if(c>0)for(n.iushrn(c);c-- >0;)o.isOdd()&&o.iadd(f),o.iushrn(1);t.cmp(n)>=0?(t.isub(n),s.isub(o)):(n.isub(t),o.isub(s))}return(i=0===t.cmpn(1)?s:o).cmpn(0)<0&&i.iadd(e),i},a.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),n=e.clone();t.negative=0,n.negative=0;for(var r=0;t.isEven()&&n.isEven();r++)t.iushrn(1),n.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;n.isEven();)n.iushrn(1);var i=t.cmp(n);if(i<0){var a=t;t=n,n=a}else if(0===i||0===n.cmpn(1))break;t.isub(n)}return n.iushln(r)},a.prototype.invm=function(e){return this.egcd(e).a.umod(e)},a.prototype.isEven=function(){return 0==(1&this.words[0])},a.prototype.isOdd=function(){return 1==(1&this.words[0])},a.prototype.andln=function(e){return this.words[0]&e},a.prototype.bincn=function(e){r("number"==typeof e);var t=e%26,n=(e-t)/26,i=1<<t;if(this.length<=n)return this._expand(n+1),this.words[n]|=i,this;for(var a=i,s=n;0!==a&&s<this.length;s++){var o=0|this.words[s];a=(o+=a)>>>26,o&=67108863,this.words[s]=o}return 0!==a&&(this.words[s]=a,this.length++),this},a.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},a.prototype.cmpn=function(e){var t,n=e<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this.strip(),this.length>1)t=1;else{n&&(e=-e),r(e<=67108863,"Number is too big");var i=0|this.words[0];t=i===e?0:i<e?-1:1}return 0!==this.negative?0|-t:t},a.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},a.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,n=this.length-1;n>=0;n--){var r=0|this.words[n],i=0|e.words[n];if(r!==i){r<i?t=-1:r>i&&(t=1);break}}return t},a.prototype.gtn=function(e){return 1===this.cmpn(e)},a.prototype.gt=function(e){return 1===this.cmp(e)},a.prototype.gten=function(e){return this.cmpn(e)>=0},a.prototype.gte=function(e){return this.cmp(e)>=0},a.prototype.ltn=function(e){return-1===this.cmpn(e)},a.prototype.lt=function(e){return-1===this.cmp(e)},a.prototype.lten=function(e){return this.cmpn(e)<=0},a.prototype.lte=function(e){return this.cmp(e)<=0},a.prototype.eqn=function(e){return 0===this.cmpn(e)},a.prototype.eq=function(e){return 0===this.cmp(e)},a.red=function(e){return new Y(e)},a.prototype.toRed=function(e){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},a.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},a.prototype._forceRed=function(e){return this.red=e,this},a.prototype.forceRed=function(e){return r(!this.red,"Already a number in reduction context"),this._forceRed(e)},a.prototype.redAdd=function(e){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},a.prototype.redIAdd=function(e){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},a.prototype.redSub=function(e){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},a.prototype.redISub=function(e){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},a.prototype.redShl=function(e){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},a.prototype.redMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},a.prototype.redIMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},a.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},a.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},a.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},a.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},a.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},a.prototype.redPow=function(e){return r(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var b={k256:null,p224:null,p192:null,p25519:null};function g(e,t){this.name=e,this.p=new a(t,16),this.n=this.p.bitLength(),this.k=new a(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function _(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function T(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function v(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function w(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function Y(e){if("string"==typeof e){var t=a._prime(e);this.m=t.p,this.prime=t}else r(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function A(e){Y.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new a(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var e=new a(null);return e.words=new Array(Math.ceil(this.n/13)),e},g.prototype.ireduce=function(e){var t,n=e;do{this.split(n,this.tmp),t=(n=(n=this.imulK(n)).iadd(this.tmp)).bitLength()}while(t>this.n);var r=t<this.n?-1:n.ucmp(this.p);return 0===r?(n.words[0]=0,n.length=1):r>0?n.isub(this.p):void 0!==n.strip?n.strip():n._strip(),n},g.prototype.split=function(e,t){e.iushrn(this.n,0,t)},g.prototype.imulK=function(e){return e.imul(this.k)},i(_,g),_.prototype.split=function(e,t){for(var n=4194303,r=Math.min(e.length,9),i=0;i<r;i++)t.words[i]=e.words[i];if(t.length=r,e.length<=9)return e.words[0]=0,void(e.length=1);var a=e.words[9];for(t.words[t.length++]=a&n,i=10;i<e.length;i++){var s=0|e.words[i];e.words[i-10]=(s&n)<<4|a>>>22,a=s}a>>>=22,e.words[i-10]=a,0===a&&e.length>10?e.length-=10:e.length-=9},_.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,n=0;n<e.length;n++){var r=0|e.words[n];t+=977*r,e.words[n]=67108863&t,t=64*r+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},i(T,g),i(v,g),i(w,g),w.prototype.imulK=function(e){for(var t=0,n=0;n<e.length;n++){var r=19*(0|e.words[n])+t,i=67108863&r;r>>>=26,e.words[n]=i,t=r}return 0!==t&&(e.words[e.length++]=t),e},a._prime=function(e){if(b[e])return b[e];var t;if("k256"===e)t=new _;else if("p224"===e)t=new T;else if("p192"===e)t=new v;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new w}return b[e]=t,t},Y.prototype._verify1=function(e){r(0===e.negative,"red works only with positives"),r(e.red,"red works only with red numbers")},Y.prototype._verify2=function(e,t){r(0==(e.negative|t.negative),"red works only with positives"),r(e.red&&e.red===t.red,"red works only with red numbers")},Y.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):e.umod(this.m)._forceRed(this)},Y.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},Y.prototype.add=function(e,t){this._verify2(e,t);var n=e.add(t);return n.cmp(this.m)>=0&&n.isub(this.m),n._forceRed(this)},Y.prototype.iadd=function(e,t){this._verify2(e,t);var n=e.iadd(t);return n.cmp(this.m)>=0&&n.isub(this.m),n},Y.prototype.sub=function(e,t){this._verify2(e,t);var n=e.sub(t);return n.cmpn(0)<0&&n.iadd(this.m),n._forceRed(this)},Y.prototype.isub=function(e,t){this._verify2(e,t);var n=e.isub(t);return n.cmpn(0)<0&&n.iadd(this.m),n},Y.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},Y.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},Y.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},Y.prototype.isqr=function(e){return this.imul(e,e.clone())},Y.prototype.sqr=function(e){return this.mul(e,e)},Y.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(r(t%2==1),3===t){var n=this.m.add(new a(1)).iushrn(2);return this.pow(e,n)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);r(!i.isZero());var o=new a(1).toRed(this),f=o.redNeg(),d=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new a(2*l*l).toRed(this);0!==this.pow(l,d).cmp(f);)l.redIAdd(f);for(var c=this.pow(l,i),u=this.pow(e,i.addn(1).iushrn(1)),p=this.pow(e,i),m=s;0!==p.cmp(o);){for(var y=p,h=0;0!==y.cmp(o);h++)y=y.redSqr();r(h<m);var b=this.pow(c,new a(1).iushln(m-h-1));u=u.redMul(b),c=b.redSqr(),p=p.redMul(c),m=h}return u},Y.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},Y.prototype.pow=function(e,t){if(t.isZero())return new a(1).toRed(this);if(0===t.cmpn(1))return e.clone();var n=new Array(16);n[0]=new a(1).toRed(this),n[1]=e;for(var r=2;r<n.length;r++)n[r]=this.mul(n[r-1],e);var i=n[0],s=0,o=0,f=t.bitLength()%26;for(0===f&&(f=26),r=t.length-1;r>=0;r--){for(var d=t.words[r],l=f-1;l>=0;l--){var c=d>>l&1;i!==n[0]&&(i=this.sqr(i)),0!==c||0!==s?(s<<=1,s|=c,(4==++o||0===r&&0===l)&&(i=this.mul(i,n[s]),o=0,s=0)):o=0}f=26}return i},Y.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},Y.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},a.mont=function(e){return new A(e)},i(A,Y),A.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},A.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},A.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var n=e.imul(t),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),a=i;return i.cmp(this.m)>=0?a=i.isub(this.m):i.cmpn(0)<0&&(a=i.iadd(this.m)),a._forceRed(this)},A.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new a(0)._forceRed(this);var n=e.mul(t),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},A.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e=n.nmd(e),this)},6154:e=>{"use strict";e.exports=async function*(e,t={}){const n=e.getReader();try{for(;;){const e=await n.read();if(e.done)return;yield e.value}}finally{!0!==t.preventCancel&&n.cancel(),n.releaseLock()}}},1413:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7537),i=n.n(r),a=n(3645),s=n.n(a)()(i());s.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Oswald:wght@300&family=Raleway:wght@300;500;600&family=Vazirmatn:wght@300&display=swap);"]),s.push([e.id,'*{box-sizing:border-box}body{font-size:1.5em;margin:0;min-height:100%;background-color:#e0eeff;color:#333}body p,body a{font-family:"Vazirmatn",sans-serif}body h1,body h2,body h3{font-family:"Raleway",sans-serif;font-weight:700}body a{font-size:20px}.cardz{border-radius:10px;color:#fff;background:#232b3a;box-shadow:0 6px 10px rgba(0,0,0,.309),0 0 6px rgba(0,0,0,.321);transition:.3s transform cubic-bezier(0.155, 1.105, 0.295, 1.12),.3s box-shadow,.3s -webkit-transform cubic-bezier(0.155, 1.105, 0.295, 1.12);padding:14px 30px 18px 16px;cursor:pointer;min-height:500px;border-radius:10px;margin:0 3%}.cardz:hover{transform:scale(1.1);box-shadow:0 10px 20px rgba(0,0,0,.382),0 4px 8px rgba(0,0,0,.588);background-color:#de6e62}.cardz h3{font-weight:600;padding:2rem .5rem}.cardz p{font-weight:400;padding-top:2rem}.cardz img{position:absolute;padding:10px;right:15px;max-height:100px;opacity:.5}.cardz-1{background-image:url(https://s7.gifyu.com/images/wallet.png);background-repeat:no-repeat;background-position:top right;background-size:60px}.cardz-2{background-image:url(https://s7.gifyu.com/images/photo.png);background-repeat:no-repeat;background-position:top right;background-size:60px}.cardz-3{background-image:url(https://s7.gifyu.com/images/photography.png);background-repeat:no-repeat;background-position:top right;background-size:60px}@media(max-width: 990px){.cardz{margin:20px}}button,input{font-size:1em;border-radius:9px}nav{grid-row:1;width:100%;display:grid;grid-template-columns:1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr}.navbar-nav>.nav-item{margin-left:12px;margin-right:12px}.content-block{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:start;-webkit-align-items:flex-start;-ms-flex-align:start;align-items:flex-start}.div-block-9{position:relative}#first{grid-column:1/5;width:100%;display:grid;grid-template-columns:1fr 1fr 1fr 1fr 1fr 1fr}#logo{grid-column:1/3}#logoimg{width:150px}#search{grid-column:3/7;width:100%;display:grid;align-items:start;grid-template-columns:1fr 1fr 1fr 1fr 1fr 1fr}#seek{border:0;background:#d3d3d3;padding:5px}#links{grid-column:7/11;width:100%;display:grid;grid-gap:1em;align-items:start;grid-template-columns:1fr 1fr 1fr 1fr}#links button,#search button{border:0;background:none;font-size:.8em}#seekbtn{margin-left:-1em}#delete{background:tomato !important;color:ivory;border-radius:50%;font-size:.6em;margin-top:6px;margin-left:-2em;margin-right:2em}#defilinks{grid-column:11/13;width:100%;display:grid;align-items:start;justify-items:end;grid-template-columns:1fr}#defilinks button{background:tomato;border:0;border-radius:9px;color:ivory;width:50%}#stage{grid-row:2;width:100%;display:grid;grid-template-rows:1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;grid-template-columns:1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr}#box{padding-top:2em;padding-bottom:3em;grid-column:1/-1;display:grid;width:100%;grid-template-columns:1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;background:#fff}#show{grid-column:1/-1;text-align:center}#symbol img{width:60px;margin-bottom:1em}#box:nth-child(even){background:#eee}#bar{width:100px;height:5px;background:#de6e62;margin-left:calc(50% - 50px);margin-top:1em}section{position:relative;height:450px;width:90vw;margin:0 5%;display:flex;align-items:center}.swiper{width:100vw}.card{position:relative;background:#fff;border-radius:20px;box-shadow:0 5px 10px rgba(0,0,0,0);min-height:200px}.card::before{content:"";position:absolute;height:40%;width:100%;background:#fff;border-radius:20px 20px 0 0}.card .card-content{display:flex;flex-direction:column;align-items:center;position:relative;z-index:100;min-height:200px}section .card .image{height:140px;width:140px;border-radius:50%;padding:3px;background:#fff}section .card .image img{height:100%;width:100%;object-fit:cover;border-radius:50%;border:3px solid #fff}.card .media-icons{position:absolute;top:10px;right:20px;display:flex;flex-direction:column;align-items:center}.card .media-icons i{color:#fff;opacity:.6;margin-top:10px;transition:all .3s ease;cursor:pointer}.card .media-icons i:hover{opacity:1}.card .name-profession{display:flex;flex-direction:column;align-items:center;margin-top:10px;color:green}.name-profession .name{font-size:20px;font-weight:600}.name-profession .profession{font-size:15px;font-weight:500}.card .rating{display:flex;align-items:center;margin-top:18px}.card .rating i{font-size:18px;margin:0 2px;color:#7d2ae8}.card .button{width:100%;display:flex;justify-content:space-around;margin-top:20px}.card .button button{background:#7d2ae8;outline:none;border:none;color:#fff;padding:8px 22px;border-radius:20px;font-size:14px;transition:all .3s ease;cursor:pointer}.button button:hover{background:#6616d0}.swiper-pagination{position:absolute}.swiper-pagination-bullet{height:7px;width:26px;border-radius:25px;background:#7d2ae8}.swiper-button-next,.swiper-button-prev{opacity:.7;color:#7d2ae8;transition:all .3s ease}.swiper-button-next:hover,.swiper-button-prev:hover{opacity:1;color:#7d2ae8}#introimg{width:500px;max-width:90vw}#introtxt{grid-column:2/6;margin-top:5em}#headertext{color:#de6e62;font-weight:100;font-size:.8em;letter-spacing:.2em}#heading{font-weight:900;font-size:1.5em;letter-spacing:.1em;margin-bottom:1em;margin-top:1em}#infotxt{font-weight:100;font-size:.8em}#icon{background:#de6e62;width:40px;border-radius:9px;margin-bottom:1em}#icon:hover{background:#243841}#inlay:hover{background:#de6e62}#txt{font-size:.6em}#fourth{display:grid;grid-template-rows:1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;justify-content:start}.four{grid-template-rows:1fr !important}#fourth button{background:none;border:0;text-align:left;font-size:.6em;color:gray}#nlform{margin-top:1em;margin-bottom:1em;justify-content:start}#nlinput{background:#d3d3d3;border:0;padding:5px}#nltext,#nlend{font-size:.6em}#nlsend{background:#de6e62 !important;padding:11px;color:#fff !important;margin-top:-2px !important}#footer{width:100%;grid-column:1/-1;display:grid;grid-template-columns:150px 1fr 1fr 1fr 1fr 1fr 1fr 1fr;background:#fff !important}#logofoot{grid-column:1}#license{grid-column:2/6;font-size:.5em;padding-left:1em;padding-top:1em}#sociallinks{grid-column:8/9;text-align:right}#sociallinks button{border:0;background:none}#caroussel{padding:2em;grid-column:1/-1;display:grid;grid-template-columns:1fr 1fr 1fr 1fr;grid-gap:1em}#carousselbig{padding:2em;grid-column:1/-1;display:grid;grid-template-columns:1fr 1fr 1fr 1fr 1fr 1fr;grid-gap:1em}.combi{background:#fff;border:1px solid #d3d3d3;border-radius:9px;box-shadow:0 5px 10px rgba(0,0,0,.228);padding:1em;font-size:.6em;min-height:200px}#comimg{width:100%}#comavt{margin-top:-1.5em;width:32px;height:32px;border-radius:50%}#comico{margin-top:-1.5em;width:32px;height:32px;border-radius:0%}#combinf{font-size:.3em}',"",{version:3,sources:["webpack://./public/app.scss"],names:[],mappings:"AACA,EAAA,qBAAA,CACA,KACI,eAAA,CACA,QAAA,CACA,eAAA,CACA,wBAAA,CACA,UAAA,CAEJ,cACE,kCAAA,CAEF,wBACE,gCAAA,CACA,eAAA,CAEF,OACE,cAAA,CAMA,OACE,kBAAA,CACA,UAAA,CACA,kBAAA,CACA,+DAAA,CACE,6IAAA,CACJ,2BAAA,CACA,cAAA,CACA,gBAAA,CACA,kBAAA,CACA,WAAA,CAGF,aACE,oBAAA,CACA,kEAAA,CACA,wBAAA,CAGF,UACE,eAAA,CACA,kBAAA,CAGF,SACE,eAAA,CACA,gBAAA,CAIF,WACE,iBAAA,CACA,YAAA,CACA,UAAA,CACA,gBAAA,CACA,UAAA,CAKF,SACE,4DAAA,CACI,2BAAA,CACF,6BAAA,CACA,oBAAA,CAGJ,SACG,2DAAA,CACG,2BAAA,CACF,6BAAA,CACA,oBAAA,CAGJ,SACG,iEAAA,CACG,2BAAA,CACF,6BAAA,CACA,oBAAA,CAGJ,yBACE,OACE,WAAA,CAAA,CAGF,aAEE,aAAA,CACA,iBAAA,CAEF,IACE,UAAA,CACA,UAAA,CACA,YAAA,CACA,qEAAA,CAEF,sBACE,gBAAA,CACA,iBAAA,CAGJ,eACC,mBAAA,CACA,oBAAA,CACA,mBAAA,CACA,YAAA,CACA,2BAAA,CACA,4BAAA,CACA,6BAAA,CACA,yBAAA,CACA,qBAAA,CACA,uBAAA,CACA,8BAAA,CACA,oBAAA,CACA,sBAAA,CAED,aACC,iBAAA,CAEC,OACE,eAAA,CACA,UAAA,CACA,YAAA,CACA,6CAAA,CAGF,MACE,eAAA,CAEF,SACE,WAAA,CAEF,QACE,eAAA,CACA,UAAA,CACA,YAAA,CACA,iBAAA,CACA,6CAAA,CAEF,MACE,QAAA,CACA,kBAAA,CACA,WAAA,CAEF,OACE,gBAAA,CACA,UAAA,CACA,YAAA,CACA,YAAA,CACA,iBAAA,CACA,qCAAA,CAEF,6BAEE,QAAA,CACA,eAAA,CACA,cAAA,CAEF,SACE,gBAAA,CAEF,QACE,4BAAA,CACA,WAAA,CACA,iBAAA,CACA,cAAA,CACA,cAAA,CACA,gBAAA,CACA,gBAAA,CAEF,WACE,iBAAA,CACA,UAAA,CACA,YAAA,CACA,iBAAA,CACA,iBAAA,CACA,yBAAA,CAEF,kBACE,iBAAA,CACA,QAAA,CACA,iBAAA,CACA,WAAA,CACA,SAAA,CAEF,OACE,UAAA,CACA,UAAA,CACA,YAAA,CACA,kEAAA,CACA,qEAAA,CAEF,KACE,eAAA,CACA,kBAAA,CACA,gBAAA,CACA,YAAA,CACA,UAAA,CACA,qEAAA,CACA,eAAA,CAEF,MACE,gBAAA,CACA,iBAAA,CAEF,YACE,UAAA,CACA,iBAAA,CAEF,qBACE,eAAA,CAEF,KACE,WAAA,CACA,UAAA,CACA,kBAAA,CACA,4BAAA,CACA,cAAA,CAGF,QACE,iBAAA,CACA,YAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CAEF,QACE,WAAA,CAGF,MACE,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,mCAAA,CACA,gBAAA,CAGF,cACE,UAAA,CACA,iBAAA,CACA,UAAA,CACA,UAAA,CACA,eAAA,CACA,2BAAA,CAGF,oBACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,iBAAA,CACA,WAAA,CACA,gBAAA,CAGF,qBACE,YAAA,CACA,WAAA,CACA,iBAAA,CACA,WAAA,CACA,eAAA,CAGF,yBACE,WAAA,CACA,UAAA,CACA,gBAAA,CACA,iBAAA,CACA,qBAAA,CAGF,mBACE,iBAAA,CACA,QAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CAGF,qBACE,UAAA,CACA,UAAA,CACA,eAAA,CACA,uBAAA,CACA,cAAA,CAGF,2BACE,SAAA,CAGF,uBACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,eAAA,CACA,WAAA,CAGF,uBACE,cAAA,CACA,eAAA,CAGF,6BACE,cAAA,CACA,eAAA,CAGF,cACE,YAAA,CACA,kBAAA,CACA,eAAA,CAGF,gBACE,cAAA,CACA,YAAA,CACA,aAAA,CAGF,cACE,UAAA,CACA,YAAA,CACA,4BAAA,CACA,eAAA,CAGF,qBACE,kBAAA,CACA,YAAA,CACA,WAAA,CACA,UAAA,CACA,gBAAA,CACA,kBAAA,CACA,cAAA,CACA,uBAAA,CACA,cAAA,CAGF,qBACE,kBAAA,CAGF,mBACE,iBAAA,CAGF,0BACE,UAAA,CACA,UAAA,CACA,kBAAA,CACA,kBAAA,CAGF,wCACE,UAAA,CACA,aAAA,CACA,uBAAA,CAEF,oDACE,SAAA,CACA,aAAA,CAIJ,UACI,WAAA,CACA,cAAA,CAGF,UACE,eAAA,CACA,cAAA,CAEF,YACE,aAAA,CACA,eAAA,CACA,cAAA,CACA,mBAAA,CAEF,SACE,eAAA,CACA,eAAA,CACA,mBAAA,CACA,iBAAA,CACA,cAAA,CAEF,SACE,eAAA,CACA,cAAA,CAKF,MACE,kBAAA,CAEA,UAAA,CACA,iBAAA,CACA,iBAAA,CAEF,YACE,kBAAA,CAEF,aACE,kBAAA,CAEF,KACE,cAAA,CAEF,QACE,YAAA,CACA,kDAAA,CACA,qBAAA,CAEF,MACE,iCAAA,CAEF,eACE,eAAA,CACA,QAAA,CACA,eAAA,CACA,cAAA,CACA,UAAA,CAEF,QACE,cAAA,CACA,iBAAA,CACA,qBAAA,CAEF,SACE,kBAAA,CACA,QAAA,CACA,WAAA,CAEF,eAEE,cAAA,CAEF,QACE,6BAAA,CACA,YAAA,CACA,qBAAA,CACA,0BAAA,CAEF,QACE,UAAA,CACA,gBAAA,CACA,YAAA,CACA,uDAAA,CACA,0BAAA,CAEF,UACE,aAAA,CAEF,SACE,eAAA,CACA,cAAA,CACA,gBAAA,CACA,eAAA,CAEF,aACE,eAAA,CACA,gBAAA,CAEF,oBACE,QAAA,CACA,eAAA,CAEF,WACI,WAAA,CACA,gBAAA,CACA,YAAA,CACA,qCAAA,CACA,YAAA,CAEJ,cACI,WAAA,CACA,gBAAA,CACA,YAAA,CACA,6CAAA,CACA,YAAA,CAEJ,OACI,eAAA,CACA,wBAAA,CACA,iBAAA,CACA,sCAAA,CACA,WAAA,CACA,cAAA,CACA,gBAAA,CAEJ,QACI,UAAA,CAEJ,QACE,iBAAA,CACE,UAAA,CACA,WAAA,CACA,iBAAA,CAEJ,QACE,iBAAA,CACE,UAAA,CACA,WAAA,CACA,gBAAA,CAGJ,SAAA,cAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Oswald:wght@300&family=Raleway:wght@300;500;600&family=Vazirmatn:wght@300&display=swap');\n*{box-sizing: border-box;}\nbody {\n    font-size: 1.5em;\n    margin: 0;\n    min-height: 100%;\n    background-color: rgb(224, 238, 255);\n    color: #333;\n   \np,a {\n  font-family:  'Vazirmatn', sans-serif ;\n} \nh1,h2,h3{\n  font-family: 'Raleway', sans-serif;\n  font-weight: 700;\n} \na {\n  font-size: 20px;\n}\n\n    \n    \n  }\n  .cardz{\n    border-radius: 10px;\n    color: #fff;\n    background: rgb(35, 43, 58);\n    box-shadow: 0 6px 10px rgba(0, 0, 0, 0.309), 0 0 6px rgba(0, 0, 0, 0.321);\n      transition: .3s transform cubic-bezier(.155,1.105,.295,1.12),.3s box-shadow,.3s -webkit-transform cubic-bezier(.155,1.105,.295,1.12);\n  padding: 14px 30px 18px 16px;\n  cursor: pointer;\n  min-height: 500px;\n  border-radius: 10px;\n  margin: 0 3%;\n}\n\n.cardz:hover{\n  transform: scale(1.1);\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.382), 0 4px 8px rgba(0, 0, 0, 0.588);\n  background-color: #de6e62;\n}\n\n.cardz h3{\n  font-weight: 600;\n  padding: 2rem 0.5rem;\n  \n}\n.cardz p {\n  font-weight: 400;\n  padding-top: 2rem;\n \n}\n\n.cardz img{\n  position: absolute;\n  padding: 10px;\n  right: 15px;\n  max-height: 100px;\n  opacity: 0.5;\n  \n  \n}\n\n.cardz-1{\n  background-image:  url(https://s7.gifyu.com/images/wallet.png);\n      background-repeat: no-repeat;\n    background-position: top right;\n    background-size: 60px;\n}\n\n.cardz-2{\n   background-image: url(https://s7.gifyu.com/images/photo.png);\n      background-repeat: no-repeat;\n    background-position: top right;\n    background-size:60px;\n}\n\n.cardz-3{\n   background-image: url(https://s7.gifyu.com/images/photography.png);\n      background-repeat: no-repeat;\n    background-position: top right;\n    background-size: 60px;\n}\n\n@media(max-width: 990px){\n  .cardz{\n    margin: 20px;\n  }\n} \n  button,\n  input {\n    font-size: 1em;\n    border-radius: 9px;\n  }\n  nav {\n    grid-row: 1;\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n  }\n  .navbar-nav > .nav-item{\n    margin-left: 12px;\n    margin-right: 12px;\n}\n\n.content-block {\n\tdisplay: -webkit-box;\n\tdisplay: -webkit-flex;\n\tdisplay: -ms-flexbox;\n\tdisplay: flex;\n\t-webkit-box-orient: vertical;\n\t-webkit-box-direction: normal;\n\t-webkit-flex-direction: column;\n\t-ms-flex-direction: column;\n\tflex-direction: column;\n\t-webkit-box-align: start;\n\t-webkit-align-items: flex-start;\n\t-ms-flex-align: start;\n\talign-items: flex-start\n}\n.div-block-9 {\n\tposition: relative\n}\n  #first {\n    grid-column: 1/5;\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  }\n  \n  #logo {\n    grid-column: 1/3;\n  }\n  #logoimg {\n    width: 150px;\n  }\n  #search {\n    grid-column: 3/7;\n    width: 100%;\n    display: grid;\n    align-items: start;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  }\n  #seek {\n    border: 0;\n    background: lightgrey;\n    padding: 5px;\n  }\n  #links {\n    grid-column: 7/11;\n    width: 100%;\n    display: grid;\n    grid-gap: 1em;\n    align-items: start;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n  }\n  #links button,\n  #search button {\n    border: 0;\n    background: none;\n    font-size: 0.8em;\n  }\n  #seekbtn {\n    margin-left: -1em;\n  }\n  #delete {\n    background: tomato !important;\n    color: ivory;\n    border-radius: 50%;\n    font-size: 0.6em;\n    margin-top: 6px;\n    margin-left: -2em;\n    margin-right: 2em;\n  }\n  #defilinks {\n    grid-column: 11/13;\n    width: 100%;\n    display: grid;\n    align-items: start;\n    justify-items: end;\n    grid-template-columns: 1fr;\n  }\n  #defilinks button {\n    background: tomato;\n    border: 0;\n    border-radius: 9px;\n    color: ivory;\n    width: 50%;\n  }\n  #stage {\n    grid-row: 2;\n    width: 100%;\n    display: grid;\n    grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n  }\n  #box {\n    padding-top: 2em;\n    padding-bottom: 3em;\n    grid-column: 1/-1;\n    display: grid;\n    width: 100%;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n    background: white;\n  }\n  #show {\n    grid-column: 1/-1;\n    text-align: center;\n  }\n  #symbol img {\n    width: 60px;\n    margin-bottom:1em;\n  }\n  #box:nth-child(even) {\n    background: #eeeeee;\n  }\n  #bar {\n    width: 100px;\n    height: 5px;\n    background: #de6e62;\n    margin-left: calc(50% - 50px);\n    margin-top: 1em;\n    \n  }\n  section{\n    position: relative;  \n    height: 450px;\n    width: 90vw;\n    margin: 0 5%;\n    display: flex;\n    align-items: center;\n  }\n  .swiper{\n    width: 100vw;\n  }\n  \n  .card{\n    position: relative;\n    background: #fff;\n    border-radius: 20px;\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0);\n    min-height: 200px;\n  }\n  \n  .card::before{\n    content: \"\";\n    position: absolute;\n    height: 40%;\n    width: 100%;\n    background: #ffffff;\n    border-radius: 20px 20px 0 0;\n  }\n  \n  .card .card-content{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: relative;\n    z-index: 100;\n    min-height: 200px;\n  }\n  \n  section .card .image{\n    height: 140px;\n    width: 140px;\n    border-radius: 50%;\n    padding: 3px;\n    background: #ffffff;\n  }\n  \n  section .card .image img{\n    height: 100%;\n    width: 100%;\n    object-fit: cover;\n    border-radius: 50%;\n    border: 3px solid #fff;\n  }\n  \n  .card .media-icons{\n    position: absolute;\n    top: 10px;\n    right: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .card .media-icons i{\n    color: #fff;\n    opacity: 0.6;\n    margin-top: 10px;\n    transition: all 0.3s ease;\n    cursor: pointer;\n  }\n  \n  .card .media-icons i:hover{\n    opacity: 1;\n  }\n  \n  .card .name-profession{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: 10px;\n    color:green;\n  } \n  \n  .name-profession .name{\n    font-size: 20px;\n    font-weight: 600;\n  }\n  \n  .name-profession .profession{\n    font-size:15px;\n    font-weight: 500;\n  }\n  \n  .card .rating{\n    display: flex;\n    align-items: center;\n    margin-top: 18px;\n  }\n  \n  .card .rating i{\n    font-size: 18px;\n    margin: 0 2px;\n    color: #7d2ae8;\n  }\n  \n  .card .button{\n    width: 100%;\n    display: flex;\n    justify-content: space-around;\n    margin-top: 20px;\n  }\n  \n  .card .button button{\n    background: #7d2ae8;\n    outline: none;\n    border: none;\n    color: #fff;\n    padding: 8px 22px;\n    border-radius: 20px;\n    font-size: 14px;\n    transition: all 0.3s ease;\n    cursor: pointer;\n  }\n  \n  .button button:hover{\n    background: #6616d0;\n  }\n  \n  .swiper-pagination{\n    position: absolute;\n  }\n  \n  .swiper-pagination-bullet{\n    height: 7px;\n    width: 26px;\n    border-radius: 25px;\n    background: #7d2ae8;\n  }\n  \n  .swiper-button-next, .swiper-button-prev{\n    opacity: 0.7;\n    color: #7d2ae8;\n    transition: all 0.3s ease;\n  }\n  .swiper-button-next:hover, .swiper-button-prev:hover{\n    opacity: 1;\n    color: #7d2ae8;\n  }\n  \n\n#introimg {\n    width: 500px;\n    max-width: 90vw;\n   \n}\n  #introtxt {\n    grid-column: 2/6;\n    margin-top: 5em;\n  }\n  #headertext {\n    color: #de6e62;\n    font-weight: 100;\n    font-size: 0.8em;\n    letter-spacing: 0.2em;\n  }\n  #heading {\n    font-weight: 900;\n    font-size: 1.5em;\n    letter-spacing: 0.1em;\n    margin-bottom: 1em;\n    margin-top:1em;\n  }\n  #infotxt {\n    font-weight: 100;\n    font-size: 0.8em;\n  }\n\n\n\n  #icon {\n    background: #de6e62;\n    \n    width: 40px;\n    border-radius: 9px;\n    margin-bottom: 1em;\n  }\n  #icon:hover {\n    background: #243841;\n  }\n  #inlay:hover {\n    background: #de6e62;\n  }\n  #txt {\n    font-size: 0.6em;\n  }\n  #fourth {\n    display: grid;\n    grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n    justify-content: start;\n  }\n  .four {\n    grid-template-rows: 1fr !important;\n  }\n  #fourth button {\n    background: none;\n    border: 0;\n    text-align: left;\n    font-size: 0.6em;\n    color: grey;\n  }\n  #nlform {\n    margin-top: 1em;\n    margin-bottom: 1em;\n    justify-content: start;\n  }\n  #nlinput {\n    background: lightgrey;\n    border: 0;\n    padding: 5px;\n  }\n  #nltext,\n  #nlend {\n    font-size: 0.6em;\n  }\n  #nlsend {\n    background: #de6e62 !important;\n    padding: 11px;\n    color: white !important;\n    margin-top: -2px !important;\n  }\n  #footer {\n    width: 100%;\n    grid-column: 1/-1;\n    display: grid;\n    grid-template-columns: 150px 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n    background: white !important;\n  }\n  #logofoot {\n    grid-column: 1;\n  }\n  #license {\n    grid-column: 2/6;\n    font-size: 0.5em;\n    padding-left: 1em;\n    padding-top: 1em;\n  }\n  #sociallinks {\n    grid-column: 8/9;\n    text-align: right;\n  }\n  #sociallinks button {\n    border: 0;\n    background: none;\n  }\n  #caroussel{\n      padding: 2em;\n      grid-column:1/-1;\n      display:grid;\n      grid-template-columns: 1fr 1fr 1fr 1fr;\n      grid-gap: 1em;\n  }\n  #carousselbig{\n      padding: 2em;\n      grid-column:1/-1;\n      display:grid;\n      grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n      grid-gap: 1em;\n  }\n  .combi{\n      background:white;\n      border: 1px solid lightgrey;\n      border-radius: 9px;\n      box-shadow: 0 5px 10px rgba(0, 0, 0, 0.228);\n      padding: 1em;\n      font-size: 0.6em;\n      min-height: 200px;\n  }\n  #comimg{\n      width: 100%;\n  }\n  #comavt{\n    margin-top:-1.5em;\n      width: 32px;\n      height: 32px;\n      border-radius: 50%;\n  }\n  #comico{\n    margin-top:-1.5em;\n      width: 32px;\n      height: 32px;\n      border-radius: 0%;\n  }\n  \n  #combinf{font-size:0.3em;}\n\n  \n  "],sourceRoot:""}]);const o=s},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var o=0;o<this.length;o++){var f=this[o][0];null!=f&&(s[f]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&s[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),t.push(l))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([a]).join("\n")}return[t].join("\n")}},1227:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(2447)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},2447:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,a,s=null;function o(...e){if(!o.enabled)return;const r=o,i=Number(new Date),a=i-(n||i);r.diff=a,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";s++;const a=t.formatters[i];if("function"==typeof a){const t=e[s];n=a.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return o.namespace=e,o.useColors=t.useColors(),o.color=t.selectColor(e),o.extend=r,o.destroy=t.destroy,Object.defineProperty(o,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==t.namespaces&&(i=t.namespaces,a=t.enabled(e)),a),set:e=>{s=e}}),"function"==typeof t.init&&t.init(o),o}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},2114:e=>{"use strict";function t(e,t){for(const n in t)Object.defineProperty(e,n,{value:t[n],enumerable:!0,configurable:!0});return e}e.exports=function(e,n,r){if(!e||"string"==typeof e)throw new TypeError("Please pass an Error to err-code");r||(r={}),"object"==typeof n&&(r=n,n=""),n&&(r.code=n);try{return t(e,r)}catch(n){r.message=e.message,r.stack=e.stack;const i=function(){};return i.prototype=Object.create(Object.getPrototypeOf(e)),t(new i,r)}}},3715:(e,t,n)=>{var r=t;r.utils=n(6436),r.common=n(5772),r.sha=n(9041),r.ripemd=n(2949),r.hmac=n(2344),r.sha1=r.sha.sha1,r.sha256=r.sha.sha256,r.sha224=r.sha.sha224,r.sha384=r.sha.sha384,r.sha512=r.sha.sha512,r.ripemd160=r.ripemd.ripemd160},5772:(e,t,n)=>{"use strict";var r=n(6436),i=n(9746);function a(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=a,a.prototype.update=function(e,t){if(e=r.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var n=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-n,e.length),0===this.pending.length&&(this.pending=null),e=r.join32(e,0,e.length-n,this.endian);for(var i=0;i<e.length;i+=this._delta32)this._update(e,i,i+this._delta32)}return this},a.prototype.digest=function(e){return this.update(this._pad()),i(null===this.pending),this._digest(e)},a.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,n=t-(e+this.padLength)%t,r=new Array(n+this.padLength);r[0]=128;for(var i=1;i<n;i++)r[i]=0;if(e<<=3,"big"===this.endian){for(var a=8;a<this.padLength;a++)r[i++]=0;r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=e>>>24&255,r[i++]=e>>>16&255,r[i++]=e>>>8&255,r[i++]=255&e}else for(r[i++]=255&e,r[i++]=e>>>8&255,r[i++]=e>>>16&255,r[i++]=e>>>24&255,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=0,a=8;a<this.padLength;a++)r[i++]=0;return r}},2344:(e,t,n)=>{"use strict";var r=n(6436),i=n(9746);function a(e,t,n){if(!(this instanceof a))return new a(e,t,n);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(r.toArray(t,n))}e.exports=a,a.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),i(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},a.prototype.update=function(e,t){return this.inner.update(e,t),this},a.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},2949:(e,t,n)=>{"use strict";var r=n(6436),i=n(5772),a=r.rotl32,s=r.sum32,o=r.sum32_3,f=r.sum32_4,d=i.BlockHash;function l(){if(!(this instanceof l))return new l;d.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function c(e,t,n,r){return e<=15?t^n^r:e<=31?t&n|~t&r:e<=47?(t|~n)^r:e<=63?t&r|n&~r:t^(n|~r)}function u(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function p(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}r.inherits(l,d),t.ripemd160=l,l.blockSize=512,l.outSize=160,l.hmacStrength=192,l.padLength=64,l.prototype._update=function(e,t){for(var n=this.h[0],r=this.h[1],i=this.h[2],d=this.h[3],l=this.h[4],g=n,_=r,T=i,v=d,w=l,Y=0;Y<80;Y++){var A=s(a(f(n,c(Y,r,i,d),e[m[Y]+t],u(Y)),h[Y]),l);n=l,l=d,d=a(i,10),i=r,r=A,A=s(a(f(g,c(79-Y,_,T,v),e[y[Y]+t],p(Y)),b[Y]),w),g=w,w=v,v=a(T,10),T=_,_=A}A=o(this.h[1],i,v),this.h[1]=o(this.h[2],d,w),this.h[2]=o(this.h[3],l,g),this.h[3]=o(this.h[4],n,_),this.h[4]=o(this.h[0],r,T),this.h[0]=A},l.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"little"):r.split32(this.h,"little")};var m=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],y=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],h=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],b=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},9041:(e,t,n)=>{"use strict";t.sha1=n(4761),t.sha224=n(799),t.sha256=n(9344),t.sha384=n(772),t.sha512=n(5900)},4761:(e,t,n)=>{"use strict";var r=n(6436),i=n(5772),a=n(7038),s=r.rotl32,o=r.sum32,f=r.sum32_5,d=a.ft_1,l=i.BlockHash,c=[1518500249,1859775393,2400959708,3395469782];function u(){if(!(this instanceof u))return new u;l.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}r.inherits(u,l),e.exports=u,u.blockSize=512,u.outSize=160,u.hmacStrength=80,u.padLength=64,u.prototype._update=function(e,t){for(var n=this.W,r=0;r<16;r++)n[r]=e[t+r];for(;r<n.length;r++)n[r]=s(n[r-3]^n[r-8]^n[r-14]^n[r-16],1);var i=this.h[0],a=this.h[1],l=this.h[2],u=this.h[3],p=this.h[4];for(r=0;r<n.length;r++){var m=~~(r/20),y=f(s(i,5),d(m,a,l,u),p,n[r],c[m]);p=u,u=l,l=s(a,30),a=i,i=y}this.h[0]=o(this.h[0],i),this.h[1]=o(this.h[1],a),this.h[2]=o(this.h[2],l),this.h[3]=o(this.h[3],u),this.h[4]=o(this.h[4],p)},u.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},799:(e,t,n)=>{"use strict";var r=n(6436),i=n(9344);function a(){if(!(this instanceof a))return new a;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}r.inherits(a,i),e.exports=a,a.blockSize=512,a.outSize=224,a.hmacStrength=192,a.padLength=64,a.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h.slice(0,7),"big"):r.split32(this.h.slice(0,7),"big")}},9344:(e,t,n)=>{"use strict";var r=n(6436),i=n(5772),a=n(7038),s=n(9746),o=r.sum32,f=r.sum32_4,d=r.sum32_5,l=a.ch32,c=a.maj32,u=a.s0_256,p=a.s1_256,m=a.g0_256,y=a.g1_256,h=i.BlockHash,b=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function g(){if(!(this instanceof g))return new g;h.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=b,this.W=new Array(64)}r.inherits(g,h),e.exports=g,g.blockSize=512,g.outSize=256,g.hmacStrength=192,g.padLength=64,g.prototype._update=function(e,t){for(var n=this.W,r=0;r<16;r++)n[r]=e[t+r];for(;r<n.length;r++)n[r]=f(y(n[r-2]),n[r-7],m(n[r-15]),n[r-16]);var i=this.h[0],a=this.h[1],h=this.h[2],b=this.h[3],g=this.h[4],_=this.h[5],T=this.h[6],v=this.h[7];for(s(this.k.length===n.length),r=0;r<n.length;r++){var w=d(v,p(g),l(g,_,T),this.k[r],n[r]),Y=o(u(i),c(i,a,h));v=T,T=_,_=g,g=o(b,w),b=h,h=a,a=i,i=o(w,Y)}this.h[0]=o(this.h[0],i),this.h[1]=o(this.h[1],a),this.h[2]=o(this.h[2],h),this.h[3]=o(this.h[3],b),this.h[4]=o(this.h[4],g),this.h[5]=o(this.h[5],_),this.h[6]=o(this.h[6],T),this.h[7]=o(this.h[7],v)},g.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},772:(e,t,n)=>{"use strict";var r=n(6436),i=n(5900);function a(){if(!(this instanceof a))return new a;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}r.inherits(a,i),e.exports=a,a.blockSize=1024,a.outSize=384,a.hmacStrength=192,a.padLength=128,a.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h.slice(0,12),"big"):r.split32(this.h.slice(0,12),"big")}},5900:(e,t,n)=>{"use strict";var r=n(6436),i=n(5772),a=n(9746),s=r.rotr64_hi,o=r.rotr64_lo,f=r.shr64_hi,d=r.shr64_lo,l=r.sum64,c=r.sum64_hi,u=r.sum64_lo,p=r.sum64_4_hi,m=r.sum64_4_lo,y=r.sum64_5_hi,h=r.sum64_5_lo,b=i.BlockHash,g=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function _(){if(!(this instanceof _))return new _;b.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=g,this.W=new Array(160)}function T(e,t,n,r,i){var a=e&n^~e&i;return a<0&&(a+=4294967296),a}function v(e,t,n,r,i,a){var s=t&r^~t&a;return s<0&&(s+=4294967296),s}function w(e,t,n,r,i){var a=e&n^e&i^n&i;return a<0&&(a+=4294967296),a}function Y(e,t,n,r,i,a){var s=t&r^t&a^r&a;return s<0&&(s+=4294967296),s}function A(e,t){var n=s(e,t,28)^s(t,e,2)^s(t,e,7);return n<0&&(n+=4294967296),n}function I(e,t){var n=o(e,t,28)^o(t,e,2)^o(t,e,7);return n<0&&(n+=4294967296),n}function C(e,t){var n=o(e,t,14)^o(e,t,18)^o(t,e,9);return n<0&&(n+=4294967296),n}function E(e,t){var n=s(e,t,1)^s(e,t,8)^f(e,t,7);return n<0&&(n+=4294967296),n}function S(e,t){var n=o(e,t,1)^o(e,t,8)^d(e,t,7);return n<0&&(n+=4294967296),n}function N(e,t){var n=o(e,t,19)^o(t,e,29)^d(e,t,6);return n<0&&(n+=4294967296),n}r.inherits(_,b),e.exports=_,_.blockSize=1024,_.outSize=512,_.hmacStrength=192,_.padLength=128,_.prototype._prepareBlock=function(e,t){for(var n=this.W,r=0;r<32;r++)n[r]=e[t+r];for(;r<n.length;r+=2){var i=(h=n[r-4],b=n[r-3],g=void 0,(g=s(h,b,19)^s(b,h,29)^f(h,b,6))<0&&(g+=4294967296),g),a=N(n[r-4],n[r-3]),o=n[r-14],d=n[r-13],l=E(n[r-30],n[r-29]),c=S(n[r-30],n[r-29]),u=n[r-32],y=n[r-31];n[r]=p(i,a,o,d,l,c,u,y),n[r+1]=m(i,a,o,d,l,c,u,y)}var h,b,g},_.prototype._update=function(e,t){this._prepareBlock(e,t);var n,r,i,o=this.W,f=this.h[0],d=this.h[1],p=this.h[2],m=this.h[3],b=this.h[4],g=this.h[5],_=this.h[6],E=this.h[7],S=this.h[8],N=this.h[9],k=this.h[10],x=this.h[11],D=this.h[12],F=this.h[13],P=this.h[14],L=this.h[15];a(this.k.length===o.length);for(var R=0;R<o.length;R+=2){var B=P,M=L,V=(i=void 0,(i=s(n=S,r=N,14)^s(n,r,18)^s(r,n,9))<0&&(i+=4294967296),i),O=C(S,N),U=T(S,0,k,0,D),$=v(0,N,0,x,0,F),z=this.k[R],j=this.k[R+1],q=o[R],H=o[R+1],G=y(B,M,V,O,U,$,z,j,q,H),W=h(B,M,V,O,U,$,z,j,q,H);B=A(f,d),M=I(f,d),V=w(f,0,p,0,b),O=Y(0,d,0,m,0,g);var J=c(B,M,V,O),K=u(B,M,V,O);P=D,L=F,D=k,F=x,k=S,x=N,S=c(_,E,G,W),N=u(E,E,G,W),_=b,E=g,b=p,g=m,p=f,m=d,f=c(G,W,J,K),d=u(G,W,J,K)}l(this.h,0,f,d),l(this.h,2,p,m),l(this.h,4,b,g),l(this.h,6,_,E),l(this.h,8,S,N),l(this.h,10,k,x),l(this.h,12,D,F),l(this.h,14,P,L)},_.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},7038:(e,t,n)=>{"use strict";var r=n(6436).rotr32;function i(e,t,n){return e&t^~e&n}function a(e,t,n){return e&t^e&n^t&n}function s(e,t,n){return e^t^n}t.ft_1=function(e,t,n,r){return 0===e?i(t,n,r):1===e||3===e?s(t,n,r):2===e?a(t,n,r):void 0},t.ch32=i,t.maj32=a,t.p32=s,t.s0_256=function(e){return r(e,2)^r(e,13)^r(e,22)},t.s1_256=function(e){return r(e,6)^r(e,11)^r(e,25)},t.g0_256=function(e){return r(e,7)^r(e,18)^e>>>3},t.g1_256=function(e){return r(e,17)^r(e,19)^e>>>10}},6436:(e,t,n)=>{"use strict";var r=n(9746),i=n(5717);function a(e,t){return 55296==(64512&e.charCodeAt(t))&&!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1))}function s(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function o(e){return 1===e.length?"0"+e:e}function f(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=i,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var n=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),i=0;i<e.length;i+=2)n.push(parseInt(e[i]+e[i+1],16))}else for(var r=0,i=0;i<e.length;i++){var s=e.charCodeAt(i);s<128?n[r++]=s:s<2048?(n[r++]=s>>6|192,n[r++]=63&s|128):a(e,i)?(s=65536+((1023&s)<<10)+(1023&e.charCodeAt(++i)),n[r++]=s>>18|240,n[r++]=s>>12&63|128,n[r++]=s>>6&63|128,n[r++]=63&s|128):(n[r++]=s>>12|224,n[r++]=s>>6&63|128,n[r++]=63&s|128)}else for(i=0;i<e.length;i++)n[i]=0|e[i];return n},t.toHex=function(e){for(var t="",n=0;n<e.length;n++)t+=o(e[n].toString(16));return t},t.htonl=s,t.toHex32=function(e,t){for(var n="",r=0;r<e.length;r++){var i=e[r];"little"===t&&(i=s(i)),n+=f(i.toString(16))}return n},t.zero2=o,t.zero8=f,t.join32=function(e,t,n,i){var a=n-t;r(a%4==0);for(var s=new Array(a/4),o=0,f=t;o<s.length;o++,f+=4){var d;d="big"===i?e[f]<<24|e[f+1]<<16|e[f+2]<<8|e[f+3]:e[f+3]<<24|e[f+2]<<16|e[f+1]<<8|e[f],s[o]=d>>>0}return s},t.split32=function(e,t){for(var n=new Array(4*e.length),r=0,i=0;r<e.length;r++,i+=4){var a=e[r];"big"===t?(n[i]=a>>>24,n[i+1]=a>>>16&255,n[i+2]=a>>>8&255,n[i+3]=255&a):(n[i+3]=a>>>24,n[i+2]=a>>>16&255,n[i+1]=a>>>8&255,n[i]=255&a)}return n},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,n){return e+t+n>>>0},t.sum32_4=function(e,t,n,r){return e+t+n+r>>>0},t.sum32_5=function(e,t,n,r,i){return e+t+n+r+i>>>0},t.sum64=function(e,t,n,r){var i=e[t],a=r+e[t+1]>>>0,s=(a<r?1:0)+n+i;e[t]=s>>>0,e[t+1]=a},t.sum64_hi=function(e,t,n,r){return(t+r>>>0<t?1:0)+e+n>>>0},t.sum64_lo=function(e,t,n,r){return t+r>>>0},t.sum64_4_hi=function(e,t,n,r,i,a,s,o){var f=0,d=t;return f+=(d=d+r>>>0)<t?1:0,f+=(d=d+a>>>0)<a?1:0,e+n+i+s+(f+=(d=d+o>>>0)<o?1:0)>>>0},t.sum64_4_lo=function(e,t,n,r,i,a,s,o){return t+r+a+o>>>0},t.sum64_5_hi=function(e,t,n,r,i,a,s,o,f,d){var l=0,c=t;return l+=(c=c+r>>>0)<t?1:0,l+=(c=c+a>>>0)<a?1:0,l+=(c=c+o>>>0)<o?1:0,e+n+i+s+f+(l+=(c=c+d>>>0)<d?1:0)>>>0},t.sum64_5_lo=function(e,t,n,r,i,a,s,o,f,d){return t+r+a+o+d>>>0},t.rotr64_hi=function(e,t,n){return(t<<32-n|e>>>n)>>>0},t.rotr64_lo=function(e,t,n){return(e<<32-n|t>>>n)>>>0},t.shr64_hi=function(e,t,n){return e>>>n},t.shr64_lo=function(e,t,n){return(e<<32-n|t>>>n)>>>0}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},1476:e=>{"use strict";const t="[a-fA-F\\d:]",n=e=>e&&e.includeBoundaries?`(?:(?<=\\s|^)(?=${t})|(?<=${t})(?=\\s|$))`:"",r="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",i="[a-fA-F\\d]{1,4}",a=`\n(?:\n(?:${i}:){7}(?:${i}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${i}:){6}(?:${r}|:${i}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${i}:){5}(?::${r}|(?::${i}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${i}:){4}(?:(?::${i}){0,1}:${r}|(?::${i}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${i}:){3}(?:(?::${i}){0,2}:${r}|(?::${i}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${i}:){2}(?:(?::${i}){0,3}:${r}|(?::${i}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${i}:){1}(?:(?::${i}){0,4}:${r}|(?::${i}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${i}){0,5}:${r}|(?::${i}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),s=new RegExp(`(?:^${r}$)|(?:^${a}$)`),o=new RegExp(`^${r}$`),f=new RegExp(`^${a}$`),d=e=>e&&e.exact?s:new RegExp(`(?:${n(e)}${r}${n(e)})|(?:${n(e)}${a}${n(e)})`,"g");d.v4=e=>e&&e.exact?o:new RegExp(`${n(e)}${r}${n(e)}`,"g"),d.v6=e=>e&&e.exact?f:new RegExp(`${n(e)}${a}${n(e)}`,"g"),e.exports=d},4365:e=>{function t(e){const t=new globalThis.AbortController;function n(){t.abort();for(const t of e)t&&t.removeEventListener&&t.removeEventListener("abort",n)}for(const t of e)if(t&&t.addEventListener){if(t.aborted){n();break}t.addEventListener("abort",n)}return t.signal}e.exports=t,e.exports.anySignal=t},106:(e,t,n)=>{"use strict";const r=n(9134),i="object"==typeof window&&"object"==typeof document&&9===document.nodeType,a=r(),s=i&&!a,o=a&&!i,f=a&&i,d=void 0!==globalThis.process&&void 0!==globalThis.process.release&&"node"===globalThis.process.release.name&&!a,l="function"==typeof importScripts&&"undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope,c=void 0!==globalThis.process&&void 0!==globalThis.process.env&&"test"===globalThis.process.env.NODE_ENV,u="undefined"!=typeof navigator&&"ReactNative"===navigator.product;e.exports={isTest:c,isElectron:a,isElectronMain:o,isElectronRenderer:f,isNode:d,isBrowser:s,isWebWorker:l,isEnvWithDom:i,isReactNative:u}},1180:(e,t,n)=>{"use strict";const{isElectronMain:r}=n(106);e.exports=n(r?8795:700)},6953:(e,t,n)=>{"use strict";const r=n(7137);async function*i(e,t){const n=new r,i=await n.get(e,t);yield*i.iterator()}e.exports=(e,t)=>({path:decodeURIComponent(new URL(e).pathname.split("/").pop()||""),content:i(e,t)})},7137:(e,t,n)=>{"use strict";const{fetch:r,Request:i,Headers:a}=n(730),{TimeoutError:s,HTTPError:o}=n(4171),f=n(942).bind({ignoreUndefined:!0}),{URL:d,URLSearchParams:l}=n(7745),c=n(4365),u={throwHttpErrors:!0,credentials:"same-origin"};class p{constructor(e={}){this.opts=f(u,e)}async fetch(e,t={}){const n=f(this.opts,t),u=new a(n.headers);if("string"!=typeof e&&!(e instanceof d||e instanceof i))throw new TypeError("`resource` must be a string, URL, or Request");const p=new d(e.toString(),n.base),{searchParams:h,transformSearchParams:b,json:g}=n;h&&(p.search="function"==typeof b?b(new l(n.searchParams)):new l(n.searchParams)),g&&(n.body=JSON.stringify(n.json),u.set("content-type","application/json"));const _=new AbortController,T=c([_.signal,n.signal]),v=await((e,t,n)=>{if(void 0===t)return e;const r=Date.now(),i=()=>Date.now()-r>=t;return new Promise(((r,a)=>{const o=setTimeout((()=>{i()&&(a(new s),n.abort())}),t),f=e=>t=>{clearTimeout(o),i()?a(new s):e(t)};e.then(f(r),f(a))}))})(r(p.toString(),{...n,signal:T,timeout:void 0,headers:u}),n.timeout,_);if(!v.ok&&n.throwHttpErrors)throw n.handleError&&await n.handleError(v),new o(v);return v.iterator=function(){return y(v.body)},v.ndjson=async function*(){for await(const e of m(v.iterator()))t.transform?yield t.transform(e):yield e},v}post(e,t={}){return this.fetch(e,{...t,method:"POST"})}get(e,t={}){return this.fetch(e,{...t,method:"GET"})}put(e,t={}){return this.fetch(e,{...t,method:"PUT"})}delete(e,t={}){return this.fetch(e,{...t,method:"DELETE"})}options(e,t={}){return this.fetch(e,{...t,method:"OPTIONS"})}}const m=async function*(e){const t=new TextDecoder;let n="";for await(const r of e){n+=t.decode(r,{stream:!0});const e=n.split(/\r?\n/);for(let t=0;t<e.length-1;t++){const n=e[t].trim();n.length>0&&(yield JSON.parse(n))}n=e[e.length-1]}n+=t.decode(),n=n.trim(),0!==n.length&&(yield JSON.parse(n))},y=e=>{if(g(e)){const t=e[Symbol.asyncIterator]();return{[Symbol.asyncIterator]:()=>({next:t.next.bind(t),return:n=>(e.destroy(),"function"==typeof t.return?t.return():Promise.resolve({done:!0,value:n}))})}}if(b(e)){const t=e.getReader();return async function*(){try{for(;;){const{done:e,value:n}=await t.read();if(e)return;n&&(yield n)}}finally{t.releaseLock()}}()}if(h(e))return e;throw new TypeError("Body can't be converted to AsyncIterable")},h=e=>"object"==typeof e&&null!==e&&"function"==typeof e[Symbol.asyncIterator],b=e=>e&&"function"==typeof e.getReader,g=e=>Object.prototype.hasOwnProperty.call(e,"readable")&&Object.prototype.hasOwnProperty.call(e,"writable");p.HTTPError=o,p.TimeoutError=s,p.streamToAsyncIterator=y,p.post=(e,t)=>new p(t).post(e,t),p.get=(e,t)=>new p(t).get(e,t),p.put=(e,t)=>new p(t).put(e,t),p.delete=(e,t)=>new p(t).delete(e,t),p.options=(e,t)=>new p(t).options(e,t),e.exports=p},4171:(e,t)=>{"use strict";class n extends Error{constructor(e="Request timed out"){super(e),this.name="TimeoutError"}}t.TimeoutError=n;class r extends Error{constructor(e="The operation was aborted."){super(e),this.name="AbortError"}}t.AbortError=r;class i extends Error{constructor(e){super(e.statusText),this.name="HTTPError",this.response=e}}t.HTTPError=i},730:(e,t,n)=>{"use strict";const{TimeoutError:r,AbortError:i}=n(4171),{Response:a,Request:s,Headers:o,default:f}=n(1180),d=f,l=e=>{const t=new o;for(const n of e.trim().split(/[\r\n]+/)){const e=n.indexOf(": ");e>0&&t.set(n.slice(0,e),n.slice(e+1))}return t};class c extends a{constructor(e,t,n){super(t,n),Object.defineProperty(this,"url",{value:e})}}e.exports={fetch:(e,t={})=>null!=t.onUploadProgress?((e,t={})=>{const n=new XMLHttpRequest;n.open(t.method||"GET",e.toString(),!0);const{timeout:s,headers:f}=t;if(s&&s>0&&s<1/0&&(n.timeout=s),null!=t.overrideMimeType&&n.overrideMimeType(t.overrideMimeType),f)for(const[e,t]of new o(f))n.setRequestHeader(e,t);return t.signal&&(t.signal.onabort=()=>n.abort()),t.onUploadProgress&&(n.upload.onprogress=t.onUploadProgress),n.responseType="arraybuffer",new Promise(((e,s)=>{const o=t=>{switch(t.type){case"error":e(a.error());break;case"load":e(new c(n.responseURL,n.response,{status:n.status,statusText:n.statusText,headers:l(n.getAllResponseHeaders())}));break;case"timeout":s(new r);break;case"abort":s(new i)}};n.onerror=o,n.onload=o,n.ontimeout=o,n.onabort=o,n.send(t.body)}))})(e,t):d(e,t),Request:s,Headers:o}},9134:e=>{e.exports=function(){return"undefined"!=typeof window&&"object"==typeof window.process&&"renderer"===window.process.type||!("undefined"==typeof process||"object"!=typeof process.versions||!process.versions.electron)||"object"==typeof navigator&&"string"==typeof navigator.userAgent&&navigator.userAgent.indexOf("Electron")>=0}},5003:(e,t,n)=>{"use strict";const r=n(1476),i=e=>r({exact:!0}).test(e);i.v4=e=>r.v4({exact:!0}).test(e),i.v6=e=>r.v6({exact:!0}).test(e),i.version=e=>i(e)?i.v4(e)?4:6:void 0,e.exports=i},3310:e=>{"use strict";e.exports=e=>{if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}},7745:(e,t,n)=>{"use strict";const{URLWithLegacySupport:r,format:i,URLSearchParams:a,defaultBase:s}=n(2049),o=n(5939);e.exports={URL:r,URLSearchParams:a,format:i,relative:o,defaultBase:s}},5939:(e,t,n)=>{"use strict";const{URLWithLegacySupport:r,format:i}=n(2049);e.exports=(e,t={},n={},a)=>{let s,o=t.protocol?t.protocol.replace(":",""):"http";o=(n[o]||a||o)+":";try{s=new r(e)}catch(e){s={}}const f=Object.assign({},t,{protocol:o||s.protocol,host:t.host||s.host});return new r(e,i(f)).toString()}},2049:e=>{"use strict";const t="undefined"!=typeof navigator&&"ReactNative"===navigator.product,n=self.URL,r=t?"http://localhost":self.location?self.location.protocol+"//"+self.location.host:"";e.exports={URLWithLegacySupport:class{constructor(e="",t=r){this.super=new n(e,t),this.path=this.pathname+this.search,this.auth=this.username&&this.password?this.username+":"+this.password:null,this.query=this.search&&this.search.startsWith("?")?this.search.slice(1):null}get hash(){return this.super.hash}get host(){return this.super.host}get hostname(){return this.super.hostname}get href(){return this.super.href}get origin(){return this.super.origin}get password(){return this.super.password}get pathname(){return this.super.pathname}get port(){return this.super.port}get protocol(){return this.super.protocol}get search(){return this.super.search}get searchParams(){return this.super.searchParams}get username(){return this.super.username}set hash(e){this.super.hash=e}set host(e){this.super.host=e}set hostname(e){this.super.hostname=e}set href(e){this.super.href=e}set password(e){this.super.password=e}set pathname(e){this.super.pathname=e}set port(e){this.super.port=e}set protocol(e){this.super.protocol=e}set search(e){this.super.search=e}set username(e){this.super.username=e}static createObjectURL(e){return n.createObjectURL(e)}static revokeObjectURL(e){n.revokeObjectURL(e)}toJSON(){return this.super.toJSON()}toString(){return this.super.toString()}format(){return this.toString()}},URLSearchParams:self.URLSearchParams,defaultBase:r,format:function(e){if("string"==typeof e)return new n(e).toString();if(!(e instanceof n)){const t=e.username&&e.password?`${e.username}:${e.password}@`:"",n=e.auth?e.auth+"@":"",r=e.port?":"+e.port:"",i=e.protocol?e.protocol+"//":"",a=e.host||"",s=e.hostname||"",o=e.search||(e.query?"?"+e.query:""),f=e.hash||"",d=e.pathname||"";return`${i}${t||n}${a||s+r}${e.path||d+o}${f}`}}}},1303:e=>{"use strict";e.exports=async e=>{const t=[];for await(const n of e)t.push(n);return t}},2262:e=>{"use strict";e.exports=async e=>{for await(const t of e)return t}},3093:e=>{"use strict";e.exports=async e=>{let t;for await(const n of e)t=n;return t}},2121:e=>{"use strict";e.exports=async function*(e,t){for await(const n of e)yield t(n)}},8132:e=>{"use strict";e.exports=function(e){const[t,n]=e[Symbol.asyncIterator]?[e[Symbol.asyncIterator](),Symbol.asyncIterator]:[e[Symbol.iterator](),Symbol.iterator],r=[];return{peek:()=>t.next(),push:e=>{r.push(e)},next:()=>r.length?{done:!1,value:r.shift()}:t.next(),[n](){return this}}}},1094:(e,t,n)=>{var r;!function(){"use strict";var i="input is invalid type",a="object"==typeof window,s=a?window:{};s.JS_SHA3_NO_WINDOW&&(a=!1);var o=!a&&"object"==typeof self;!s.JS_SHA3_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?s=n.g:o&&(s=self);var f=!s.JS_SHA3_NO_COMMON_JS&&e.exports,d=n.amdO,l=!s.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,c="0123456789abcdef".split(""),u=[4,1024,262144,67108864],p=[0,8,16,24],m=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],y=[224,256,384,512],h=[128,256],b=["hex","buffer","arrayBuffer","array","digest"],g={128:168,256:136};!s.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),!l||!s.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return"object"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});for(var _=function(e,t,n){return function(r){return new P(e,t,e).update(r)[n]()}},T=function(e,t,n){return function(r,i){return new P(e,t,i).update(r)[n]()}},v=function(e,t,n){return function(t,r,i,a){return C["cshake"+e].update(t,r,i,a)[n]()}},w=function(e,t,n){return function(t,r,i,a){return C["kmac"+e].update(t,r,i,a)[n]()}},Y=function(e,t,n,r){for(var i=0;i<b.length;++i){var a=b[i];e[a]=t(n,r,a)}return e},A=function(e,t){var n=_(e,t,"hex");return n.create=function(){return new P(e,t,e)},n.update=function(e){return n.create().update(e)},Y(n,_,e,t)},I=[{name:"keccak",padding:[1,256,65536,16777216],bits:y,createMethod:A},{name:"sha3",padding:[6,1536,393216,100663296],bits:y,createMethod:A},{name:"shake",padding:[31,7936,2031616,520093696],bits:h,createMethod:function(e,t){var n=T(e,t,"hex");return n.create=function(n){return new P(e,t,n)},n.update=function(e,t){return n.create(t).update(e)},Y(n,T,e,t)}},{name:"cshake",padding:u,bits:h,createMethod:function(e,t){var n=g[e],r=v(e,0,"hex");return r.create=function(r,i,a){return i||a?new P(e,t,r).bytepad([i,a],n):C["shake"+e].create(r)},r.update=function(e,t,n,i){return r.create(t,n,i).update(e)},Y(r,v,e,t)}},{name:"kmac",padding:u,bits:h,createMethod:function(e,t){var n=g[e],r=w(e,0,"hex");return r.create=function(r,i,a){return new L(e,t,i).bytepad(["KMAC",a],n).bytepad([r],n)},r.update=function(e,t,n,i){return r.create(e,n,i).update(t)},Y(r,w,e,t)}}],C={},E=[],S=0;S<I.length;++S)for(var N=I[S],k=N.bits,x=0;x<k.length;++x){var D=N.name+"_"+k[x];if(E.push(D),C[D]=N.createMethod(k[x],N.padding),"sha3"!==N.name){var F=N.name+k[x];E.push(F),C[F]=C[D]}}function P(e,t,n){this.blocks=[],this.s=[],this.padding=t,this.outputBits=n,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(e<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=n>>5,this.extraBytes=(31&n)>>3;for(var r=0;r<50;++r)this.s[r]=0}function L(e,t,n){P.call(this,e,t,n)}P.prototype.update=function(e){if(this.finalized)throw new Error("finalize already called");var t,n=typeof e;if("string"!==n){if("object"!==n)throw new Error(i);if(null===e)throw new Error(i);if(l&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||l&&ArrayBuffer.isView(e)))throw new Error(i);t=!0}for(var r,a,s=this.blocks,o=this.byteCount,f=e.length,d=this.blockCount,c=0,u=this.s;c<f;){if(this.reset)for(this.reset=!1,s[0]=this.block,r=1;r<d+1;++r)s[r]=0;if(t)for(r=this.start;c<f&&r<o;++c)s[r>>2]|=e[c]<<p[3&r++];else for(r=this.start;c<f&&r<o;++c)(a=e.charCodeAt(c))<128?s[r>>2]|=a<<p[3&r++]:a<2048?(s[r>>2]|=(192|a>>6)<<p[3&r++],s[r>>2]|=(128|63&a)<<p[3&r++]):a<55296||a>=57344?(s[r>>2]|=(224|a>>12)<<p[3&r++],s[r>>2]|=(128|a>>6&63)<<p[3&r++],s[r>>2]|=(128|63&a)<<p[3&r++]):(a=65536+((1023&a)<<10|1023&e.charCodeAt(++c)),s[r>>2]|=(240|a>>18)<<p[3&r++],s[r>>2]|=(128|a>>12&63)<<p[3&r++],s[r>>2]|=(128|a>>6&63)<<p[3&r++],s[r>>2]|=(128|63&a)<<p[3&r++]);if(this.lastByteIndex=r,r>=o){for(this.start=r-o,this.block=s[d],r=0;r<d;++r)u[r]^=s[r];R(u),this.reset=!0}else this.start=r}return this},P.prototype.encode=function(e,t){var n=255&e,r=1,i=[n];for(n=255&(e>>=8);n>0;)i.unshift(n),n=255&(e>>=8),++r;return t?i.push(r):i.unshift(r),this.update(i),i.length},P.prototype.encodeString=function(e){var t,n=typeof e;if("string"!==n){if("object"!==n)throw new Error(i);if(null===e)throw new Error(i);if(l&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||l&&ArrayBuffer.isView(e)))throw new Error(i);t=!0}var r=0,a=e.length;if(t)r=a;else for(var s=0;s<e.length;++s){var o=e.charCodeAt(s);o<128?r+=1:o<2048?r+=2:o<55296||o>=57344?r+=3:(o=65536+((1023&o)<<10|1023&e.charCodeAt(++s)),r+=4)}return r+=this.encode(8*r),this.update(e),r},P.prototype.bytepad=function(e,t){for(var n=this.encode(t),r=0;r<e.length;++r)n+=this.encodeString(e[r]);var i=t-n%t,a=[];return a.length=i,this.update(a),this},P.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex,n=this.blockCount,r=this.s;if(e[t>>2]|=this.padding[3&t],this.lastByteIndex===this.byteCount)for(e[0]=e[n],t=1;t<n+1;++t)e[t]=0;for(e[n-1]|=2147483648,t=0;t<n;++t)r[t]^=e[t];R(r)}},P.prototype.toString=P.prototype.hex=function(){this.finalize();for(var e,t=this.blockCount,n=this.s,r=this.outputBlocks,i=this.extraBytes,a=0,s=0,o="";s<r;){for(a=0;a<t&&s<r;++a,++s)e=n[a],o+=c[e>>4&15]+c[15&e]+c[e>>12&15]+c[e>>8&15]+c[e>>20&15]+c[e>>16&15]+c[e>>28&15]+c[e>>24&15];s%t==0&&(R(n),a=0)}return i&&(e=n[a],o+=c[e>>4&15]+c[15&e],i>1&&(o+=c[e>>12&15]+c[e>>8&15]),i>2&&(o+=c[e>>20&15]+c[e>>16&15])),o},P.prototype.arrayBuffer=function(){this.finalize();var e,t=this.blockCount,n=this.s,r=this.outputBlocks,i=this.extraBytes,a=0,s=0,o=this.outputBits>>3;e=i?new ArrayBuffer(r+1<<2):new ArrayBuffer(o);for(var f=new Uint32Array(e);s<r;){for(a=0;a<t&&s<r;++a,++s)f[s]=n[a];s%t==0&&R(n)}return i&&(f[a]=n[a],e=e.slice(0,o)),e},P.prototype.buffer=P.prototype.arrayBuffer,P.prototype.digest=P.prototype.array=function(){this.finalize();for(var e,t,n=this.blockCount,r=this.s,i=this.outputBlocks,a=this.extraBytes,s=0,o=0,f=[];o<i;){for(s=0;s<n&&o<i;++s,++o)e=o<<2,t=r[s],f[e]=255&t,f[e+1]=t>>8&255,f[e+2]=t>>16&255,f[e+3]=t>>24&255;o%n==0&&R(r)}return a&&(e=o<<2,t=r[s],f[e]=255&t,a>1&&(f[e+1]=t>>8&255),a>2&&(f[e+2]=t>>16&255)),f},L.prototype=new P,L.prototype.finalize=function(){return this.encode(this.outputBits,!0),P.prototype.finalize.call(this)};var R=function(e){var t,n,r,i,a,s,o,f,d,l,c,u,p,y,h,b,g,_,T,v,w,Y,A,I,C,E,S,N,k,x,D,F,P,L,R,B,M,V,O,U,$,z,j,q,H,G,W,J,K,X,Z,Q,ee,te,ne,re,ie,ae,se,oe,fe,de,le;for(r=0;r<48;r+=2)i=e[0]^e[10]^e[20]^e[30]^e[40],a=e[1]^e[11]^e[21]^e[31]^e[41],s=e[2]^e[12]^e[22]^e[32]^e[42],o=e[3]^e[13]^e[23]^e[33]^e[43],f=e[4]^e[14]^e[24]^e[34]^e[44],d=e[5]^e[15]^e[25]^e[35]^e[45],l=e[6]^e[16]^e[26]^e[36]^e[46],c=e[7]^e[17]^e[27]^e[37]^e[47],t=(u=e[8]^e[18]^e[28]^e[38]^e[48])^(s<<1|o>>>31),n=(p=e[9]^e[19]^e[29]^e[39]^e[49])^(o<<1|s>>>31),e[0]^=t,e[1]^=n,e[10]^=t,e[11]^=n,e[20]^=t,e[21]^=n,e[30]^=t,e[31]^=n,e[40]^=t,e[41]^=n,t=i^(f<<1|d>>>31),n=a^(d<<1|f>>>31),e[2]^=t,e[3]^=n,e[12]^=t,e[13]^=n,e[22]^=t,e[23]^=n,e[32]^=t,e[33]^=n,e[42]^=t,e[43]^=n,t=s^(l<<1|c>>>31),n=o^(c<<1|l>>>31),e[4]^=t,e[5]^=n,e[14]^=t,e[15]^=n,e[24]^=t,e[25]^=n,e[34]^=t,e[35]^=n,e[44]^=t,e[45]^=n,t=f^(u<<1|p>>>31),n=d^(p<<1|u>>>31),e[6]^=t,e[7]^=n,e[16]^=t,e[17]^=n,e[26]^=t,e[27]^=n,e[36]^=t,e[37]^=n,e[46]^=t,e[47]^=n,t=l^(i<<1|a>>>31),n=c^(a<<1|i>>>31),e[8]^=t,e[9]^=n,e[18]^=t,e[19]^=n,e[28]^=t,e[29]^=n,e[38]^=t,e[39]^=n,e[48]^=t,e[49]^=n,y=e[0],h=e[1],G=e[11]<<4|e[10]>>>28,W=e[10]<<4|e[11]>>>28,N=e[20]<<3|e[21]>>>29,k=e[21]<<3|e[20]>>>29,oe=e[31]<<9|e[30]>>>23,fe=e[30]<<9|e[31]>>>23,z=e[40]<<18|e[41]>>>14,j=e[41]<<18|e[40]>>>14,L=e[2]<<1|e[3]>>>31,R=e[3]<<1|e[2]>>>31,b=e[13]<<12|e[12]>>>20,g=e[12]<<12|e[13]>>>20,J=e[22]<<10|e[23]>>>22,K=e[23]<<10|e[22]>>>22,x=e[33]<<13|e[32]>>>19,D=e[32]<<13|e[33]>>>19,de=e[42]<<2|e[43]>>>30,le=e[43]<<2|e[42]>>>30,te=e[5]<<30|e[4]>>>2,ne=e[4]<<30|e[5]>>>2,B=e[14]<<6|e[15]>>>26,M=e[15]<<6|e[14]>>>26,_=e[25]<<11|e[24]>>>21,T=e[24]<<11|e[25]>>>21,X=e[34]<<15|e[35]>>>17,Z=e[35]<<15|e[34]>>>17,F=e[45]<<29|e[44]>>>3,P=e[44]<<29|e[45]>>>3,I=e[6]<<28|e[7]>>>4,C=e[7]<<28|e[6]>>>4,re=e[17]<<23|e[16]>>>9,ie=e[16]<<23|e[17]>>>9,V=e[26]<<25|e[27]>>>7,O=e[27]<<25|e[26]>>>7,v=e[36]<<21|e[37]>>>11,w=e[37]<<21|e[36]>>>11,Q=e[47]<<24|e[46]>>>8,ee=e[46]<<24|e[47]>>>8,q=e[8]<<27|e[9]>>>5,H=e[9]<<27|e[8]>>>5,E=e[18]<<20|e[19]>>>12,S=e[19]<<20|e[18]>>>12,ae=e[29]<<7|e[28]>>>25,se=e[28]<<7|e[29]>>>25,U=e[38]<<8|e[39]>>>24,$=e[39]<<8|e[38]>>>24,Y=e[48]<<14|e[49]>>>18,A=e[49]<<14|e[48]>>>18,e[0]=y^~b&_,e[1]=h^~g&T,e[10]=I^~E&N,e[11]=C^~S&k,e[20]=L^~B&V,e[21]=R^~M&O,e[30]=q^~G&J,e[31]=H^~W&K,e[40]=te^~re&ae,e[41]=ne^~ie&se,e[2]=b^~_&v,e[3]=g^~T&w,e[12]=E^~N&x,e[13]=S^~k&D,e[22]=B^~V&U,e[23]=M^~O&$,e[32]=G^~J&X,e[33]=W^~K&Z,e[42]=re^~ae&oe,e[43]=ie^~se&fe,e[4]=_^~v&Y,e[5]=T^~w&A,e[14]=N^~x&F,e[15]=k^~D&P,e[24]=V^~U&z,e[25]=O^~$&j,e[34]=J^~X&Q,e[35]=K^~Z&ee,e[44]=ae^~oe&de,e[45]=se^~fe&le,e[6]=v^~Y&y,e[7]=w^~A&h,e[16]=x^~F&I,e[17]=D^~P&C,e[26]=U^~z&L,e[27]=$^~j&R,e[36]=X^~Q&q,e[37]=Z^~ee&H,e[46]=oe^~de&te,e[47]=fe^~le&ne,e[8]=Y^~y&b,e[9]=A^~h&g,e[18]=F^~I&E,e[19]=P^~C&S,e[28]=z^~L&B,e[29]=j^~R&M,e[38]=Q^~q&G,e[39]=ee^~H&W,e[48]=de^~te&re,e[49]=le^~ne&ie,e[0]^=m[r],e[1]^=m[r+1]};if(f)e.exports=C;else{for(S=0;S<E.length;++S)s[E[S]]=C[E[S]];d&&(void 0===(r=function(){return C}.call(t,n,t,e))||(e.exports=r))}}()},942:function(e,t,n){"use strict";const r=n(3310),{hasOwnProperty:i}=Object.prototype,{propertyIsEnumerable:a}=Object,s=(e,t,n)=>Object.defineProperty(e,t,{value:n,writable:!0,enumerable:!0,configurable:!0}),o=this,f={concatArrays:!1,ignoreUndefined:!1},d=e=>{const t=[];for(const n in e)i.call(e,n)&&t.push(n);if(Object.getOwnPropertySymbols){const n=Object.getOwnPropertySymbols(e);for(const r of n)a.call(e,r)&&t.push(r)}return t};function l(e){return Array.isArray(e)?function(e){const t=e.slice(0,0);return d(e).forEach((n=>{s(t,n,l(e[n]))})),t}(e):r(e)?function(e){const t=null===Object.getPrototypeOf(e)?Object.create(null):{};return d(e).forEach((n=>{s(t,n,l(e[n]))})),t}(e):e}const c=(e,t,n,r)=>(n.forEach((n=>{void 0===t[n]&&r.ignoreUndefined||(n in e&&e[n]!==Object.getPrototypeOf(e)?s(e,n,u(e[n],t[n],r)):s(e,n,l(t[n])))})),e);function u(e,t,n){return n.concatArrays&&Array.isArray(e)&&Array.isArray(t)?((e,t,n)=>{let r=e.slice(0,0),a=0;return[e,t].forEach((t=>{const o=[];for(let n=0;n<t.length;n++)i.call(t,n)&&(o.push(String(n)),s(r,a++,t===e?t[n]:l(t[n])));r=c(r,t,d(t).filter((e=>!o.includes(e))),n)})),r})(e,t,n):r(t)&&r(e)?c(e,t,d(t),n):l(t)}e.exports=function(...e){const t=u(l(f),this!==o&&this||{},f);let n={_:{}};for(const i of e)if(void 0!==i){if(!r(i))throw new TypeError("`"+i+"` is not an Option Object");n=u(n,{_:i},t)}return n._}},9746:e=>{function t(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=t,t.equal=function(e,t,n){if(e!=t)throw new Error(n||"Assertion failed: "+e+" != "+t)}},7824:e=>{var t=1e3,n=60*t,r=60*n,i=24*r;function a(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,s){s=s||{};var o,f,d=typeof e;if("string"===d&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var a=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(a){var s=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*r;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(e);if("number"===d&&isFinite(e))return s.long?(o=e,(f=Math.abs(o))>=i?a(o,f,i,"day"):f>=r?a(o,f,r,"hour"):f>=n?a(o,f,n,"minute"):f>=t?a(o,f,t,"second"):o+" ms"):function(e){var a=Math.abs(e);return a>=i?Math.round(e/i)+"d":a>=r?Math.round(e/r)+"h":a>=n?Math.round(e/n)+"m":a>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},5700:(e,t,n)=>{const{Multiaddr:r}=n(6584),i=(e,t)=>t,a={ip4:i,ip6:(e,t,n,r)=>1===r.length&&"ip6"===r[0].protocol?t:`[${t}]`,tcp:(e,t,n,r,i)=>r.some((e=>["http","https","ws","wss"].includes(e.protocol)))?`${e}:${t}`:((e,t,n,r)=>{if(r&&!1===r.assumeHttp)return`tcp://${e}:${t}`;let i="tcp",a=`:${t}`;return"tcp"===n[n.length-1].protocol&&(i="443"===t?"https":"http",a="443"===t||"80"===t?"":a),`${i}://${e}${a}`})(e,t,r,i),udp:(e,t)=>`udp://${e}:${t}`,dnsaddr:i,dns4:i,dns6:i,ipfs:(e,t)=>`${e}/ipfs/${t}`,p2p:(e,t)=>`${e}/p2p/${t}`,http:e=>`http://${e}`,https:e=>`https://${e}`,ws:e=>`ws://${e}`,wss:e=>`wss://${e}`,"p2p-websocket-star":e=>`${e}/p2p-websocket-star`,"p2p-webrtc-star":e=>`${e}/p2p-webrtc-star`,"p2p-webrtc-direct":e=>`${e}/p2p-webrtc-direct`};e.exports=(e,t)=>{const n=new r(e),i=e.toString().split("/").slice(1);return n.tuples().map((e=>({protocol:i.shift(),content:e[1]?i.shift():null}))).reduce(((e,n,r,i)=>{const s=a[n.protocol];if(!s)throw new Error(`Unsupported protocol ${n.protocol}`);return s(e,n.content,r,i,t)}),"")}},8190:(e,t,n)=>{"use strict";const r=n(9918),i=n(9768),a=n(4676),{concat:s}=n(605),{toString:o}=n(2263);function f(e){const t=[],n=e.split("/").slice(1);if(1===n.length&&""===n[0])return[];for(let r=0;r<n.length;r++){const a=n[r],s=i(a);if(0!==s.size){if(r++,r>=n.length)throw _("invalid address: "+e);if(s.path){t.push([a,g(n.slice(r).join("/"))]);break}t.push([a,n[r]])}else t.push([a])}return t}function d(e){const t=[];return e.map((e=>{const n=T(e);return t.push(n.name),e.length>1&&t.push(e[1]),null})),g(t.join("/"))}function l(e){return e.map((e=>{Array.isArray(e)||(e=[e]);const t=T(e);return e.length>1?[t.code,r.toBytes(t.code,e[1])]:[t.code]}))}function c(e){return e.map((e=>{const t=T(e);return e[1]?[t.code,r.toString(t.code,e[1])]:[t.code]}))}function u(e){return h(s(e.map((e=>{const t=T(e);let n=Uint8Array.from(a.encode(t.code));return e.length>1&&(n=s([n,e[1]])),n}))))}function p(e,t){return e.size>0?e.size/8:0===e.size?0:a.decode(t)+a.decode.bytes}function m(e){const t=[];let n=0;for(;n<e.length;){const r=a.decode(e,n),s=a.decode.bytes,f=p(i(r),e.slice(n+s));if(0===f){t.push([r]),n+=s;continue}const d=e.slice(n+s,n+s+f);if(n+=f+s,n>e.length)throw _("Invalid address Uint8Array: "+o(e,"base16"));t.push([r,d])}return t}function y(e){return u(l(f(e=g(e))))}function h(e){const t=b(e);if(t)throw t;return Uint8Array.from(e)}function b(e){try{m(e)}catch(e){return e}}function g(e){return"/"+e.trim().split("/").filter((e=>e)).join("/")}function _(e){return new Error("Error parsing address: "+e)}function T(e){return i(e[0])}e.exports={stringToStringTuples:f,stringTuplesToString:d,tuplesToStringTuples:c,stringTuplesToTuples:l,bytesToTuples:m,tuplesToBytes:u,bytesToString:function(e){return d(c(m(e)))},stringToBytes:y,fromString:function(e){return y(e)},fromBytes:h,validateBytes:b,isValidBytes:function(e){return void 0===b(e)},cleanPath:g,ParseError:_,protoFromTuple:T,sizeForAddr:p}},9918:(e,t,n)=>{"use strict";const r=n(3692),i=n(9768),{CID:a}=n(1362),{base32:s}=n(2817),{base58btc:o}=n(9086),f=n(8924),d=n(4676),{toString:l}=n(2263),{fromString:c}=n(2217),{concat:u}=n(605);function p(e,t){return t instanceof Uint8Array?p.toString(e,t):p.toBytes(e,t)}function m(e){const t=new ArrayBuffer(2);return new DataView(t).setUint16(0,e),new Uint8Array(t)}function y(e){return new DataView(e.buffer).getUint16(e.byteOffset)}e.exports=p,p.toString=function(e,t){switch(i(e).code){case 4:case 41:return function(e){const t=r.toString(e);if(!t||!r.isIP(t))throw new Error("invalid ip address");return t}(t);case 6:case 273:case 33:case 132:return y(t).toString();case 53:case 54:case 55:case 56:case 400:case 777:return function(e){const t=d.decode(e);if((e=e.slice(d.decode.bytes)).length!==t)throw new Error("inconsistent lengths");return l(e)}(t);case 421:return function(e){const t=d.decode(e),n=e.slice(d.decode.bytes);if(n.length!==t)throw new Error("inconsistent lengths");return l(n,"base58btc")}(t);case 444:case 445:return function(e){const t=e.slice(0,e.length-2),n=e.slice(e.length-2);return l(t,"base32")+":"+y(n)}(t);default:return l(t,"base16")}},p.toBytes=function(e,t){switch(i(e).code){case 4:case 41:return function(e){if(!r.isIP(e))throw new Error("invalid ip address");return r.toBytes(e)}(t);case 6:case 273:case 33:case 132:return m(parseInt(t,10));case 53:case 54:case 55:case 56:case 400:case 777:return function(e){const t=c(e),n=Uint8Array.from(d.encode(t.length));return u([n,t],n.length+t.length)}(t);case 421:return function(e){let t;t="Q"===e[0]||"1"===e[0]?f.decode(o.decode(`z${e}`)).bytes:a.parse(e).multihash.bytes;const n=Uint8Array.from(d.encode(t.length));return u([n,t],n.length+t.length)}(t);case 444:return function(e){const t=e.split(":");if(2!==t.length)throw new Error("failed to parse onion addr: "+t+" does not contain a port number");if(16!==t[0].length)throw new Error("failed to parse onion addr: "+t[0]+" not a Tor onion address.");const n=s.decode("b"+t[0]),r=parseInt(t[1],10);if(r<1||r>65536)throw new Error("Port number is not in range(1, 65536)");const i=m(r);return u([n,i],n.length+i.length)}(t);case 445:return function(e){const t=e.split(":");if(2!==t.length)throw new Error("failed to parse onion addr: "+t+" does not contain a port number");if(56!==t[0].length)throw new Error("failed to parse onion addr: "+t[0]+" not a Tor onion3 address.");const n=s.decode("b"+t[0]),r=parseInt(t[1],10);if(r<1||r>65536)throw new Error("Port number is not in range(1, 65536)");const i=m(r);return u([n,i],n.length+i.length)}(t);default:return c(t,"base16")}}},6584:(e,t,n)=>{"use strict";const r=n(8190),i=n(9768),a=n(4676),{CID:s}=n(1362),{base58btc:o}=n(9086),f=n(2114),d=Symbol.for("nodejs.util.inspect.custom"),{toString:l}=n(2263),{equals:c}=n(9588),u=new Map,p=Symbol.for("@multiformats/js-multiaddr/multiaddr");class m{constructor(e){if(null==e&&(e=""),Object.defineProperty(this,p,{value:!0}),e instanceof Uint8Array)this.bytes=r.fromBytes(e);else if("string"==typeof e){if(e.length>0&&"/"!==e.charAt(0))throw new Error(`multiaddr "${e}" must start with a "/"`);this.bytes=r.fromString(e)}else{if(!m.isMultiaddr(e))throw new Error("addr must be a string, Buffer, or another Multiaddr");this.bytes=r.fromBytes(e.bytes)}}toString(){return r.bytesToString(this.bytes)}toJSON(){return this.toString()}toOptions(){const e={},t=this.toString().split("/");return e.family="ip4"===t[1]?4:6,e.host=t[2],e.transport=t[3],e.port=parseInt(t[4]),e}protos(){return this.protoCodes().map((e=>Object.assign({},i(e))))}protoCodes(){const e=[],t=this.bytes;let n=0;for(;n<t.length;){const s=a.decode(t,n),o=a.decode.bytes,f=i(s);n+=r.sizeForAddr(f,t.slice(n+o))+o,e.push(s)}return e}protoNames(){return this.protos().map((e=>e.name))}tuples(){return r.bytesToTuples(this.bytes)}stringTuples(){const e=r.bytesToTuples(this.bytes);return r.tuplesToStringTuples(e)}encapsulate(e){return e=new m(e),new m(this.toString()+e.toString())}decapsulate(e){const t=e.toString(),n=this.toString(),r=n.lastIndexOf(t);if(r<0)throw new Error("Address "+this+" does not contain subaddress: "+e);return new m(n.slice(0,r))}decapsulateCode(e){const t=this.tuples();for(let n=t.length-1;n>=0;n--)if(t[n][0]===e)return new m(r.tuplesToBytes(t.slice(0,n)));return this}getPeerId(){try{const e=this.stringTuples().filter((e=>e[0]===i.names.ipfs.code)),t=e.pop();if(t&&t[1]){const e=t[1];return"Q"===e[0]||"1"===e[0]?l(o.decode(`z${e}`),"base58btc"):l(s.parse(e).multihash.bytes,"base58btc")}return null}catch(e){return null}}getPath(){let e=null;try{e=this.stringTuples().filter((e=>!!i(e[0]).path))[0][1],e||(e=null)}catch(t){e=null}return e}equals(e){return c(this.bytes,e.bytes)}async resolve(){const e=this.protos().find((e=>e.resolvable));if(!e)return[this];const t=u.get(e.name);if(!t)throw f(new Error(`no available resolver for ${e.name}`),"ERR_NO_AVAILABLE_RESOLVER");return(await t(this)).map((e=>new m(e)))}nodeAddress(){const e=this.protoCodes(),t=this.protoNames(),n=this.toString().split("/").slice(1);if(n.length<4)throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}".');if(4!==e[0]&&41!==e[0]&&54!==e[0]&&55!==e[0])throw new Error(`no protocol with name: "'${t[0]}'". Must have a valid family name: "{ip4, ip6, dns4, dns6}".`);if("tcp"!==n[2]&&"udp"!==n[2])throw new Error(`no protocol with name: "'${t[1]}'". Must have a valid transport protocol: "{tcp, udp}".`);return{family:41===e[0]||55===e[0]?6:4,address:n[1],port:parseInt(n[3])}}isThinWaistAddress(e){const t=(e||this).protos();return!(2!==t.length||4!==t[0].code&&41!==t[0].code||6!==t[1].code&&273!==t[1].code)}static fromNodeAddress(e,t){if(!e)throw new Error("requires node address object");if(!t)throw new Error("requires transport protocol");let n;switch(e.family){case 4:n="ip4";break;case 6:n="ip6";break;default:throw Error(`Invalid addr family. Got '${e.family}' instead of 4 or 6`)}return new m("/"+[n,e.address,t,e.port].join("/"))}static isName(e){return!!m.isMultiaddr(e)&&e.protos().some((e=>e.resolvable))}static isMultiaddr(e){return e instanceof m||Boolean(e&&e[p])}[d](){return"<Multiaddr "+l(this.bytes,"base16")+" - "+r.bytesToString(this.bytes)+">"}inspect(){return"<Multiaddr "+l(this.bytes,"base16")+" - "+r.bytesToString(this.bytes)+">"}}m.protocols=i,m.resolvers=u,e.exports={Multiaddr:m,multiaddr:function(e){return new m(e)},protocols:i,resolvers:u}},3692:(e,t,n)=>{"use strict";const r=n(5003),{toString:i}=n(2263),a=r,s=r.v4,o=r.v6,f=function(e,t,n){let r;if(n=~~n,s(e))r=t||new Uint8Array(n+4),e.split(/\./g).map((function(e){r[n++]=255&parseInt(e,10)}));else if(o(e)){const a=e.split(":",8);let o;for(o=0;o<a.length;o++){let e;s(a[o])&&(e=f(a[o]),a[o]=i(e.slice(0,2),"base16")),e&&++o<8&&a.splice(o,0,i(e.slice(2,4),"base16"))}if(""===a[0])for(;a.length<8;)a.unshift("0");else if(""===a[a.length-1])for(;a.length<8;)a.push("0");else if(a.length<8){for(o=0;o<a.length&&""!==a[o];o++);const e=[o,"1"];for(o=9-a.length;o>0;o--)e.push("0");a.splice.apply(a,e)}for(r=t||new Uint8Array(n+16),o=0;o<a.length;o++){const e=parseInt(a[o],16);r[n++]=e>>8&255,r[n++]=255&e}}if(!r)throw Error("Invalid ip address: "+e);return r};e.exports={isIP:a,isV4:s,isV6:o,toBytes:f,toString:function(e,t,n){t=~~t,n=n||e.length-t;const r=[];let i;const a=new DataView(e.buffer);if(4===n){for(let i=0;i<n;i++)r.push(e[t+i]);i=r.join(".")}else if(16===n){for(let e=0;e<n;e+=2)r.push(a.getUint16(t+e).toString(16));i=r.join(":"),i=i.replace(/(^|:)0(:0)*:0(:|$)/,"$1::$3"),i=i.replace(/:{3,4}/,"::")}return i}}},9768:e=>{"use strict";function t(e){if("number"==typeof e){if(t.codes[e])return t.codes[e];throw new Error("no protocol with code: "+e)}if("string"==typeof e){if(t.names[e])return t.names[e];throw new Error("no protocol with name: "+e)}throw new Error("invalid protocol id type: "+e)}const n=-1;function r(e,t,n,r,i){return{code:e,size:t,name:n,resolvable:Boolean(r),path:Boolean(i)}}t.lengthPrefixedVarSize=n,t.V=n,t.table=[[4,32,"ip4"],[6,16,"tcp"],[33,16,"dccp"],[41,128,"ip6"],[42,n,"ip6zone"],[53,n,"dns","resolvable"],[54,n,"dns4","resolvable"],[55,n,"dns6","resolvable"],[56,n,"dnsaddr","resolvable"],[132,16,"sctp"],[273,16,"udp"],[275,0,"p2p-webrtc-star"],[276,0,"p2p-webrtc-direct"],[277,0,"p2p-stardust"],[290,0,"p2p-circuit"],[301,0,"udt"],[302,0,"utp"],[400,n,"unix",!1,"path"],[421,n,"ipfs"],[421,n,"p2p"],[443,0,"https"],[444,96,"onion"],[445,296,"onion3"],[446,n,"garlic64"],[460,0,"quic"],[477,0,"ws"],[478,0,"wss"],[479,0,"p2p-websocket-star"],[480,0,"http"],[777,n,"memory"]],t.names={},t.codes={},t.table.map((e=>{const n=r.apply(null,e);return t.codes[n.code]=n,t.names[n.name]=n,null})),t.object=r,e.exports=t},5353:(e,t,n)=>{"use strict";let r;r=globalThis.AbortController&&globalThis.AbortSignal?globalThis:n(8599),e.exports.AbortSignal=r.AbortSignal,e.exports.AbortController=r.AbortController},700:(e,t,n)=>{"use strict";globalThis.fetch&&globalThis.Headers&&globalThis.Request&&globalThis.Response?e.exports={default:globalThis.fetch,Headers:globalThis.Headers,Request:globalThis.Request,Response:globalThis.Response}:e.exports={default:n(3300).default,Headers:n(3300).Headers,Request:n(3300).Request,Response:n(3300).Response}},3300:(e,t)=>{"use strict";var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response},2100:(e,t,n)=>{"use strict";e.exports=n(9482)},9482:(e,t,n)=>{"use strict";var r=t;function i(){r.util._configure(),r.Writer._configure(r.BufferWriter),r.Reader._configure(r.BufferReader)}r.build="minimal",r.Writer=n(1173),r.BufferWriter=n(3155),r.Reader=n(1408),r.BufferReader=n(593),r.util=n(9693),r.rpc=n(5994),r.roots=n(5054),r.configure=i,i()},1408:(e,t,n)=>{"use strict";e.exports=f;var r,i=n(9693),a=i.LongBits,s=i.utf8;function o(e,t){return RangeError("index out of range: "+e.pos+" + "+(t||1)+" > "+e.len)}function f(e){this.buf=e,this.pos=0,this.len=e.length}var d,l="undefined"!=typeof Uint8Array?function(e){if(e instanceof Uint8Array||Array.isArray(e))return new f(e);throw Error("illegal buffer")}:function(e){if(Array.isArray(e))return new f(e);throw Error("illegal buffer")},c=function(){return i.Buffer?function(e){return(f.create=function(e){return i.Buffer.isBuffer(e)?new r(e):l(e)})(e)}:l};function u(){var e=new a(0,0),t=0;if(!(this.len-this.pos>4)){for(;t<3;++t){if(this.pos>=this.len)throw o(this);if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e}return e.lo=(e.lo|(127&this.buf[this.pos++])<<7*t)>>>0,e}for(;t<4;++t)if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e;if(e.lo=(e.lo|(127&this.buf[this.pos])<<28)>>>0,e.hi=(e.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return e;if(t=0,this.len-this.pos>4){for(;t<5;++t)if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}else for(;t<5;++t){if(this.pos>=this.len)throw o(this);if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}throw Error("invalid varint encoding")}function p(e,t){return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0}function m(){if(this.pos+8>this.len)throw o(this,8);return new a(p(this.buf,this.pos+=4),p(this.buf,this.pos+=4))}f.create=c(),f.prototype._slice=i.Array.prototype.subarray||i.Array.prototype.slice,f.prototype.uint32=(d=4294967295,function(){if(d=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return d;if(d=(d|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return d;if(d=(d|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return d;if(d=(d|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return d;if(d=(d|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return d;if((this.pos+=5)>this.len)throw this.pos=this.len,o(this,10);return d}),f.prototype.int32=function(){return 0|this.uint32()},f.prototype.sint32=function(){var e=this.uint32();return e>>>1^-(1&e)|0},f.prototype.bool=function(){return 0!==this.uint32()},f.prototype.fixed32=function(){if(this.pos+4>this.len)throw o(this,4);return p(this.buf,this.pos+=4)},f.prototype.sfixed32=function(){if(this.pos+4>this.len)throw o(this,4);return 0|p(this.buf,this.pos+=4)},f.prototype.float=function(){if(this.pos+4>this.len)throw o(this,4);var e=i.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e},f.prototype.double=function(){if(this.pos+8>this.len)throw o(this,4);var e=i.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e},f.prototype.bytes=function(){var e=this.uint32(),t=this.pos,n=this.pos+e;if(n>this.len)throw o(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,n):t===n?new this.buf.constructor(0):this._slice.call(this.buf,t,n)},f.prototype.string=function(){var e=this.bytes();return s.read(e,0,e.length)},f.prototype.skip=function(e){if("number"==typeof e){if(this.pos+e>this.len)throw o(this,e);this.pos+=e}else do{if(this.pos>=this.len)throw o(this)}while(128&this.buf[this.pos++]);return this},f.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(e=7&this.uint32());)this.skipType(e);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+e+" at offset "+this.pos)}return this},f._configure=function(e){r=e,f.create=c(),r._configure();var t=i.Long?"toLong":"toNumber";i.merge(f.prototype,{int64:function(){return u.call(this)[t](!1)},uint64:function(){return u.call(this)[t](!0)},sint64:function(){return u.call(this).zzDecode()[t](!1)},fixed64:function(){return m.call(this)[t](!0)},sfixed64:function(){return m.call(this)[t](!1)}})}},593:(e,t,n)=>{"use strict";e.exports=a;var r=n(1408);(a.prototype=Object.create(r.prototype)).constructor=a;var i=n(9693);function a(e){r.call(this,e)}a._configure=function(){i.Buffer&&(a.prototype._slice=i.Buffer.prototype.slice)},a.prototype.string=function(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+e,this.len))},a._configure()},5054:e=>{"use strict";e.exports={}},5994:(e,t,n)=>{"use strict";t.Service=n(7948)},7948:(e,t,n)=>{"use strict";e.exports=i;var r=n(9693);function i(e,t,n){if("function"!=typeof e)throw TypeError("rpcImpl must be a function");r.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=Boolean(t),this.responseDelimited=Boolean(n)}(i.prototype=Object.create(r.EventEmitter.prototype)).constructor=i,i.prototype.rpcCall=function e(t,n,i,a,s){if(!a)throw TypeError("request must be specified");var o=this;if(!s)return r.asPromise(e,o,t,n,i,a);if(o.rpcImpl)try{return o.rpcImpl(t,n[o.requestDelimited?"encodeDelimited":"encode"](a).finish(),(function(e,n){if(e)return o.emit("error",e,t),s(e);if(null!==n){if(!(n instanceof i))try{n=i[o.responseDelimited?"decodeDelimited":"decode"](n)}catch(e){return o.emit("error",e,t),s(e)}return o.emit("data",n,t),s(null,n)}o.end(!0)}))}catch(e){return o.emit("error",e,t),void setTimeout((function(){s(e)}),0)}else setTimeout((function(){s(Error("already ended"))}),0)},i.prototype.end=function(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},1945:(e,t,n)=>{"use strict";e.exports=i;var r=n(9693);function i(e,t){this.lo=e>>>0,this.hi=t>>>0}var a=i.zero=new i(0,0);a.toNumber=function(){return 0},a.zzEncode=a.zzDecode=function(){return this},a.length=function(){return 1};var s=i.zeroHash="\0\0\0\0\0\0\0\0";i.fromNumber=function(e){if(0===e)return a;var t=e<0;t&&(e=-e);var n=e>>>0,r=(e-n)/4294967296>>>0;return t&&(r=~r>>>0,n=~n>>>0,++n>4294967295&&(n=0,++r>4294967295&&(r=0))),new i(n,r)},i.from=function(e){if("number"==typeof e)return i.fromNumber(e);if(r.isString(e)){if(!r.Long)return i.fromNumber(parseInt(e,10));e=r.Long.fromString(e)}return e.low||e.high?new i(e.low>>>0,e.high>>>0):a},i.prototype.toNumber=function(e){if(!e&&this.hi>>>31){var t=1+~this.lo>>>0,n=~this.hi>>>0;return t||(n=n+1>>>0),-(t+4294967296*n)}return this.lo+4294967296*this.hi},i.prototype.toLong=function(e){return r.Long?new r.Long(0|this.lo,0|this.hi,Boolean(e)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(e)}};var o=String.prototype.charCodeAt;i.fromHash=function(e){return e===s?a:new i((o.call(e,0)|o.call(e,1)<<8|o.call(e,2)<<16|o.call(e,3)<<24)>>>0,(o.call(e,4)|o.call(e,5)<<8|o.call(e,6)<<16|o.call(e,7)<<24)>>>0)},i.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},i.prototype.zzEncode=function(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this},i.prototype.zzDecode=function(){var e=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this},i.prototype.length=function(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return 0===n?0===t?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:n<128?9:10}},9693:function(e,t,n){"use strict";var r=t;function i(e,t,n){for(var r=Object.keys(t),i=0;i<r.length;++i)void 0!==e[r[i]]&&n||(e[r[i]]=t[r[i]]);return e}function a(e){function t(e,n){if(!(this instanceof t))return new t(e,n);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),n&&i(this,n)}return(t.prototype=Object.create(Error.prototype)).constructor=t,Object.defineProperty(t.prototype,"name",{get:function(){return e}}),t.prototype.toString=function(){return this.name+": "+this.message},t}r.asPromise=n(4537),r.base64=n(7419),r.EventEmitter=n(9211),r.float=n(945),r.inquire=n(7199),r.utf8=n(4997),r.pool=n(6662),r.LongBits=n(1945),r.isNode=Boolean(void 0!==n.g&&n.g&&n.g.process&&n.g.process.versions&&n.g.process.versions.node),r.global=r.isNode&&n.g||"undefined"!=typeof window&&window||"undefined"!=typeof self&&self||this,r.emptyArray=Object.freeze?Object.freeze([]):[],r.emptyObject=Object.freeze?Object.freeze({}):{},r.isInteger=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},r.isString=function(e){return"string"==typeof e||e instanceof String},r.isObject=function(e){return e&&"object"==typeof e},r.isset=r.isSet=function(e,t){var n=e[t];return!(null==n||!e.hasOwnProperty(t))&&("object"!=typeof n||(Array.isArray(n)?n.length:Object.keys(n).length)>0)},r.Buffer=function(){try{var e=r.inquire("buffer").Buffer;return e.prototype.utf8Write?e:null}catch(e){return null}}(),r._Buffer_from=null,r._Buffer_allocUnsafe=null,r.newBuffer=function(e){return"number"==typeof e?r.Buffer?r._Buffer_allocUnsafe(e):new r.Array(e):r.Buffer?r._Buffer_from(e):"undefined"==typeof Uint8Array?e:new Uint8Array(e)},r.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,r.Long=r.global.dcodeIO&&r.global.dcodeIO.Long||r.global.Long||r.inquire("long"),r.key2Re=/^true|false|0|1$/,r.key32Re=/^-?(?:0|[1-9][0-9]*)$/,r.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,r.longToHash=function(e){return e?r.LongBits.from(e).toHash():r.LongBits.zeroHash},r.longFromHash=function(e,t){var n=r.LongBits.fromHash(e);return r.Long?r.Long.fromBits(n.lo,n.hi,t):n.toNumber(Boolean(t))},r.merge=i,r.lcFirst=function(e){return e.charAt(0).toLowerCase()+e.substring(1)},r.newError=a,r.ProtocolError=a("ProtocolError"),r.oneOfGetter=function(e){for(var t={},n=0;n<e.length;++n)t[e[n]]=1;return function(){for(var e=Object.keys(this),n=e.length-1;n>-1;--n)if(1===t[e[n]]&&void 0!==this[e[n]]&&null!==this[e[n]])return e[n]}},r.oneOfSetter=function(e){return function(t){for(var n=0;n<e.length;++n)e[n]!==t&&delete this[e[n]]}},r.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},r._configure=function(){var e=r.Buffer;e?(r._Buffer_from=e.from!==Uint8Array.from&&e.from||function(t,n){return new e(t,n)},r._Buffer_allocUnsafe=e.allocUnsafe||function(t){return new e(t)}):r._Buffer_from=r._Buffer_allocUnsafe=null}},1173:(e,t,n)=>{"use strict";e.exports=c;var r,i=n(9693),a=i.LongBits,s=i.base64,o=i.utf8;function f(e,t,n){this.fn=e,this.len=t,this.next=void 0,this.val=n}function d(){}function l(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states}function c(){this.len=0,this.head=new f(d,0,0),this.tail=this.head,this.states=null}var u=function(){return i.Buffer?function(){return(c.create=function(){return new r})()}:function(){return new c}};function p(e,t,n){t[n]=255&e}function m(e,t){this.len=e,this.next=void 0,this.val=t}function y(e,t,n){for(;e.hi;)t[n++]=127&e.lo|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;e.lo>127;)t[n++]=127&e.lo|128,e.lo=e.lo>>>7;t[n++]=e.lo}function h(e,t,n){t[n]=255&e,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24}c.create=u(),c.alloc=function(e){return new i.Array(e)},i.Array!==Array&&(c.alloc=i.pool(c.alloc,i.Array.prototype.subarray)),c.prototype._push=function(e,t,n){return this.tail=this.tail.next=new f(e,t,n),this.len+=t,this},m.prototype=Object.create(f.prototype),m.prototype.fn=function(e,t,n){for(;e>127;)t[n++]=127&e|128,e>>>=7;t[n]=e},c.prototype.uint32=function(e){return this.len+=(this.tail=this.tail.next=new m((e>>>=0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this},c.prototype.int32=function(e){return e<0?this._push(y,10,a.fromNumber(e)):this.uint32(e)},c.prototype.sint32=function(e){return this.uint32((e<<1^e>>31)>>>0)},c.prototype.uint64=function(e){var t=a.from(e);return this._push(y,t.length(),t)},c.prototype.int64=c.prototype.uint64,c.prototype.sint64=function(e){var t=a.from(e).zzEncode();return this._push(y,t.length(),t)},c.prototype.bool=function(e){return this._push(p,1,e?1:0)},c.prototype.fixed32=function(e){return this._push(h,4,e>>>0)},c.prototype.sfixed32=c.prototype.fixed32,c.prototype.fixed64=function(e){var t=a.from(e);return this._push(h,4,t.lo)._push(h,4,t.hi)},c.prototype.sfixed64=c.prototype.fixed64,c.prototype.float=function(e){return this._push(i.float.writeFloatLE,4,e)},c.prototype.double=function(e){return this._push(i.float.writeDoubleLE,8,e)};var b=i.Array.prototype.set?function(e,t,n){t.set(e,n)}:function(e,t,n){for(var r=0;r<e.length;++r)t[n+r]=e[r]};c.prototype.bytes=function(e){var t=e.length>>>0;if(!t)return this._push(p,1,0);if(i.isString(e)){var n=c.alloc(t=s.length(e));s.decode(e,n,0),e=n}return this.uint32(t)._push(b,t,e)},c.prototype.string=function(e){var t=o.length(e);return t?this.uint32(t)._push(o.write,t,e):this._push(p,1,0)},c.prototype.fork=function(){return this.states=new l(this),this.head=this.tail=new f(d,0,0),this.len=0,this},c.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new f(d,0,0),this.len=0),this},c.prototype.ldelim=function(){var e=this.head,t=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=e.next,this.tail=t,this.len+=n),this},c.prototype.finish=function(){for(var e=this.head.next,t=this.constructor.alloc(this.len),n=0;e;)e.fn(e.val,t,n),n+=e.len,e=e.next;return t},c._configure=function(e){r=e,c.create=u(),r._configure()}},3155:(e,t,n)=>{"use strict";e.exports=a;var r=n(1173);(a.prototype=Object.create(r.prototype)).constructor=a;var i=n(9693);function a(){r.call(this)}function s(e,t,n){e.length<40?i.utf8.write(e,t,n):t.utf8Write?t.utf8Write(e,n):t.write(e,n)}a._configure=function(){a.alloc=i._Buffer_allocUnsafe,a.writeBytesBuffer=i.Buffer&&i.Buffer.prototype instanceof Uint8Array&&"set"===i.Buffer.prototype.set.name?function(e,t,n){t.set(e,n)}:function(e,t,n){if(e.copy)e.copy(t,n,0,e.length);else for(var r=0;r<e.length;)t[n++]=e[r++]}},a.prototype.bytes=function(e){i.isString(e)&&(e=i._Buffer_from(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this._push(a.writeBytesBuffer,t,e),this},a.prototype.string=function(e){var t=i.Buffer.byteLength(e);return this.uint32(t),t&&this._push(s,t,e),this},a._configure()},590:e=>{e.exports=e=>{if(e[Symbol.asyncIterator])return e;if(e.getReader)return async function*(){const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)return;yield n}}finally{t.releaseLock()}}();throw new Error("unknown stream")}},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},s=[],o=0;o<e.length;o++){var f=e[o],d=r.base?f[0]+r.base:f[0],l=a[d]||0,c="".concat(d," ").concat(l);a[d]=l+1;var u=n(c),p={css:f[1],media:f[2],sourceMap:f[3],supports:f[4],layer:f[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=i(p,r);r.byIndex=o,t.splice(o,0,{identifier:c,updater:m,references:1})}s.push(c)}return s}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var o=n(a[s]);t[o].references--}for(var f=r(e,i),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=f}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},6988:e=>{e.exports=function e(t,n){var r,i=0,a=0,s=n=n||0,o=t.length;do{if(s>=o||a>49)throw e.bytes=0,new RangeError("Could not decode varint");r=t[s++],i+=a<28?(127&r)<<a:(127&r)*Math.pow(2,a),a+=7}while(r>=128);return e.bytes=s-n,i}},1312:e=>{e.exports=function e(n,r,i){if(Number.MAX_SAFE_INTEGER&&n>Number.MAX_SAFE_INTEGER)throw e.bytes=0,new RangeError("Could not encode varint");r=r||[];for(var a=i=i||0;n>=t;)r[i++]=255&n|128,n/=128;for(;-128&n;)r[i++]=255&n|128,n>>>=7;return r[i]=0|n,e.bytes=i-a+1,r};var t=Math.pow(2,31)},4676:(e,t,n)=>{e.exports={encode:n(1312),decode:n(6988),encodingLength:n(82)}},82:e=>{var t=Math.pow(2,7),n=Math.pow(2,14),r=Math.pow(2,21),i=Math.pow(2,28),a=Math.pow(2,35),s=Math.pow(2,42),o=Math.pow(2,49),f=Math.pow(2,56),d=Math.pow(2,63);e.exports=function(e){return e<t?1:e<n?2:e<r?3:e<i?4:e<a?5:e<s?6:e<o?7:e<f?8:e<d?9:10}},6601:()=>{},2611:()=>{},8795:()=>{},5670:(e,t,n)=>{"use strict";n.r(t),n.d(t,{CID:()=>u.CID,create:()=>Pa,globSource:()=>La,multiaddr:()=>Et.Multiaddr,urlSource:()=>Fa});var r={};n.r(r),n.d(r,{code:()=>R,createLink:()=>P,createNode:()=>F,decode:()=>M,encode:()=>B,name:()=>L,prepare:()=>x,validate:()=>D});var i={};n.r(i),n.d(i,{code:()=>dt,decode:()=>ct,encode:()=>lt,name:()=>ft});var a={};n.r(a),n.d(a,{code:()=>wt,decode:()=>At,encode:()=>Yt,name:()=>vt});const s=e=>Promise.reject(new Error(`No base found for "${e}"`));class o{constructor(e){this._basesByName={},this._basesByPrefix={},this._loadBase=e.loadBase||s;for(const t of e.bases)this.addBase(t)}addBase(e){if(this._basesByName[e.name]||this._basesByPrefix[e.prefix])throw new Error(`Codec already exists for codec "${e.name}"`);this._basesByName[e.name]=e,this._basesByPrefix[e.prefix]=e}removeBase(e){delete this._basesByName[e.name],delete this._basesByPrefix[e.prefix]}async getBase(e){if(this._basesByName[e])return this._basesByName[e];if(this._basesByPrefix[e])return this._basesByPrefix[e];const t=await this._loadBase(e);return null==this._basesByName[t.name]&&null==this._basesByPrefix[t.prefix]&&this.addBase(t),t}listBases(){return Object.values(this._basesByName)}}const f=e=>Promise.reject(new Error(`No codec found for "${e}"`));class d{constructor(e){this._codecsByName={},this._codecsByCode={},this._loadCodec=e.loadCodec||f;for(const t of e.codecs)this.addCodec(t)}addCodec(e){if(this._codecsByName[e.name]||this._codecsByCode[e.code])throw new Error(`Resolver already exists for codec "${e.name}"`);this._codecsByName[e.name]=e,this._codecsByCode[e.code]=e}removeCodec(e){delete this._codecsByName[e.name],delete this._codecsByCode[e.code]}async getCodec(e){const t="string"==typeof e?this._codecsByName:this._codecsByCode;if(t[e])return t[e];const n=await this._loadCodec(e);return null==t[e]&&this.addCodec(n),n}listCodecs(){return Object.values(this._codecsByName)}}const l=e=>Promise.reject(new Error(`No hasher found for "${e}"`));class c{constructor(e){this._hashersByName={},this._hashersByCode={},this._loadHasher=e.loadHasher||l;for(const t of e.hashers)this.addHasher(t)}addHasher(e){if(this._hashersByName[e.name]||this._hashersByCode[e.code])throw new Error(`Resolver already exists for codec "${e.name}"`);this._hashersByName[e.name]=e,this._hashersByCode[e.code]=e}removeHasher(e){delete this._hashersByName[e.name],delete this._hashersByCode[e.code]}async getHasher(e){const t="string"==typeof e?this._hashersByName:this._hashersByCode;if(t[e])return t[e];const n=await this._loadHasher(e);return null==t[e]&&this.addHasher(n),n}listHashers(){return Object.values(this._hashersByName)}}var u=n(1362);const p=new TextDecoder;function m(e,t){let n=0;for(let r=0;;r+=7){if(r>=64)throw new Error("protobuf: varint overflow");if(t>=e.length)throw new Error("protobuf: unexpected end of data");const i=e[t++];if(n+=r<28?(127&i)<<r:(127&i)*2**r,i<128)break}return[n,t]}function y(e,t){let n;[n,t]=m(e,t);const r=t+n;if(n<0||r<0)throw new Error("protobuf: invalid length");if(r>e.length)throw new Error("protobuf: unexpected end of data");return[e.subarray(t,r),r]}function h(e,t){let n;return[n,t]=m(e,t),[7&n,n>>3,t]}function b(e){const t={},n=e.length;let r=0;for(;r<n;){let n,i;if([n,i,r]=h(e,r),1===i){if(t.Hash)throw new Error("protobuf: (PBLink) duplicate Hash section");if(2!==n)throw new Error(`protobuf: (PBLink) wrong wireType (${n}) for Hash`);if(void 0!==t.Name)throw new Error("protobuf: (PBLink) invalid order, found Name before Hash");if(void 0!==t.Tsize)throw new Error("protobuf: (PBLink) invalid order, found Tsize before Hash");[t.Hash,r]=y(e,r)}else if(2===i){if(void 0!==t.Name)throw new Error("protobuf: (PBLink) duplicate Name section");if(2!==n)throw new Error(`protobuf: (PBLink) wrong wireType (${n}) for Name`);if(void 0!==t.Tsize)throw new Error("protobuf: (PBLink) invalid order, found Tsize before Name");let i;[i,r]=y(e,r),t.Name=p.decode(i)}else{if(3!==i)throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${i}`);if(void 0!==t.Tsize)throw new Error("protobuf: (PBLink) duplicate Tsize section");if(0!==n)throw new Error(`protobuf: (PBLink) wrong wireType (${n}) for Tsize`);[t.Tsize,r]=m(e,r)}}if(r>n)throw new Error("protobuf: (PBLink) unexpected end of data");return t}const g=new TextEncoder,_=2**32;function T(e,t){let n=t.length;if("number"==typeof e.Tsize){if(e.Tsize<0)throw new Error("Tsize cannot be negative");if(!Number.isSafeInteger(e.Tsize))throw new Error("Tsize too large for encoding");n=w(t,n,e.Tsize)-1,t[n]=24}if("string"==typeof e.Name){const r=g.encode(e.Name);n-=r.length,t.set(r,n),n=w(t,n,r.length)-1,t[n]=18}return e.Hash&&(n-=e.Hash.length,t.set(e.Hash,n),n=w(t,n,e.Hash.length)-1,t[n]=10),t.length-n}function v(e){let t=0;if(e.Hash){const n=e.Hash.length;t+=1+n+Y(n)}if("string"==typeof e.Name){const n=g.encode(e.Name).length;t+=1+n+Y(n)}return"number"==typeof e.Tsize&&(t+=1+Y(e.Tsize)),t}function w(e,t,n){const r=t-=Y(n);for(;n>=2147483648;)e[t++]=127&n|128,n/=128;for(;n>=128;)e[t++]=127&n|128,n>>>=7;return e[t]=n,r}function Y(e){return e%2==0&&e++,Math.floor((function(e){let t=0;return e>=_&&(e=Math.floor(e/_),t=32),e>=65536&&(e>>>=16,t+=16),e>=256&&(e>>>=8,t+=8),t+A[e]}(e)+6)/7)}const A=[0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],I=["Data","Links"],C=["Hash","Name","Tsize"],E=new TextEncoder;function S(e,t){if(e===t)return 0;const n=e.Name?E.encode(e.Name):[],r=t.Name?E.encode(t.Name):[];let i=n.length,a=r.length;for(let e=0,t=Math.min(i,a);e<t;++e)if(n[e]!==r[e]){i=n[e],a=r[e];break}return i<a?-1:a<i?1:0}function N(e,t){return!Object.keys(e).some((e=>!t.includes(e)))}function k(e){if("object"==typeof e.asCID){const t=u.CID.asCID(e);if(!t)throw new TypeError("Invalid DAG-PB form");return{Hash:t}}if("object"!=typeof e||Array.isArray(e))throw new TypeError("Invalid DAG-PB form");const t={};if(e.Hash){let n=u.CID.asCID(e.Hash);try{n||("string"==typeof e.Hash?n=u.CID.parse(e.Hash):e.Hash instanceof Uint8Array&&(n=u.CID.decode(e.Hash)))}catch(e){throw new TypeError(`Invalid DAG-PB form: ${e.message}`)}n&&(t.Hash=n)}if(!t.Hash)throw new TypeError("Invalid DAG-PB form");return"string"==typeof e.Name&&(t.Name=e.Name),"number"==typeof e.Tsize&&(t.Tsize=e.Tsize),t}function x(e){if((e instanceof Uint8Array||"string"==typeof e)&&(e={Data:e}),"object"!=typeof e||Array.isArray(e))throw new TypeError("Invalid DAG-PB form");const t={};if(void 0!==e.Data)if("string"==typeof e.Data)t.Data=E.encode(e.Data);else{if(!(e.Data instanceof Uint8Array))throw new TypeError("Invalid DAG-PB form");t.Data=e.Data}if(void 0!==e.Links){if(!Array.isArray(e.Links))throw new TypeError("Invalid DAG-PB form");t.Links=e.Links.map(k),t.Links.sort(S)}else t.Links=[];return t}function D(e){if(!e||"object"!=typeof e||Array.isArray(e))throw new TypeError("Invalid DAG-PB form");if(!N(e,I))throw new TypeError("Invalid DAG-PB form (extraneous properties)");if(void 0!==e.Data&&!(e.Data instanceof Uint8Array))throw new TypeError("Invalid DAG-PB form (Data must be a Uint8Array)");if(!Array.isArray(e.Links))throw new TypeError("Invalid DAG-PB form (Links must be an array)");for(let t=0;t<e.Links.length;t++){const n=e.Links[t];if(!n||"object"!=typeof n||Array.isArray(n))throw new TypeError("Invalid DAG-PB form (bad link object)");if(!N(n,C))throw new TypeError("Invalid DAG-PB form (extraneous properties on link object)");if(!n.Hash)throw new TypeError("Invalid DAG-PB form (link must have a Hash)");if(n.Hash.asCID!==n.Hash)throw new TypeError("Invalid DAG-PB form (link Hash must be a CID)");if(void 0!==n.Name&&"string"!=typeof n.Name)throw new TypeError("Invalid DAG-PB form (link Name must be a string)");if(void 0!==n.Tsize&&("number"!=typeof n.Tsize||n.Tsize%1!=0))throw new TypeError("Invalid DAG-PB form (link Tsize must be an integer)");if(t>0&&-1===S(n,e.Links[t-1]))throw new TypeError("Invalid DAG-PB form (links must be sorted by Name bytes)")}}function F(e,t=[]){return x({Data:e,Links:t})}function P(e,t,n){return k({Hash:n,Name:e,Tsize:t})}const L="dag-pb",R=112;function B(e){D(e);const t={};return e.Links&&(t.Links=e.Links.map((e=>{const t={};return e.Hash&&(t.Hash=e.Hash.bytes),void 0!==e.Name&&(t.Name=e.Name),void 0!==e.Tsize&&(t.Tsize=e.Tsize),t}))),e.Data&&(t.Data=e.Data),function(e){const t=function(e){let t=0;if(e.Data){const n=e.Data.length;t+=1+n+Y(n)}if(e.Links)for(const n of e.Links){const e=v(n);t+=1+e+Y(e)}return t}(e),n=new Uint8Array(t);let r=t;if(e.Data&&(r-=e.Data.length,n.set(e.Data,r),r=w(n,r,e.Data.length)-1,n[r]=10),e.Links)for(let t=e.Links.length-1;t>=0;t--){const i=T(e.Links[t],n.subarray(0,r));r-=i,r=w(n,r,i)-1,n[r]=18}return n}(t)}function M(e){const t=function(e){const t=e.length;let n,r,i=0,a=!1;for(;i<t;){let t,s;if([t,s,i]=h(e,i),2!==t)throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${t}`);if(1===s){if(r)throw new Error("protobuf: (PBNode) duplicate Data section");[r,i]=y(e,i),n&&(a=!0)}else{if(2!==s)throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${s}`);{if(a)throw new Error("protobuf: (PBNode) duplicate Links section");let t;n||(n=[]),[t,i]=y(e,i),n.push(b(t))}}}if(i>t)throw new Error("protobuf: (PBNode) unexpected end of data");const s={};return r&&(s.Data=r),s.Links=n||[],s}(e),n={};return t.Data&&(n.Data=t.Data),t.Links&&(n.Links=t.Links.map((e=>{const t={};try{t.Hash=u.CID.decode(e.Hash)}catch(e){}if(!t.Hash)throw new Error("Invalid Hash field found in link, expected CID");return void 0!==e.Name&&(t.Name=e.Name),void 0!==e.Tsize&&(t.Tsize=e.Tsize),t}))),n}const V=["string","number","bigint","symbol"],O=["Function","Generator","AsyncGenerator","GeneratorFunction","AsyncGeneratorFunction","AsyncFunction","Observable","Array","Buffer","Object","RegExp","Date","Error","Map","Set","WeakMap","WeakSet","ArrayBuffer","SharedArrayBuffer","DataView","Promise","URL","HTMLElement","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array"];class U{constructor(e,t,n){this.major=e,this.majorEncoded=e<<5,this.name=t,this.terminal=n}toString(){return`Type[${this.major}].${this.name}`}compare(e){return this.major<e.major?-1:this.major>e.major?1:0}}U.uint=new U(0,"uint",!0),U.negint=new U(1,"negint",!0),U.bytes=new U(2,"bytes",!0),U.string=new U(3,"string",!0),U.array=new U(4,"array",!1),U.map=new U(5,"map",!1),U.tag=new U(6,"tag",!1),U.float=new U(7,"float",!0),U.false=new U(7,"false",!0),U.true=new U(7,"true",!0),U.null=new U(7,"null",!0),U.undefined=new U(7,"undefined",!0),U.break=new U(7,"break",!0);class ${constructor(e,t,n){this.type=e,this.value=t,this.encodedLength=n,this.encodedBytes=void 0,this.byteValue=void 0}toString(){return`Token[${this.type}].${this.value}`}}const z=globalThis.process&&!globalThis.process.browser&&globalThis.Buffer&&"function"==typeof globalThis.Buffer.isBuffer,j=new TextDecoder,q=new TextEncoder;function H(e){return z&&globalThis.Buffer.isBuffer(e)}function G(e){return e instanceof Uint8Array?H(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):e:Uint8Array.from(e)}const W=z?(e,t,n)=>n-t>64?globalThis.Buffer.from(e.subarray(t,n)).toString("utf8"):te(e,t,n):(e,t,n)=>n-t>64?j.decode(e.subarray(t,n)):te(e,t,n),J=z?e=>e.length>64?globalThis.Buffer.from(e):ee(e):e=>e.length>64?q.encode(e):ee(e),K=e=>Uint8Array.from(e),X=z?(e,t,n)=>H(e)?new Uint8Array(e.subarray(t,n)):e.slice(t,n):(e,t,n)=>e.slice(t,n),Z=z?(e,t)=>(e=e.map((e=>e instanceof Uint8Array?e:globalThis.Buffer.from(e))),G(globalThis.Buffer.concat(e,t))):(e,t)=>{const n=new Uint8Array(t);let r=0;for(let t of e)r+t.length>n.length&&(t=t.subarray(0,n.length-r)),n.set(t,r),r+=t.length;return n},Q=z?e=>globalThis.Buffer.allocUnsafe(e):e=>new Uint8Array(e);function ee(e,t=1/0){let n;const r=e.length;let i=null;const a=[];for(let s=0;s<r;++s){if(n=e.charCodeAt(s),n>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&a.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&a.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function te(e,t,n){const r=[];for(;t<n;){const i=e[t];let a=null,s=i>239?4:i>223?3:i>191?2:1;if(t+s<=n){let n,r,o,f;switch(s){case 1:i<128&&(a=i);break;case 2:n=e[t+1],128==(192&n)&&(f=(31&i)<<6|63&n,f>127&&(a=f));break;case 3:n=e[t+1],r=e[t+2],128==(192&n)&&128==(192&r)&&(f=(15&i)<<12|(63&n)<<6|63&r,f>2047&&(f<55296||f>57343)&&(a=f));break;case 4:n=e[t+1],r=e[t+2],o=e[t+3],128==(192&n)&&128==(192&r)&&128==(192&o)&&(f=(15&i)<<18|(63&n)<<12|(63&r)<<6|63&o,f>65535&&f<1114112&&(a=f))}}null===a?(a=65533,s=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),t+=s}return ne(r)}function ne(e){const t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}class re{constructor(e=256){this.chunkSize=e,this.cursor=0,this.maxCursor=-1,this.chunks=[],this._initReuseChunk=null}reset(){this.chunks=[],this.cursor=0,this.maxCursor=-1,null!==this._initReuseChunk&&(this.chunks.push(this._initReuseChunk),this.maxCursor=this._initReuseChunk.length-1)}push(e){let t=this.chunks[this.chunks.length-1];if(this.cursor+e.length<=this.maxCursor+1){const n=t.length-(this.maxCursor-this.cursor)-1;t.set(e,n)}else{if(t){const e=t.length-(this.maxCursor-this.cursor)-1;e<t.length&&(this.chunks[this.chunks.length-1]=t.subarray(0,e),this.maxCursor=this.cursor-1)}e.length<64&&e.length<this.chunkSize?(t=Q(this.chunkSize),this.chunks.push(t),this.maxCursor+=t.length,null===this._initReuseChunk&&(this._initReuseChunk=t),t.set(e,0)):(this.chunks.push(e),this.maxCursor+=e.length)}this.cursor+=e.length}toBytes(e=!1){let t;if(1===this.chunks.length){const n=this.chunks[0];e&&this.cursor>n.length/2?(t=this.cursor===n.length?n:n.subarray(0,this.cursor),this._initReuseChunk=null,this.chunks=[]):t=X(n,0,this.cursor)}else t=Z(this.chunks,this.cursor);return e&&this.reset(),t}}const ie=[];function ae(e,t,n){if(e.length-t<n)throw new Error("CBOR decode error: not enough data for type")}ie[23]=1,ie[24]=2,ie[25]=3,ie[26]=5,ie[27]=9;const se=[24,256,65536,4294967296,BigInt("18446744073709551616")];function oe(e,t,n){ae(e,t,1);const r=e[t];if(!0===n.strict&&r<se[0])throw new Error("CBOR decode error: integer encoded in more bytes than necessary (strict decode)");return r}function fe(e,t,n){ae(e,t,2);const r=e[t]<<8|e[t+1];if(!0===n.strict&&r<se[1])throw new Error("CBOR decode error: integer encoded in more bytes than necessary (strict decode)");return r}function de(e,t,n){ae(e,t,4);const r=16777216*e[t]+(e[t+1]<<16)+(e[t+2]<<8)+e[t+3];if(!0===n.strict&&r<se[2])throw new Error("CBOR decode error: integer encoded in more bytes than necessary (strict decode)");return r}function le(e,t,n){ae(e,t,8);const r=16777216*e[t]+(e[t+1]<<16)+(e[t+2]<<8)+e[t+3],i=16777216*e[t+4]+(e[t+5]<<16)+(e[t+6]<<8)+e[t+7],a=(BigInt(r)<<BigInt(32))+BigInt(i);if(!0===n.strict&&a<se[3])throw new Error("CBOR decode error: integer encoded in more bytes than necessary (strict decode)");if(a<=Number.MAX_SAFE_INTEGER)return Number(a);if(!0===n.allowBigInt)return a;throw new Error("CBOR decode error: integers outside of the safe integer range are not supported")}function ce(e,t){return ue(e,0,t.value)}function ue(e,t,n){if(n<se[0]){const r=Number(n);e.push([t|r])}else if(n<se[1]){const r=Number(n);e.push([24|t,r])}else if(n<se[2]){const r=Number(n);e.push([25|t,r>>>8,255&r])}else if(n<se[3]){const r=Number(n);e.push([26|t,r>>>24&255,r>>>16&255,r>>>8&255,255&r])}else{const r=BigInt(n);if(!(r<se[4]))throw new Error("CBOR decode error: encountered BigInt larger than allowable range");{const n=[27|t,0,0,0,0,0,0,0];let i=Number(r&BigInt(4294967295)),a=Number(r>>BigInt(32)&BigInt(4294967295));n[8]=255&i,i>>=8,n[7]=255&i,i>>=8,n[6]=255&i,i>>=8,n[5]=255&i,n[4]=255&a,a>>=8,n[3]=255&a,a>>=8,n[2]=255&a,a>>=8,n[1]=255&a,e.push(n)}}}ce.encodedSize=function(e){return ue.encodedSize(e.value)},ue.encodedSize=function(e){return e<se[0]?1:e<se[1]?2:e<se[2]?3:e<se[3]?5:9},ce.compareTokens=function(e,t){return e.value<t.value?-1:e.value>t.value?1:0};const pe=BigInt(-1),me=BigInt(1);function ye(e,t){const n=t.value,r="bigint"==typeof n?n*pe-me:-1*n-1;ue(e,t.type.majorEncoded,r)}function he(e,t,n,r){ae(e,t,n+r);const i=X(e,t+n,t+n+r);return new $(U.bytes,i,n+r)}function be(e,t,n,r){return he(e,t,1,n)}function ge(e){return void 0===e.encodedBytes&&(e.encodedBytes=e.type===U.string?J(e.value):e.value),e.encodedBytes}function _e(e,t){const n=ge(t);ue(e,t.type.majorEncoded,n.length),e.push(n)}function Te(e,t,n,r,i){const a=n+r;ae(e,t,a);const s=new $(U.string,W(e,t+n,t+a),a);return!0===i.retainStringBytes&&(s.byteValue=X(e,t+n,t+a)),s}function ve(e,t,n,r){return Te(e,t,1,n,r)}ye.encodedSize=function(e){const t=e.value,n="bigint"==typeof t?t*pe-me:-1*t-1;return n<se[0]?1:n<se[1]?2:n<se[2]?3:n<se[3]?5:9},ye.compareTokens=function(e,t){return e.value<t.value?1:e.value>t.value?-1:0},_e.encodedSize=function(e){const t=ge(e);return ue.encodedSize(t.length)+t.length},_e.compareTokens=function(e,t){return n=ge(e),r=ge(t),n.length<r.length?-1:n.length>r.length?1:function(e,t){if(H(e)&&H(t))return e.compare(t);for(let n=0;n<e.length;n++)if(e[n]!==t[n])return e[n]<t[n]?-1:1;return 0}(n,r);var n,r};const we=_e;function Ye(e,t,n,r){return new $(U.array,r,n)}function Ae(e,t,n,r){return Ye(0,0,1,n)}function Ie(e,t){ue(e,U.array.majorEncoded,t.value)}function Ce(e,t,n,r){return new $(U.map,r,n)}function Ee(e,t,n,r){return Ce(0,0,1,n)}function Se(e,t){ue(e,U.map.majorEncoded,t.value)}function Ne(e,t,n,r){return new $(U.tag,n,1)}function ke(e,t){ue(e,U.tag.majorEncoded,t.value)}function xe(e,t,n){if(n){if(!1===n.allowNaN&&Number.isNaN(e))throw new Error("CBOR decode error: NaN values are not supported");if(!1===n.allowInfinity&&(e===1/0||e===-1/0))throw new Error("CBOR decode error: Infinity values are not supported")}return new $(U.float,e,t)}function De(e,t,n){const r=t.value;if(!1===r)e.push([20|U.float.majorEncoded]);else if(!0===r)e.push([21|U.float.majorEncoded]);else if(null===r)e.push([22|U.float.majorEncoded]);else if(void 0===r)e.push([23|U.float.majorEncoded]);else{let t,a=!1;n&&!0===n.float64||(Re(r),t=Be(Le,1),r===t||Number.isNaN(r)?(Le[0]=249,e.push(Le.slice(0,3)),a=!0):(Me(r),t=Ve(Le,1),r===t&&(Le[0]=250,e.push(Le.slice(0,5)),a=!0))),a||(i=r,Pe.setFloat64(0,i,!1),t=Oe(Le,1),Le[0]=251,e.push(Le.slice(0,9)))}var i}Ie.compareTokens=ce.compareTokens,Se.compareTokens=ce.compareTokens,ke.compareTokens=ce.compareTokens,De.encodedSize=function(e,t){const n=e.value;if(!1===n||!0===n||null==n)return 1;let r;if(!t||!0!==t.float64){if(Re(n),r=Be(Le,1),n===r||Number.isNaN(n))return 3;if(Me(n),r=Ve(Le,1),n===r)return 5}return 9};const Fe=new ArrayBuffer(9),Pe=new DataView(Fe,1),Le=new Uint8Array(Fe,0);function Re(e){if(e===1/0)Pe.setUint16(0,31744,!1);else if(e===-1/0)Pe.setUint16(0,64512,!1);else if(Number.isNaN(e))Pe.setUint16(0,32256,!1);else{Pe.setFloat32(0,e);const t=Pe.getUint32(0),n=(2139095040&t)>>23,r=8388607&t;if(255===n)Pe.setUint16(0,31744,!1);else if(0===n)Pe.setUint16(0,(2147483648&e)>>16|r>>13,!1);else{const e=n-127;e<-24?Pe.setUint16(0,0):e<-14?Pe.setUint16(0,(2147483648&t)>>16|1<<24+e,!1):Pe.setUint16(0,(2147483648&t)>>16|e+15<<10|r>>13,!1)}}}function Be(e,t){if(e.length-t<2)throw new Error("CBOR decode error: not enough data for float16");const n=(e[t]<<8)+e[t+1];if(31744===n)return 1/0;if(64512===n)return-1/0;if(32256===n)return NaN;const r=n>>10&31,i=1023&n;let a;return a=0===r?i*2**-24:31!==r?(i+1024)*2**(r-25):0===i?1/0:NaN,32768&n?-a:a}function Me(e){Pe.setFloat32(0,e,!1)}function Ve(e,t){if(e.length-t<4)throw new Error("CBOR decode error: not enough data for float32");const n=(e.byteOffset||0)+t;return new DataView(e.buffer,n,4).getFloat32(0,!1)}function Oe(e,t){if(e.length-t<8)throw new Error("CBOR decode error: not enough data for float64");const n=(e.byteOffset||0)+t;return new DataView(e.buffer,n,8).getFloat64(0,!1)}function Ue(e,t,n){throw new Error(`CBOR decode error: encountered invalid minor (${n}) for major ${e[t]>>>5}`)}function $e(e){return()=>{throw new Error(`CBOR decode error: ${e}`)}}De.compareTokens=ce.compareTokens;const ze=[];for(let e=0;e<=23;e++)ze[e]=Ue;ze[24]=function(e,t,n,r){return new $(U.uint,oe(e,t+1,r),2)},ze[25]=function(e,t,n,r){return new $(U.uint,fe(e,t+1,r),3)},ze[26]=function(e,t,n,r){return new $(U.uint,de(e,t+1,r),5)},ze[27]=function(e,t,n,r){return new $(U.uint,le(e,t+1,r),9)},ze[28]=Ue,ze[29]=Ue,ze[30]=Ue,ze[31]=Ue;for(let e=32;e<=55;e++)ze[e]=Ue;ze[56]=function(e,t,n,r){return new $(U.negint,-1-oe(e,t+1,r),2)},ze[57]=function(e,t,n,r){return new $(U.negint,-1-fe(e,t+1,r),3)},ze[58]=function(e,t,n,r){return new $(U.negint,-1-de(e,t+1,r),5)},ze[59]=function(e,t,n,r){const i=le(e,t+1,r);if("bigint"!=typeof i){const e=-1-i;if(e>=Number.MIN_SAFE_INTEGER)return new $(U.negint,e,9)}if(!0!==r.allowBigInt)throw new Error("CBOR decode error: integers outside of the safe integer range are not supported");return new $(U.negint,pe-BigInt(i),9)},ze[60]=Ue,ze[61]=Ue,ze[62]=Ue,ze[63]=Ue;for(let e=64;e<=87;e++)ze[e]=be;ze[88]=function(e,t,n,r){return he(e,t,2,oe(e,t+1,r))},ze[89]=function(e,t,n,r){return he(e,t,3,fe(e,t+1,r))},ze[90]=function(e,t,n,r){return he(e,t,5,de(e,t+1,r))},ze[91]=function(e,t,n,r){const i=le(e,t+1,r);if("bigint"==typeof i)throw new Error("CBOR decode error: 64-bit integer bytes lengths not supported");return he(e,t,9,i)},ze[92]=Ue,ze[93]=Ue,ze[94]=Ue,ze[95]=$e("indefinite length bytes/strings are not supported");for(let e=96;e<=119;e++)ze[e]=ve;ze[120]=function(e,t,n,r){return Te(e,t,2,oe(e,t+1,r),r)},ze[121]=function(e,t,n,r){return Te(e,t,3,fe(e,t+1,r),r)},ze[122]=function(e,t,n,r){return Te(e,t,5,de(e,t+1,r),r)},ze[123]=function(e,t,n,r){const i=le(e,t+1,r);if("bigint"==typeof i)throw new Error("CBOR decode error: 64-bit integer string lengths not supported");return Te(e,t,9,i,r)},ze[124]=Ue,ze[125]=Ue,ze[126]=Ue,ze[127]=$e("indefinite length bytes/strings are not supported");for(let e=128;e<=151;e++)ze[e]=Ae;ze[152]=function(e,t,n,r){return Ye(0,0,2,oe(e,t+1,r))},ze[153]=function(e,t,n,r){return Ye(0,0,3,fe(e,t+1,r))},ze[154]=function(e,t,n,r){return Ye(0,0,5,de(e,t+1,r))},ze[155]=function(e,t,n,r){const i=le(e,t+1,r);if("bigint"==typeof i)throw new Error("CBOR decode error: 64-bit integer array lengths not supported");return Ye(0,0,9,i)},ze[156]=Ue,ze[157]=Ue,ze[158]=Ue,ze[159]=function(e,t,n,r){if(!1===r.allowIndefinite)throw new Error("CBOR decode error: indefinite length items not allowed");return Ye(0,0,1,1/0)};for(let e=160;e<=183;e++)ze[e]=Ee;ze[184]=function(e,t,n,r){return Ce(0,0,2,oe(e,t+1,r))},ze[185]=function(e,t,n,r){return Ce(0,0,3,fe(e,t+1,r))},ze[186]=function(e,t,n,r){return Ce(0,0,5,de(e,t+1,r))},ze[187]=function(e,t,n,r){const i=le(e,t+1,r);if("bigint"==typeof i)throw new Error("CBOR decode error: 64-bit integer map lengths not supported");return Ce(0,0,9,i)},ze[188]=Ue,ze[189]=Ue,ze[190]=Ue,ze[191]=function(e,t,n,r){if(!1===r.allowIndefinite)throw new Error("CBOR decode error: indefinite length items not allowed");return Ce(0,0,1,1/0)};for(let e=192;e<=215;e++)ze[e]=Ne;ze[216]=function(e,t,n,r){return new $(U.tag,oe(e,t+1,r),2)},ze[217]=function(e,t,n,r){return new $(U.tag,fe(e,t+1,r),3)},ze[218]=function(e,t,n,r){return new $(U.tag,de(e,t+1,r),5)},ze[219]=function(e,t,n,r){return new $(U.tag,le(e,t+1,r),9)},ze[220]=Ue,ze[221]=Ue,ze[222]=Ue,ze[223]=Ue;for(let e=224;e<=243;e++)ze[e]=$e("simple values are not supported");ze[244]=Ue,ze[245]=Ue,ze[246]=Ue,ze[247]=function(e,t,n,r){if(!1===r.allowUndefined)throw new Error("CBOR decode error: undefined values are not supported");return!0===r.coerceUndefinedToNull?new $(U.null,null,1):new $(U.undefined,void 0,1)},ze[248]=$e("simple values are not supported"),ze[249]=function(e,t,n,r){return xe(Be(e,t+1),3,r)},ze[250]=function(e,t,n,r){return xe(Ve(e,t+1),5,r)},ze[251]=function(e,t,n,r){return xe(Oe(e,t+1),9,r)},ze[252]=Ue,ze[253]=Ue,ze[254]=Ue,ze[255]=function(e,t,n,r){if(!1===r.allowIndefinite)throw new Error("CBOR decode error: indefinite length items not allowed");return new $(U.break,void 0,1)};const je=[];for(let e=0;e<24;e++)je[e]=new $(U.uint,e,1);for(let e=-1;e>=-24;e--)je[31-e]=new $(U.negint,e,1);je[64]=new $(U.bytes,new Uint8Array(0),1),je[96]=new $(U.string,"",1),je[128]=new $(U.array,0,1),je[160]=new $(U.map,0,1),je[244]=new $(U.false,!1,1),je[245]=new $(U.true,!0,1),je[246]=new $(U.null,null,1);const qe={float64:!1,mapSorter:function(e,t){const n=Array.isArray(e[0])?e[0][0]:e[0],r=Array.isArray(t[0])?t[0][0]:t[0];if(n.type!==r.type)return n.type.compare(r.type);const i=n.type.major,a=He[i].compareTokens(n,r);return 0===a&&console.warn("WARNING: complex key types used, CBOR key sorting guarantees are gone"),a},quickEncodeToken:function(e){switch(e.type){case U.false:return K([244]);case U.true:return K([245]);case U.null:return K([246]);case U.bytes:return e.value.length?void 0:K([64]);case U.string:return""===e.value?K([96]):void 0;case U.array:return 0===e.value?K([128]):void 0;case U.map:return 0===e.value?K([160]):void 0;case U.uint:return e.value<24?K([Number(e.value)]):void 0;case U.negint:if(e.value>=-24)return K([31-Number(e.value)])}}},He=[];He[U.uint.major]=ce,He[U.negint.major]=ye,He[U.bytes.major]=_e,He[U.string.major]=we,He[U.array.major]=Ie,He[U.map.major]=Se,He[U.tag.major]=ke,He[U.float.major]=De;const Ge=new re;class We{constructor(e,t){this.obj=e,this.parent=t}includes(e){let t=this;do{if(t.obj===e)return!0}while(t=t.parent);return!1}static createCheck(e,t){if(e&&e.includes(t))throw new Error("CBOR encode error: object contains circular references");return new We(t,e)}}const Je={null:new $(U.null,null),undefined:new $(U.undefined,void 0),true:new $(U.true,!0),false:new $(U.false,!1),emptyArray:new $(U.array,0),emptyMap:new $(U.map,0)},Ke={number:(e,t,n,r)=>Number.isInteger(e)&&Number.isSafeInteger(e)?new $(e>=0?U.uint:U.negint,e):new $(U.float,e),bigint:(e,t,n,r)=>e>=BigInt(0)?new $(U.uint,e):new $(U.negint,e),Uint8Array:(e,t,n,r)=>new $(U.bytes,e),string:(e,t,n,r)=>new $(U.string,e),boolean:(e,t,n,r)=>e?Je.true:Je.false,null:(e,t,n,r)=>Je.null,undefined:(e,t,n,r)=>Je.undefined,ArrayBuffer:(e,t,n,r)=>new $(U.bytes,new Uint8Array(e)),DataView:(e,t,n,r)=>new $(U.bytes,new Uint8Array(e.buffer,e.byteOffset,e.byteLength)),Array(e,t,n,r){if(!e.length)return!0===n.addBreakTokens?[Je.emptyArray,new $(U.break)]:Je.emptyArray;r=We.createCheck(r,e);const i=[];let a=0;for(const t of e)i[a++]=Xe(t,n,r);return n.addBreakTokens?[new $(U.array,e.length),i,new $(U.break)]:[new $(U.array,e.length),i]},Object(e,t,n,r){const i="Object"!==t,a=i?e.keys():Object.keys(e),s=i?e.size:a.length;if(!s)return!0===n.addBreakTokens?[Je.emptyMap,new $(U.break)]:Je.emptyMap;r=We.createCheck(r,e);const o=[];let f=0;for(const t of a)o[f++]=[Xe(t,n,r),Xe(i?e.get(t):e[t],n,r)];return function(e,t){t.mapSorter&&e.sort(t.mapSorter)}(o,n),n.addBreakTokens?[new $(U.map,s),o,new $(U.break)]:[new $(U.map,s),o]}};Ke.Map=Ke.Object,Ke.Buffer=Ke.Uint8Array;for(const e of"Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64".split(" "))Ke[`${e}Array`]=Ke.DataView;function Xe(e,t={},n){const r=function(e){if(null===e)return"null";if(void 0===e)return"undefined";if(!0===e||!1===e)return"boolean";const t=typeof e;if(V.includes(t))return t;if("function"===t)return"Function";if(Array.isArray(e))return"Array";if(function(e){return e&&e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer.call(null,e)}(e))return"Buffer";const n=function(e){const t=Object.prototype.toString.call(e).slice(8,-1);if(O.includes(t))return t}(e);return n||"Object"}(e),i=t&&t.typeEncoders&&t.typeEncoders[r]||Ke[r];if("function"==typeof i){const a=i(e,r,t,n);if(null!=a)return a}const a=Ke[r];if(!a)throw new Error(`CBOR encode error: unsupported type: ${r}`);return a(e,r,t,n)}function Ze(e,t,n,r){if(Array.isArray(t))for(const i of t)Ze(e,i,n,r);else n[t.type.major](e,t,r)}function Qe(e,t,n){const r=Xe(e,n);if(!Array.isArray(r)&&n.quickEncodeToken){const e=n.quickEncodeToken(r);if(e)return e;const i=t[r.type.major];if(i.encodedSize){const e=i.encodedSize(r,n),t=new re(e);if(i(t,r,n),1!==t.chunks.length)throw new Error(`Unexpected error: pre-calculated length for ${r} was wrong`);return G(t.chunks[0])}}return Ze(Ge,r,t,n),Ge.toBytes(!0)}const et={strict:!1,allowIndefinite:!0,allowUndefined:!0,allowBigInt:!0};class tt{constructor(e,t={}){this.pos=0,this.data=e,this.options=t}done(){return this.pos>=this.data.length}next(){const e=this.data[this.pos];let t=je[e];if(void 0===t){const n=ze[e];if(!n)throw new Error(`CBOR decode error: no decoder for major type ${e>>>5} (byte 0x${e.toString(16).padStart(2,"0")})`);const r=31&e;t=n(this.data,this.pos,r,this.options)}return this.pos+=t.encodedLength,t}}const nt=Symbol.for("DONE"),rt=Symbol.for("BREAK");function it(e,t){if(e.done())return nt;const n=e.next();if(n.type===U.break)return rt;if(n.type.terminal)return n.value;if(n.type===U.array)return function(e,t,n){const r=[];for(let i=0;i<e.value;i++){const a=it(t,n);if(a===rt){if(e.value===1/0)break;throw new Error("CBOR decode error: got unexpected break to lengthed array")}if(a===nt)throw new Error(`CBOR decode error: found array but not enough entries (got ${i}, expected ${e.value})`);r[i]=a}return r}(n,e,t);if(n.type===U.map)return function(e,t,n){const r=!0===n.useMaps,i=r?void 0:{},a=r?new Map:void 0;for(let s=0;s<e.value;s++){const o=it(t,n);if(o===rt){if(e.value===1/0)break;throw new Error("CBOR decode error: got unexpected break to lengthed map")}if(o===nt)throw new Error(`CBOR decode error: found map but not enough entries (got ${s} [no key], expected ${e.value})`);if(!0!==r&&"string"!=typeof o)throw new Error(`CBOR decode error: non-string keys not supported (got ${typeof o})`);const f=it(t,n);if(f===nt)throw new Error(`CBOR decode error: found map but not enough entries (got ${s} [no value], expected ${e.value})`);r?a.set(o,f):i[o]=f}return r?a:i}(n,e,t);if(n.type===U.tag){if(t.tags&&"function"==typeof t.tags[n.value]){const r=it(e,t);return t.tags[n.value](r)}throw new Error(`CBOR decode error: tag not supported (${n.value})`)}throw new Error("unsupported")}function at(e,t){if(!(e instanceof Uint8Array))throw new Error("CBOR decode error: data to decode must be a Uint8Array");const n=(t=Object.assign({},et,t)).tokenizer||new tt(e,t),r=it(n,t);if(r===nt)throw new Error("CBOR decode error: did not find any content to decode");if(r===rt)throw new Error("CBOR decode error: got unexpected break");if(!n.done())throw new Error("CBOR decode error: too many terminals, data makes no sense");return r}const st={float64:!0,typeEncoders:{Object:function(e){if(e.asCID!==e)return null;const t=u.CID.asCID(e);if(!t)return null;const n=new Uint8Array(t.bytes.byteLength+1);return n.set(t.bytes,1),[new $(U.tag,42),new $(U.bytes,n)]},undefined:function(){throw new Error("`undefined` is not supported by the IPLD Data Model and cannot be encoded")},number:function(e){if(Number.isNaN(e))throw new Error("`NaN` is not supported by the IPLD Data Model and cannot be encoded");if(e===1/0||e===-1/0)throw new Error("`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded");return null}}},ot={allowIndefinite:!1,coerceUndefinedToNull:!0,allowNaN:!1,allowInfinity:!1,allowBigInt:!0,strict:!0,useMaps:!1,tags:[]};ot.tags[42]=function(e){if(0!==e[0])throw new Error("Invalid CID for CBOR tag 42; expected leading 0x00");return u.CID.decode(e.subarray(1))};const ft="dag-cbor",dt=113,lt=e=>{return t=e,n=st,n=Object.assign({},qe,n),Qe(t,He,n);var t,n},ct=e=>at(e,ot);var ut=n(6441),pt=n(9885);class mt extends Array{constructor(){super(),this.inRecursive=[]}prefix(e){const t=this.inRecursive[this.inRecursive.length-1];t&&(t.type===U.array&&(t.elements++,1!==t.elements&&e.push([44])),t.type===U.map&&(t.elements++,1!==t.elements&&(t.elements%2==1?e.push([44]):e.push([58]))))}[U.uint.major](e,t){this.prefix(e);const n=String(t.value),r=[];for(let e=0;e<n.length;e++)r[e]=n.charCodeAt(e);e.push(r)}[U.negint.major](e,t){this[U.uint.major](e,t)}[U.bytes.major](e,t){throw new Error("CBOR encode error: unsupported type: Uint8Array")}[U.string.major](e,t){this.prefix(e);const n=J(JSON.stringify(t.value));e.push(n.length>32?G(n):n)}[U.array.major](e,t){this.prefix(e),this.inRecursive.push({type:U.array,elements:0}),e.push([91])}[U.map.major](e,t){this.prefix(e),this.inRecursive.push({type:U.map,elements:0}),e.push([123])}[U.tag.major](e,t){}[U.float.major](e,t){if("break"===t.type.name){const t=this.inRecursive.pop();if(t){if(t.type===U.array)e.push([93]);else{if(t.type!==U.map)throw new Error("Unexpected recursive type; this should not happen!");e.push([125])}return}throw new Error("Unexpected break; this should not happen!")}if(void 0===t.value)throw new Error("CBOR encode error: unsupported type: undefined");if(this.prefix(e),"true"===t.type.name)return void e.push([116,114,117,101]);if("false"===t.type.name)return void e.push([102,97,108,115,101]);if("null"===t.type.name)return void e.push([110,117,108,108]);const n=String(t.value),r=[];let i=!1;for(let e=0;e<n.length;e++)r[e]=n.charCodeAt(e),i||46!==r[e]&&101!==r[e]&&69!==r[e]||(i=!0);i||(r.push(46),r.push(48)),e.push(r)}}const yt={addBreakTokens:!0,mapSorter:function(e,t){if(Array.isArray(e[0])||Array.isArray(t[0]))throw new Error("CBOR encode error: complex map keys are not supported");const n=e[0],r=t[0];if(n.type!==U.string||r.type!==U.string)throw new Error("CBOR encode error: non-string map keys are not supported");if(n<r)return-1;if(n>r)return 1;throw new Error("CBOR encode error: unexpected duplicate map keys, this is not supported")}};class ht{constructor(e,t={}){this.pos=0,this.data=e,this.options=t,this.modeStack=["value"],this.lastToken=""}done(){return this.pos>=this.data.length}ch(){return this.data[this.pos]}currentMode(){return this.modeStack[this.modeStack.length-1]}skipWhitespace(){let e=this.ch();for(;32===e||9===e||13===e||10===e;)e=this.data[++this.pos]}expect(e){if(this.data.length-this.pos<e.length)throw new Error(`CBOR decode error: unexpected end of input at position ${this.pos}`);for(let t=0;t<e.length;t++)if(this.data[this.pos++]!==e[t])throw new Error(`CBOR decode error: unexpected token at position ${this.pos}, expected to find '${String.fromCharCode(...e)}'`)}parseNumber(){const e=this.pos;let t=!1,n=!1;const r=e=>{for(;!this.done();){const t=this.ch();if(!e.includes(t))break;this.pos++}};if(45===this.ch()&&(t=!0,this.pos++),48===this.ch()){if(this.pos++,46!==this.ch())return new $(U.uint,0,this.pos-e);this.pos++,n=!0}if(r([48,49,50,51,52,53,54,55,56,57]),t&&this.pos===e+1)throw new Error(`CBOR decode error: unexpected token at position ${this.pos}`);if(!this.done()&&46===this.ch()){if(n)throw new Error(`CBOR decode error: unexpected token at position ${this.pos}`);n=!0,this.pos++,r([48,49,50,51,52,53,54,55,56,57])}this.done()||101!==this.ch()&&69!==this.ch()||(n=!0,this.pos++,this.done()||43!==this.ch()&&45!==this.ch()||this.pos++,r([48,49,50,51,52,53,54,55,56,57]));const i=String.fromCharCode.apply(null,this.data.subarray(e,this.pos)),a=parseFloat(i);return n?new $(U.float,a,this.pos-e):!0!==this.options.allowBigInt||Number.isSafeInteger(a)?new $(a>=0?U.uint:U.negint,a,this.pos-e):new $(a>=0?U.uint:U.negint,BigInt(i),this.pos-e)}parseString(){if(34!==this.ch())throw new Error(`CBOR decode error: unexpected character at position ${this.pos}; this shouldn't happen`);this.pos++;for(let e=this.pos,t=0;e<this.data.length&&t<65536;e++,t++){const n=this.data[e];if(92===n||n<32||n>=128)break;if(34===n){const n=String.fromCharCode.apply(null,this.data.subarray(this.pos,e));return this.pos=e+1,new $(U.string,n,t)}}const e=this.pos,t=[],n=()=>{if(this.pos+4>=this.data.length)throw new Error(`CBOR decode error: unexpected end of unicode escape sequence at position ${this.pos}`);let e=0;for(let t=0;t<4;t++){let t=this.ch();if(t>=48&&t<=57)t-=48;else if(t>=97&&t<=102)t=t-97+10;else{if(!(t>=65&&t<=70))throw new Error(`CBOR decode error: unexpected unicode escape character at position ${this.pos}`);t=t-65+10}e=16*e+t,this.pos++}return e},r=()=>{const e=this.ch();let n,r,i,a,s=null,o=e>239?4:e>223?3:e>191?2:1;if(this.pos+o>this.data.length)throw new Error(`CBOR decode error: unexpected unicode sequence at position ${this.pos}`);switch(o){case 1:e<128&&(s=e);break;case 2:n=this.data[this.pos+1],128==(192&n)&&(a=(31&e)<<6|63&n,a>127&&(s=a));break;case 3:n=this.data[this.pos+1],r=this.data[this.pos+2],128==(192&n)&&128==(192&r)&&(a=(15&e)<<12|(63&n)<<6|63&r,a>2047&&(a<55296||a>57343)&&(s=a));break;case 4:n=this.data[this.pos+1],r=this.data[this.pos+2],i=this.data[this.pos+3],128==(192&n)&&128==(192&r)&&128==(192&i)&&(a=(15&e)<<18|(63&n)<<12|(63&r)<<6|63&i,a>65535&&a<1114112&&(s=a))}null===s?(s=65533,o=1):s>65535&&(s-=65536,t.push(s>>>10&1023|55296),s=56320|1023&s),t.push(s),this.pos+=o};for(;!this.done();){const i=this.ch();let a;switch(i){case 92:if(this.pos++,this.done())throw new Error(`CBOR decode error: unexpected string termination at position ${this.pos}`);switch(a=this.ch(),this.pos++,a){case 34:case 39:case 92:case 47:t.push(a);break;case 98:t.push(8);break;case 116:t.push(9);break;case 110:t.push(10);break;case 102:t.push(12);break;case 114:t.push(13);break;case 117:t.push(n());break;default:throw new Error(`CBOR decode error: unexpected string escape character at position ${this.pos}`)}break;case 34:return this.pos++,new $(U.string,ne(t),this.pos-e);default:if(i<32)throw new Error(`CBOR decode error: invalid control character at position ${this.pos}`);i<128?(t.push(i),this.pos++):r()}}throw new Error(`CBOR decode error: unexpected end of string at position ${this.pos}`)}parseValue(){switch(this.ch()){case 123:return this.modeStack.push("obj-start"),this.pos++,new $(U.map,1/0,1);case 91:return this.modeStack.push("array-start"),this.pos++,new $(U.array,1/0,1);case 34:return this.parseString();case 110:return this.expect([110,117,108,108]),new $(U.null,null,4);case 102:return this.expect([102,97,108,115,101]),new $(U.false,!1,5);case 116:return this.expect([116,114,117,101]),new $(U.true,!0,4);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.parseNumber();default:throw new Error(`CBOR decode error: unexpected character at position ${this.pos}`)}}next(){switch(this.skipWhitespace(),this.currentMode()){case"value":return this.modeStack.pop(),this.parseValue();case"array-value":if(this.modeStack.pop(),93===this.ch())return this.pos++,this.skipWhitespace(),new $(U.break,void 0,1);if(44!==this.ch())throw new Error(`CBOR decode error: unexpected character at position ${this.pos}, was expecting array delimiter but found '${String.fromCharCode(this.ch())}'`);return this.pos++,this.modeStack.push("array-value"),this.skipWhitespace(),this.parseValue();case"array-start":return this.modeStack.pop(),93===this.ch()?(this.pos++,this.skipWhitespace(),new $(U.break,void 0,1)):(this.modeStack.push("array-value"),this.skipWhitespace(),this.parseValue());case"obj-key":if(125===this.ch())return this.modeStack.pop(),this.pos++,this.skipWhitespace(),new $(U.break,void 0,1);if(44!==this.ch())throw new Error(`CBOR decode error: unexpected character at position ${this.pos}, was expecting object delimiter but found '${String.fromCharCode(this.ch())}'`);this.pos++,this.skipWhitespace();case"obj-start":{if(this.modeStack.pop(),125===this.ch())return this.pos++,this.skipWhitespace(),new $(U.break,void 0,1);const e=this.parseString();if(this.skipWhitespace(),58!==this.ch())throw new Error(`CBOR decode error: unexpected character at position ${this.pos}, was expecting key/value delimiter ':' but found '${String.fromCharCode(this.ch())}'`);return this.pos++,this.modeStack.push("obj-value"),e}case"obj-value":return this.modeStack.pop(),this.modeStack.push("obj-key"),this.skipWhitespace(),this.parseValue();default:throw new Error(`CBOR decode error: unexpected parse state at position ${this.pos}; this shouldn't happen`)}}}function bt(e){const t=pt.base64.encode(e).slice(1);return[new $(U.map,1/0,1),new $(U.string,"/",1),new $(U.map,1/0,1),new $(U.string,"bytes",5),new $(U.string,t,t.length),new $(U.break,void 0,1),new $(U.break,void 0,1)]}const gt={typeEncoders:{Object:function(e){if(e.asCID!==e)return null;const t=ut.k0.asCID(e);if(!t)return null;const n=t.toString();return[new $(U.map,1/0,1),new $(U.string,"/",1),new $(U.string,n,n.length),new $(U.break,void 0,1)]},Uint8Array:bt,Buffer:bt,undefined:function(){throw new Error("`undefined` is not supported by the IPLD Data Model and cannot be encoded")},number:function(e){if(Number.isNaN(e))throw new Error("`NaN` is not supported by the IPLD Data Model and cannot be encoded");if(e===1/0||e===-1/0)throw new Error("`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded");return null}}};class _t extends ht{constructor(e,t){super(e,t),this.tokenBuffer=[]}done(){return 0===this.tokenBuffer.length&&super.done()}_next(){return this.tokenBuffer.length>0?this.tokenBuffer.pop():super.next()}next(){const e=this._next();if(e.type===U.map){const e=this._next();if(e.type===U.string&&"/"===e.value){const e=this._next();if(e.type===U.string){if(this._next().type!==U.break)throw new Error("Invalid encoded CID form");return this.tokenBuffer.push(e),new $(U.tag,42,0)}if(e.type===U.map){const e=this._next();if(e.type===U.string&&"bytes"===e.value){const e=this._next();if(e.type===U.string){for(let e=0;e<2;e++)if(this._next().type!==U.break)throw new Error("Invalid encoded Bytes form");const t=pt.base64.decode(`m${e.value}`);return new $(U.bytes,t,e.value.length)}this.tokenBuffer.push(e)}this.tokenBuffer.push(e)}this.tokenBuffer.push(e)}this.tokenBuffer.push(e)}return e}}const Tt={allowIndefinite:!1,allowUndefined:!1,allowNaN:!1,allowInfinity:!1,allowBigInt:!0,strict:!0,useMaps:!1,tags:[]};Tt.tags[42]=ut.k0.parse;const vt="dag-json",wt=297,Yt=e=>{return t=e,n=gt,n=Object.assign({},yt,n),Qe(t,new mt,n);var t,n},At=e=>function(e,t){return at(e,t=Object.assign({tokenizer:new ht(e,t)},t))}(e,Object.assign(Tt,{tokenizer:new _t(e,Tt)}));var It=n(8103),Ct=n(1253),Et=n(6584),St=n(106);let Nt=/(-?(?:\d+\.?\d*|\d*\.?\d+)(?:e[-+]?\d+)?)\s*([\p{L}]*)/giu;function kt(e="",t="ms"){var n=null;return(e=(e+"").replace(/(\d)[,_](\d)/g,"$1$2")).replace(Nt,(function(e,t,r){(r=xt(r))&&(n=(n||0)+parseFloat(t,10)*r)})),n&&n/(xt(t)||1)}function xt(e){return kt[e]||kt[e.toLowerCase().replace(/s$/,"")]}kt.nanosecond=kt.ns=1e-6,kt["µs"]=kt["μs"]=kt.us=kt.microsecond=.001,kt.millisecond=kt.ms=kt[""]=1,kt.second=kt.sec=kt.s=1e3*kt.ms,kt.minute=kt.min=kt.m=60*kt.s,kt.hour=kt.hr=kt.h=60*kt.m,kt.day=kt.d=24*kt.h,kt.week=kt.wk=kt.w=7*kt.d,kt.month=kt.b=30.4375*kt.d,kt.year=kt.yr=kt.y=365.25*kt.d;const Dt=kt;var Ft=n(1227),Pt=n(7137);const Lt=n(942);var Rt=n(5700);function Bt(e){try{e=Rt(new Et.Multiaddr(e))}catch(e){}return e.toString()}const Mt=Ft("ipfs-http-client:lib:error-handler"),Vt=Lt.bind({ignoreUndefined:!0}),Ot=St.isBrowser||St.isWebWorker?location.protocol:"http",Ut=St.isBrowser||St.isWebWorker?location.hostname:"localhost",$t=St.isBrowser||St.isWebWorker?location.port:"5001",zt=async e=>{let t;try{if((e.headers.get("Content-Type")||"").startsWith("application/json")){const n=await e.json();Mt(n),t=n.Message||n.message}else t=await e.text()}catch(e){Mt("Failed to parse error response",e),t=e.message}let n=new Pt.HTTPError(e);throw t&&(t.includes("deadline has elapsed")&&(n=new Pt.TimeoutError),t&&t.includes("context deadline exceeded")&&(n=new Pt.TimeoutError)),t&&t.includes("request timed out")&&(n=new Pt.TimeoutError),t&&(n.message=t),n},jt=/[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g,qt=e=>e.replace(jt,(function(e){return"-"+e.toLowerCase()}));class Ht extends Pt{constructor(e={}){const t=((e={})=>{let t,n,r={};if("string"==typeof e||Et.Multiaddr.isMultiaddr(e))t=new URL(Bt(e));else if(e instanceof URL)t=e;else if("string"==typeof e.url||Et.Multiaddr.isMultiaddr(e.url))t=new URL(Bt(e.url)),r=e;else if(e.url instanceof URL)t=e.url,r=e;else{r=e||{};const n=(r.protocol||Ot).replace(":",""),i=(r.host||Ut).split(":")[0],a=r.port||$t;t=new URL(`${n}://${i}:${a}`)}if(r.apiPath?t.pathname=r.apiPath:"/"!==t.pathname&&void 0!==t.pathname||(t.pathname="api/v0"),St.isNode){const e=void 0;n=r.agent||new e({keepAlive:!0,maxSockets:6})}return{...r,host:t.host,protocol:t.protocol.replace(":",""),port:Number(t.port),apiPath:t.pathname,url:t,agent:n}})(e);var n;super({timeout:(n=t.timeout||0,("string"==typeof n?Dt(n):n)||void 0),headers:t.headers,base:`${t.url}`,handleError:zt,transformSearchParams:e=>{const t=new URLSearchParams;for(const[n,r]of e)"undefined"!==r&&"null"!==r&&"signal"!==n&&t.append(qt(n),r),"timeout"!==n||isNaN(r)||t.append(qt(n),r);return t},agent:t.agent}),delete this.get,delete this.put,delete this.delete,delete this.options;const r=this.fetch;this.fetch=(e,n={})=>("string"!=typeof e||e.startsWith("/")||(e=`${t.url}/${e}`),r.call(this,e,Vt(n,{method:"POST"})))}}Pt.HTTPError;const Gt=e=>t=>e(new Ht(t),t);function Wt(e){if(null!=e)return"string"==typeof e?e:e.toString(8).padStart(4,"0")}var Jt=n(2114);function Kt(e){if(null==e)return;let t;if(null!=e.secs&&(t={secs:e.secs,nsecs:e.nsecs}),null!=e.Seconds&&(t={secs:e.Seconds,nsecs:e.FractionalNanoseconds}),Array.isArray(e)&&(t={secs:e[0],nsecs:e[1]}),e instanceof Date){const n=e.getTime(),r=Math.floor(n/1e3);t={secs:r,nsecs:1e3*(n-1e3*r)}}if(Object.prototype.hasOwnProperty.call(t,"secs")){if(null!=t&&null!=t.nsecs&&(t.nsecs<0||t.nsecs>999999999))throw Jt(new Error("mtime-nsecs must be within the range [0,999999999]"),"ERR_INVALID_MTIME_NSECS");return t}}function Xt({arg:e,searchParams:t,hashAlg:n,mtime:r,mode:i,...a}={}){t&&(a={...a,...t}),n&&(a.hash=n),null!=r&&(r=Kt(r),a.mtime=r.secs,a.mtimeNsecs=r.nsecs),null!=i&&(a.mode=Wt(i)),a.timeout&&!isNaN(a.timeout)&&(a.timeout=`${a.timeout}ms`),null==e?e=[]:Array.isArray(e)||(e=[e]);const s=new URLSearchParams(a);return e.forEach((e=>s.append("arg",e))),s}const Zt=Gt((e=>async function(t={}){return((await(await e.post("bitswap/wantlist",{signal:t.signal,searchParams:Xt(t),headers:t.headers})).json()).Keys||[]).map((e=>u.CID.parse(e["/"])))})),Qt=Gt((e=>async function(t,n={}){return((await(await e.post("bitswap/wantlist",{signal:n.signal,searchParams:Xt({...n,peer:t.toString()}),headers:n.headers})).json()).Keys||[]).map((e=>u.CID.parse(e["/"])))})),en=Gt((e=>async function(t={}){const n=await e.post("bitswap/stat",{searchParams:Xt(t),signal:t.signal,headers:t.headers});return function(e){return{provideBufLen:e.ProvideBufLen,wantlist:(e.Wantlist||[]).map((e=>u.CID.parse(e["/"]))),peers:e.Peers||[],blocksReceived:BigInt(e.BlocksReceived),dataReceived:BigInt(e.DataReceived),blocksSent:BigInt(e.BlocksSent),dataSent:BigInt(e.DataSent),dupBlksReceived:BigInt(e.DupBlksReceived),dupDataReceived:BigInt(e.DupDataReceived)}}(await n.json())})),tn=Gt((e=>async function(t,n={}){return(await e.post("bitswap/unwant",{signal:n.signal,searchParams:Xt({arg:t.toString(),...n}),headers:n.headers})).json()})),nn=Gt((e=>async function(t,n={}){const r=await e.post("block/get",{signal:n.signal,searchParams:Xt({arg:t.toString(),...n}),headers:n.headers});return new Uint8Array(await r.arrayBuffer())}));var rn=n(8132),an=n(6154),sn=n(1303);function on(e){return ArrayBuffer.isView(e)||e instanceof ArrayBuffer}function fn(e){return e.constructor&&("Blob"===e.constructor.name||"File"===e.constructor.name)&&"function"==typeof e.stream}function dn(e){return"object"==typeof e&&(e.path||e.content)}const ln=e=>e&&"function"==typeof e.getReader;async function cn(e){if(on(e))return new Blob([e]);if("string"==typeof e||e instanceof String)return new Blob([e.toString()]);if(fn(e))return e;if(ln(e)&&(e=an(e)),Symbol.iterator in e||Symbol.asyncIterator in e){const t=rn(e),{value:n,done:r}=await t.peek();if(r)return un(t);if(t.push(n),Number.isInteger(n))return new Blob([Uint8Array.from(await sn(t))]);if(on(n)||"string"==typeof n||n instanceof String)return un(t)}throw Jt(new Error(`Unexpected input: ${e}`),"ERR_UNEXPECTED_INPUT")}async function un(e){const t=[];for await(const n of e)t.push(n);return new Blob(t)}var pn=n(2121),mn=n(2100);const yn=mn.Reader,hn=mn.Writer,bn=mn.util,gn=mn.roots["ipfs-unixfs"]||(mn.roots["ipfs-unixfs"]={});function _n(e){if(null!=e)return"number"==typeof e?4095&e:"0"===(e=e.toString()).substring(0,1)?4095&parseInt(e,8):4095&parseInt(e,10)}function Tn(e){if(null==e)return;let t;if(null!=e.secs&&(t={secs:e.secs,nsecs:e.nsecs}),null!=e.Seconds&&(t={secs:e.Seconds,nsecs:e.FractionalNanoseconds}),Array.isArray(e)&&(t={secs:e[0],nsecs:e[1]}),e instanceof Date){const n=e.getTime(),r=Math.floor(n/1e3);t={secs:r,nsecs:1e3*(n-1e3*r)}}if(Object.prototype.hasOwnProperty.call(t,"secs")){if(null!=t&&null!=t.nsecs&&(t.nsecs<0||t.nsecs>999999999))throw Jt(new Error("mtime-nsecs must be within the range [0,999999999]"),"ERR_INVALID_MTIME_NSECS");return t}}async function vn(e,t){const{path:n,mode:r,mtime:i,content:a}=e,s={path:n||"",mode:_n(r),mtime:Tn(i)};return a?s.content=await t(a):n||(s.content=await t(e)),s}function wn(e){if(null!=e)return"string"==typeof e?e:e.toString(8).padStart(4,"0")}async function Yn(e,t,n={}){const r=[],i=new FormData;let a=0,s=0;for await(const{content:t,path:n,mode:o,mtime:f}of async function*(e,t){if("string"==typeof e||e instanceof String||on(e)||fn(e)||e._readableState)throw Jt(new Error("Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead"),"ERR_UNEXPECTED_INPUT");if(ln(e)&&(e=an(e)),Symbol.iterator in e||Symbol.asyncIterator in e){const n=rn(e),{value:r,done:i}=await n.peek();if(i)return void(yield*[]);if(n.push(r),Number.isInteger(r))throw Jt(new Error("Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead"),"ERR_UNEXPECTED_INPUT");if(r._readableState)return void(yield*pn(n,(e=>vn({content:e},t))));if(on(r))return void(yield vn({content:n},t));if(dn(r)||r[Symbol.iterator]||r[Symbol.asyncIterator]||ln(r)||fn(r))return void(yield*pn(n,(e=>vn(e,t))))}if(dn(e))throw Jt(new Error("Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead"),"ERR_UNEXPECTED_INPUT");throw Jt(new Error("Unexpected input: "+typeof e),"ERR_UNEXPECTED_INPUT")}(e,cn)){let e="";a>0&&(e=`-${a}`);let d=(t?"file":"dir")+e;const l=[];if(null!=o&&l.push(`mode=${wn(o)}`),null!=f){const{secs:e,nsecs:t}=f;l.push(`mtime=${e}`),null!=t&&l.push(`mtime-nsecs=${t}`)}if(l.length&&(d=`${d}?${l.join("&")}`),t){i.set(d,t,null!=n?encodeURIComponent(n):void 0);const e=s+t.size;r.push({name:n,start:s,end:e}),s=e}else{if(null==n)throw new Error("path or content or both must be set");i.set(d,new File([""],encodeURIComponent(n),{type:"application/x-directory"}))}a++}return{total:s,parts:r,headers:n,body:i}}gn.Data=(()=>{function e(e){if(this.blocksizes=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.Type=0,e.prototype.Data=bn.newBuffer([]),e.prototype.filesize=bn.Long?bn.Long.fromBits(0,0,!0):0,e.prototype.blocksizes=bn.emptyArray,e.prototype.hashType=bn.Long?bn.Long.fromBits(0,0,!0):0,e.prototype.fanout=bn.Long?bn.Long.fromBits(0,0,!0):0,e.prototype.mode=0,e.prototype.mtime=null,e.encode=function(e,t){if(t||(t=hn.create()),t.uint32(8).int32(e.Type),null!=e.Data&&Object.hasOwnProperty.call(e,"Data")&&t.uint32(18).bytes(e.Data),null!=e.filesize&&Object.hasOwnProperty.call(e,"filesize")&&t.uint32(24).uint64(e.filesize),null!=e.blocksizes&&e.blocksizes.length)for(var n=0;n<e.blocksizes.length;++n)t.uint32(32).uint64(e.blocksizes[n]);return null!=e.hashType&&Object.hasOwnProperty.call(e,"hashType")&&t.uint32(40).uint64(e.hashType),null!=e.fanout&&Object.hasOwnProperty.call(e,"fanout")&&t.uint32(48).uint64(e.fanout),null!=e.mode&&Object.hasOwnProperty.call(e,"mode")&&t.uint32(56).uint32(e.mode),null!=e.mtime&&Object.hasOwnProperty.call(e,"mtime")&&gn.UnixTime.encode(e.mtime,t.uint32(66).fork()).ldelim(),t},e.decode=function(e,t){e instanceof yn||(e=yn.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new gn.Data;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.Type=e.int32();break;case 2:r.Data=e.bytes();break;case 3:r.filesize=e.uint64();break;case 4:if(r.blocksizes&&r.blocksizes.length||(r.blocksizes=[]),2==(7&i))for(var a=e.uint32()+e.pos;e.pos<a;)r.blocksizes.push(e.uint64());else r.blocksizes.push(e.uint64());break;case 5:r.hashType=e.uint64();break;case 6:r.fanout=e.uint64();break;case 7:r.mode=e.uint32();break;case 8:r.mtime=gn.UnixTime.decode(e,e.uint32());break;default:e.skipType(7&i)}}if(!r.hasOwnProperty("Type"))throw bn.ProtocolError("missing required 'Type'",{instance:r});return r},e.fromObject=function(e){if(e instanceof gn.Data)return e;var t=new gn.Data;switch(e.Type){case"Raw":case 0:t.Type=0;break;case"Directory":case 1:t.Type=1;break;case"File":case 2:t.Type=2;break;case"Metadata":case 3:t.Type=3;break;case"Symlink":case 4:t.Type=4;break;case"HAMTShard":case 5:t.Type=5}if(null!=e.Data&&("string"==typeof e.Data?bn.base64.decode(e.Data,t.Data=bn.newBuffer(bn.base64.length(e.Data)),0):e.Data.length&&(t.Data=e.Data)),null!=e.filesize&&(bn.Long?(t.filesize=bn.Long.fromValue(e.filesize)).unsigned=!0:"string"==typeof e.filesize?t.filesize=parseInt(e.filesize,10):"number"==typeof e.filesize?t.filesize=e.filesize:"object"==typeof e.filesize&&(t.filesize=new bn.LongBits(e.filesize.low>>>0,e.filesize.high>>>0).toNumber(!0))),e.blocksizes){if(!Array.isArray(e.blocksizes))throw TypeError(".Data.blocksizes: array expected");t.blocksizes=[];for(var n=0;n<e.blocksizes.length;++n)bn.Long?(t.blocksizes[n]=bn.Long.fromValue(e.blocksizes[n])).unsigned=!0:"string"==typeof e.blocksizes[n]?t.blocksizes[n]=parseInt(e.blocksizes[n],10):"number"==typeof e.blocksizes[n]?t.blocksizes[n]=e.blocksizes[n]:"object"==typeof e.blocksizes[n]&&(t.blocksizes[n]=new bn.LongBits(e.blocksizes[n].low>>>0,e.blocksizes[n].high>>>0).toNumber(!0))}if(null!=e.hashType&&(bn.Long?(t.hashType=bn.Long.fromValue(e.hashType)).unsigned=!0:"string"==typeof e.hashType?t.hashType=parseInt(e.hashType,10):"number"==typeof e.hashType?t.hashType=e.hashType:"object"==typeof e.hashType&&(t.hashType=new bn.LongBits(e.hashType.low>>>0,e.hashType.high>>>0).toNumber(!0))),null!=e.fanout&&(bn.Long?(t.fanout=bn.Long.fromValue(e.fanout)).unsigned=!0:"string"==typeof e.fanout?t.fanout=parseInt(e.fanout,10):"number"==typeof e.fanout?t.fanout=e.fanout:"object"==typeof e.fanout&&(t.fanout=new bn.LongBits(e.fanout.low>>>0,e.fanout.high>>>0).toNumber(!0))),null!=e.mode&&(t.mode=e.mode>>>0),null!=e.mtime){if("object"!=typeof e.mtime)throw TypeError(".Data.mtime: object expected");t.mtime=gn.UnixTime.fromObject(e.mtime)}return t},e.toObject=function(e,t){t||(t={});var n={};if((t.arrays||t.defaults)&&(n.blocksizes=[]),t.defaults){if(n.Type=t.enums===String?"Raw":0,t.bytes===String?n.Data="":(n.Data=[],t.bytes!==Array&&(n.Data=bn.newBuffer(n.Data))),bn.Long){var r=new bn.Long(0,0,!0);n.filesize=t.longs===String?r.toString():t.longs===Number?r.toNumber():r}else n.filesize=t.longs===String?"0":0;bn.Long?(r=new bn.Long(0,0,!0),n.hashType=t.longs===String?r.toString():t.longs===Number?r.toNumber():r):n.hashType=t.longs===String?"0":0,bn.Long?(r=new bn.Long(0,0,!0),n.fanout=t.longs===String?r.toString():t.longs===Number?r.toNumber():r):n.fanout=t.longs===String?"0":0,n.mode=0,n.mtime=null}if(null!=e.Type&&e.hasOwnProperty("Type")&&(n.Type=t.enums===String?gn.Data.DataType[e.Type]:e.Type),null!=e.Data&&e.hasOwnProperty("Data")&&(n.Data=t.bytes===String?bn.base64.encode(e.Data,0,e.Data.length):t.bytes===Array?Array.prototype.slice.call(e.Data):e.Data),null!=e.filesize&&e.hasOwnProperty("filesize")&&("number"==typeof e.filesize?n.filesize=t.longs===String?String(e.filesize):e.filesize:n.filesize=t.longs===String?bn.Long.prototype.toString.call(e.filesize):t.longs===Number?new bn.LongBits(e.filesize.low>>>0,e.filesize.high>>>0).toNumber(!0):e.filesize),e.blocksizes&&e.blocksizes.length){n.blocksizes=[];for(var i=0;i<e.blocksizes.length;++i)"number"==typeof e.blocksizes[i]?n.blocksizes[i]=t.longs===String?String(e.blocksizes[i]):e.blocksizes[i]:n.blocksizes[i]=t.longs===String?bn.Long.prototype.toString.call(e.blocksizes[i]):t.longs===Number?new bn.LongBits(e.blocksizes[i].low>>>0,e.blocksizes[i].high>>>0).toNumber(!0):e.blocksizes[i]}return null!=e.hashType&&e.hasOwnProperty("hashType")&&("number"==typeof e.hashType?n.hashType=t.longs===String?String(e.hashType):e.hashType:n.hashType=t.longs===String?bn.Long.prototype.toString.call(e.hashType):t.longs===Number?new bn.LongBits(e.hashType.low>>>0,e.hashType.high>>>0).toNumber(!0):e.hashType),null!=e.fanout&&e.hasOwnProperty("fanout")&&("number"==typeof e.fanout?n.fanout=t.longs===String?String(e.fanout):e.fanout:n.fanout=t.longs===String?bn.Long.prototype.toString.call(e.fanout):t.longs===Number?new bn.LongBits(e.fanout.low>>>0,e.fanout.high>>>0).toNumber(!0):e.fanout),null!=e.mode&&e.hasOwnProperty("mode")&&(n.mode=e.mode),null!=e.mtime&&e.hasOwnProperty("mtime")&&(n.mtime=gn.UnixTime.toObject(e.mtime,t)),n},e.prototype.toJSON=function(){return this.constructor.toObject(this,mn.util.toJSONOptions)},e.DataType=function(){const e={},t=Object.create(e);return t[e[0]="Raw"]=0,t[e[1]="Directory"]=1,t[e[2]="File"]=2,t[e[3]="Metadata"]=3,t[e[4]="Symlink"]=4,t[e[5]="HAMTShard"]=5,t}(),e})(),gn.UnixTime=(()=>{function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.Seconds=bn.Long?bn.Long.fromBits(0,0,!1):0,e.prototype.FractionalNanoseconds=0,e.encode=function(e,t){return t||(t=hn.create()),t.uint32(8).int64(e.Seconds),null!=e.FractionalNanoseconds&&Object.hasOwnProperty.call(e,"FractionalNanoseconds")&&t.uint32(21).fixed32(e.FractionalNanoseconds),t},e.decode=function(e,t){e instanceof yn||(e=yn.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new gn.UnixTime;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.Seconds=e.int64();break;case 2:r.FractionalNanoseconds=e.fixed32();break;default:e.skipType(7&i)}}if(!r.hasOwnProperty("Seconds"))throw bn.ProtocolError("missing required 'Seconds'",{instance:r});return r},e.fromObject=function(e){if(e instanceof gn.UnixTime)return e;var t=new gn.UnixTime;return null!=e.Seconds&&(bn.Long?(t.Seconds=bn.Long.fromValue(e.Seconds)).unsigned=!1:"string"==typeof e.Seconds?t.Seconds=parseInt(e.Seconds,10):"number"==typeof e.Seconds?t.Seconds=e.Seconds:"object"==typeof e.Seconds&&(t.Seconds=new bn.LongBits(e.Seconds.low>>>0,e.Seconds.high>>>0).toNumber())),null!=e.FractionalNanoseconds&&(t.FractionalNanoseconds=e.FractionalNanoseconds>>>0),t},e.toObject=function(e,t){t||(t={});var n={};if(t.defaults){if(bn.Long){var r=new bn.Long(0,0,!1);n.Seconds=t.longs===String?r.toString():t.longs===Number?r.toNumber():r}else n.Seconds=t.longs===String?"0":0;n.FractionalNanoseconds=0}return null!=e.Seconds&&e.hasOwnProperty("Seconds")&&("number"==typeof e.Seconds?n.Seconds=t.longs===String?String(e.Seconds):e.Seconds:n.Seconds=t.longs===String?bn.Long.prototype.toString.call(e.Seconds):t.longs===Number?new bn.LongBits(e.Seconds.low>>>0,e.Seconds.high>>>0).toNumber():e.Seconds),null!=e.FractionalNanoseconds&&e.hasOwnProperty("FractionalNanoseconds")&&(n.FractionalNanoseconds=e.FractionalNanoseconds),n},e.prototype.toJSON=function(){return this.constructor.toObject(this,mn.util.toJSONOptions)},e})(),gn.Metadata=(()=>{function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.MimeType="",e.encode=function(e,t){return t||(t=hn.create()),null!=e.MimeType&&Object.hasOwnProperty.call(e,"MimeType")&&t.uint32(10).string(e.MimeType),t},e.decode=function(e,t){e instanceof yn||(e=yn.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new gn.Metadata;e.pos<n;){var i=e.uint32();i>>>3==1?r.MimeType=e.string():e.skipType(7&i)}return r},e.fromObject=function(e){if(e instanceof gn.Metadata)return e;var t=new gn.Metadata;return null!=e.MimeType&&(t.MimeType=String(e.MimeType)),t},e.toObject=function(e,t){t||(t={});var n={};return t.defaults&&(n.MimeType=""),null!=e.MimeType&&e.hasOwnProperty("MimeType")&&(n.MimeType=e.MimeType),n},e.prototype.toJSON=function(){return this.constructor.toObject(this,mn.util.toJSONOptions)},e})(),parseInt("0644",8),parseInt("0755",8);var An=n(2044);function In(...e){return(0,An.anySignal)(function(e){return e.filter(Boolean)}(e))}var Cn=n(5353);const En=Gt((e=>async function t(n,r={}){const i=In((new Cn.AbortController).signal,r.signal);let a;try{const t=await e.post("block/put",{signal:i,searchParams:Xt(r),...await Yn([n],0,r.headers)});a=await t.json()}catch(e){if("dag-pb"===r.format)return t(n,{...r,format:"protobuf"});if("dag-cbor"===r.format)return t(n,{...r,format:"cbor"});throw e}return u.CID.parse(a.Key)})),Sn=Gt((e=>async function*(t,n={}){Array.isArray(t)||(t=[t]);const r=await e.post("block/rm",{signal:n.signal,searchParams:Xt({arg:t.map((e=>e.toString())),"stream-channels":!0,...n}),headers:n.headers});for await(const e of r.ndjson())yield Nn(e)}));function Nn(e){const t={cid:u.CID.parse(e.Hash)};return e.Error&&(t.error=new Error(e.Error)),t}const kn=Gt((e=>async function(t,n={}){const r=await e.post("block/stat",{signal:n.signal,searchParams:Xt({arg:t.toString(),...n}),headers:n.headers}),i=await r.json();return{cid:u.CID.parse(i.Key),size:i.Size}}));function xn(e){return{get:nn(e),put:En(e),rm:Sn(e),stat:kn(e)}}const Dn=Gt((e=>async function(t,n={}){const r=await e.post("bootstrap/add",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers}),{Peers:i}=await r.json();return{Peers:i.map((e=>new Et.Multiaddr(e)))}})),Fn=Gt((e=>async function(t={}){const n=await e.post("bootstrap/rm",{signal:t.signal,searchParams:Xt({...t,all:!0}),headers:t.headers}),{Peers:r}=await n.json();return{Peers:r.map((e=>new Et.Multiaddr(e)))}})),Pn=Gt((e=>async function(t={}){const n=await e.post("bootstrap/list",{signal:t.signal,searchParams:Xt(t),headers:t.headers}),{Peers:r}=await n.json();return{Peers:r.map((e=>new Et.Multiaddr(e)))}})),Ln=Gt((e=>async function(t={}){const n=await e.post("bootstrap/add",{signal:t.signal,searchParams:Xt({...t,default:!0}),headers:t.headers}),{Peers:r}=await n.json();return{Peers:r.map((e=>new Et.Multiaddr(e)))}})),Rn=Gt((e=>async function(t,n={}){const r=await e.post("bootstrap/rm",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers}),{Peers:i}=await r.json();return{Peers:i.map((e=>new Et.Multiaddr(e)))}}));function Bn(e){return{add:Dn(e),clear:Fn(e),list:Pn(e),reset:Ln(e),rm:Rn(e)}}const Mn=Gt((e=>async function(t,n={}){const r=await e.post("config/profile/apply",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers}),i=await r.json();return{original:i.OldCfg,updated:i.NewCfg}}));function Vn(e){if(null==e)return e;const t=/^[A-Z]+$/;return Object.keys(e).reduce(((n,r)=>(t.test(r)?n[r.toLowerCase()]=e[r]:t.test(r[0])?n[r[0].toLowerCase()+r.slice(1)]=e[r]:n[r]=e[r],n)),{})}const On=Gt((e=>async function(t={}){const n=await e.post("config/profile/list",{signal:t.signal,searchParams:Xt(t),headers:t.headers});return(await n.json()).map((e=>Vn(e)))}));function Un(e){return{apply:Mn(e),list:On(e)}}const $n=Gt((e=>async(t,n={})=>{if(!t)throw new Error("key argument is required");const r=await e.post("config",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers});return(await r.json()).Value})),zn=Gt((e=>async(t={})=>{const n=await e.post("config/show",{signal:t.signal,searchParams:Xt({...t}),headers:t.headers});return await n.json()}));var jn=n(2217);const qn=Gt((e=>async(t,n={})=>{const r=In((new Cn.AbortController).signal,n.signal),i=await e.post("config/replace",{signal:r,searchParams:Xt(n),...await Yn([(0,jn.fromString)(JSON.stringify(t))],0,n.headers)});await i.text()})),Hn=Gt((e=>async(t,n,r={})=>{if("string"!=typeof t)throw new Error("Invalid key type");const i={...r,...Gn(t,n)},a=await e.post("config",{signal:r.signal,searchParams:Xt(i),headers:r.headers});await a.text()})),Gn=(e,t)=>{switch(typeof t){case"boolean":return{arg:[e,t.toString()],bool:!0};case"string":return{arg:[e,t]};default:return{arg:[e,JSON.stringify(t)],json:!0}}};function Wn(e){return{getAll:zn(e),get:$n(e),set:Hn(e),replace:qn(e),profiles:Un(e)}}const Jn=Gt((e=>async function*(t,n={}){const r=await e.post("dag/export",{signal:n.signal,searchParams:Xt({arg:t.toString()}),headers:n.headers});yield*r.iterator()}));async function*Kn(e,t,n,r,i){const a=async e=>{const t=await n.getCodec(e.code),a=await r(e,i);return t.decode(a)},s=t.split("/").filter(Boolean);let o=await a(e),f=e;for(;s.length;){const e=s.shift();if(!e)throw Jt(new Error(`Could not resolve path "${t}"`),"ERR_INVALID_PATH");if(!Object.prototype.hasOwnProperty.call(o,e))throw Jt(new Error(`no link named "${e}" under ${f}`),"ERR_NO_LINK");o=o[e],yield{value:o,remainderPath:s.join("/")};const n=u.CID.asCID(o);n&&(f=n,o=await a(o))}yield{value:o,remainderPath:""}}var Xn=n(2262),Zn=n(3093);const Qn=(e,t)=>{const n=Gt(((t,n)=>{const r=nn(n);return async(t,n={})=>{if(n.path){const i=n.localResolve?await Xn(Kn(t,n.path,e,r,n)):await Zn(Kn(t,n.path,e,r,n));if(!i)throw Jt(new Error("Not found"),"ERR_NOT_FOUND");return i}const i=await e.getCodec(t.code),a=await r(t,n);return{value:i.decode(a),remainderPath:""}}}));return n(t)},er=Gt((e=>async function*(t,n={}){const r=In((new Cn.AbortController).signal,n.signal),{headers:i,body:a}=await Yn(t,0,n.headers),s=await e.post("dag/import",{signal:r,headers:i,body:a,searchParams:Xt({"pin-roots":n.pinRoots})});for await(const{Root:e}of s.ndjson())if(void 0!==e){const{Cid:{"/":t},PinErrorMsg:n}=e;yield{root:{cid:u.CID.parse(t),pinErrorMsg:n}}}})),tr=(e,t)=>{const n=Gt((t=>async(n,r={})=>{const i={storeCodec:"dag-cbor",hashAlg:"sha2-256",...r};let a;if(i.inputCodec){if(!(n instanceof Uint8Array))throw new Error("Can only inputCodec on raw bytes that can be decoded");a=n}else a=(await e.getCodec(i.storeCodec)).encode(n),i.inputCodec=i.storeCodec;const s=In((new Cn.AbortController).signal,i.signal),o=await t.post("dag/put",{timeout:i.timeout,signal:s,searchParams:Xt(i),...await Yn([a],0,i.headers)}),f=await o.json();return u.CID.parse(f.Cid["/"])}));return n(t)},nr=Gt((e=>async(t,n={})=>{const r=await e.post("dag/resolve",{signal:n.signal,searchParams:Xt({arg:`${t}${n.path?`/${n.path}`.replace(/\/[/]+/g,"/"):""}`,...n}),headers:n.headers}),i=await r.json();return{cid:u.CID.parse(i.Cid["/"]),remainderPath:i.RemPath}}));function rr(e,t){return{export:Jn(t),get:Qn(e,t),import:er(t),put:tr(e,t),resolve:nr(t)}}const ir=e=>{if(0===e.Type)return{to:e.ID,name:"SENDING_QUERY",type:e.Type};if(1===e.Type)return{from:e.ID,name:"PEER_RESPONSE",type:e.Type,messageType:0,messageName:"PUT_VALUE",closer:(e.Responses||[]).map((({ID:e,Addrs:t})=>({id:e,multiaddrs:t.map((e=>new Et.Multiaddr(e)))}))),providers:(e.Responses||[]).map((({ID:e,Addrs:t})=>({id:e,multiaddrs:t.map((e=>new Et.Multiaddr(e)))})))};if(2===e.Type){let t={id:e.ID,multiaddrs:[]};return e.Responses&&e.Responses.length&&(t={id:e.Responses[0].ID,multiaddrs:e.Responses[0].Addrs.map((e=>new Et.Multiaddr(e)))}),{from:e.ID,name:"FINAL_PEER",type:e.Type,peer:t}}if(3===e.Type)return{from:e.ID,name:"QUERY_ERROR",type:e.Type,error:new Error(e.Extra)};if(4===e.Type)return{from:e.ID,name:"PROVIDER",type:e.Type,providers:e.Responses.map((({ID:e,Addrs:t})=>({id:e,multiaddrs:t.map((e=>new Et.Multiaddr(e)))})))};if(5===e.Type)return{from:e.ID,name:"VALUE",type:e.Type,value:(0,jn.fromString)(e.Extra,"base64pad")};if(6===e.Type){const t=e.Responses.map((({ID:e})=>e));if(!t.length)throw new Error("No peer found");return{name:"ADDING_PEER",type:e.Type,peer:t[0]}}if(7===e.Type)return{name:"DIALING_PEER",type:e.Type,peer:e.ID};throw new Error("Unknown DHT event type")},ar=Gt((e=>async function*(t,n={}){const r=await e.post("dht/findpeer",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers});for await(const e of r.ndjson())yield ir(e)})),sr=Gt((e=>async function*(t,n={}){const r=await e.post("dht/findprovs",{signal:n.signal,searchParams:Xt({arg:t.toString(),...n}),headers:n.headers});for await(const e of r.ndjson())yield ir(e)}));var or=n(2263);const fr=Gt((e=>async function*(t,n={}){const r=await e.post("dht/get",{signal:n.signal,searchParams:Xt({arg:t instanceof Uint8Array?(0,or.toString)(t):t.toString(),...n}),headers:n.headers});for await(const e of r.ndjson())yield ir(e)})),dr=Gt((e=>async function*(t,n={recursive:!1}){const r=Array.isArray(t)?t:[t],i=await e.post("dht/provide",{signal:n.signal,searchParams:Xt({arg:r.map((e=>e.toString())),...n}),headers:n.headers});for await(const e of i.ndjson())yield ir(e)})),lr=Gt((e=>async function*(t,n,r={}){const i=In((new Cn.AbortController).signal,r.signal),a=await e.post("dht/put",{signal:i,searchParams:Xt({arg:t instanceof Uint8Array?(0,or.toString)(t):t.toString(),...r}),...await Yn([n],0,r.headers)});for await(const e of a.ndjson())yield ir(e)})),cr=Gt((e=>async function*(t,n={}){const r=await e.post("dht/query",{signal:n.signal,searchParams:Xt({arg:t.toString(),...n}),headers:n.headers});for await(const e of r.ndjson())yield ir(e)}));function ur(e){return{findPeer:ar(e),findProvs:sr(e),get:fr(e),provide:dr(e),put:lr(e),query:cr(e)}}const pr=Gt((e=>async function(t={}){return(await e.post("diag/cmds",{signal:t.signal,searchParams:Xt(t),headers:t.headers})).json()})),mr=Gt((e=>async function(t={}){return(await e.post("diag/net",{signal:t.signal,searchParams:Xt(t),headers:t.headers})).json()})),yr=Gt((e=>async function(t={}){return(await e.post("diag/sys",{signal:t.signal,searchParams:Xt(t),headers:t.headers})).json()}));function hr(e){return{cmds:pr(e),net:mr(e),sys:yr(e)}}const br=Gt((e=>async function(t,n,r={}){const i=await e.post("files/chmod",{signal:r.signal,searchParams:Xt({arg:t,mode:n,...r}),headers:r.headers});await i.text()})),gr=Gt((e=>async function(t,n,r={}){const i=Array.isArray(t)?t:[t],a=await e.post("files/cp",{signal:r.signal,searchParams:Xt({arg:i.concat(n).map((e=>u.CID.asCID(e)?`/ipfs/${e}`:e)),...r}),headers:r.headers});await a.text()})),_r=Gt((e=>async function(t,n={}){if(!t||"string"!=typeof t)throw new Error("ipfs.files.flush requires a path");const r=await e.post("files/flush",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers}),i=await r.json();return u.CID.parse(i.Cid)}));function Tr(e){const t=Vn(e);return Object.prototype.hasOwnProperty.call(t,"mode")&&(t.mode=parseInt(t.mode,8)),Object.prototype.hasOwnProperty.call(t,"mtime")&&(t.mtime={secs:t.mtime,nsecs:t.mtimeNsecs||0},delete t.mtimeNsecs),t}const vr=Gt((e=>async function*(t,n={}){if(!t)throw new Error("ipfs.files.ls requires a path");const r=await e.post("files/ls",{signal:n.signal,searchParams:Xt({arg:u.CID.asCID(t)?`/ipfs/${t}`:t,long:!0,...n,stream:!0}),headers:n.headers});for await(const e of r.ndjson())if("Entries"in e)for(const t of e.Entries||[])yield wr(Tr(t));else yield wr(Tr(e))}));function wr(e){return e.hash&&(e.cid=u.CID.parse(e.hash)),delete e.hash,e.type=1===e.type?"directory":"file",e}const Yr=Gt((e=>async function(t,n={}){const r=await e.post("files/mkdir",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers});await r.text()})),Ar=Gt((e=>async function(t,n,r={}){Array.isArray(t)||(t=[t]);const i=await e.post("files/mv",{signal:r.signal,searchParams:Xt({arg:t.concat(n),...r}),headers:r.headers});await i.text()}));var Ir=n(590);const Cr=Gt((e=>async function*(t,n={}){const r=await e.post("files/read",{signal:n.signal,searchParams:Xt({arg:t,count:n.length,...n}),headers:n.headers});yield*Ir(r.body)})),Er=Gt((e=>async function(t,n={}){const r=await e.post("files/rm",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers}),i=await r.text();if(""!==i){const e=new Pt.HTTPError(r);throw e.message=i,e}})),Sr=Gt((e=>async function(t,n={}){const r=await e.post("files/stat",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers}),i=await r.json();return i.WithLocality=i.WithLocality||!1,(a=Tr(i)).cid=u.CID.parse(a.hash),delete a.hash,a;var a})),Nr=Gt((e=>async function(t,n={}){const r=await e.post("files/touch",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers});await r.text()})),kr=Gt((e=>async function(t,n,r={}){const i=In((new Cn.AbortController).signal,r.signal),a=await e.post("files/write",{signal:i,searchParams:Xt({arg:t,streamChannels:!0,count:r.length,...r}),...await Yn([{content:n,path:"arg",mode:Wt(r.mode),mtime:Kt(r.mtime)}],0,r.headers)});await a.text()}));function xr(e){return{chmod:br(e),cp:gr(e),flush:_r(e),ls:vr(e),mkdir:Yr(e),mv:Ar(e),read:Cr(e),rm:Er(e),stat:Sr(e),touch:Nr(e),write:kr(e)}}const Dr=Gt((e=>async(e,t,n={})=>{throw Jt(new Error("Not implemented"),"ERR_NOT_IMPLEMENTED")})),Fr=Gt((e=>async function(t,n={type:"rsa",size:2048}){const r=await e.post("key/gen",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers});return Vn(await r.json())})),Pr=Gt((e=>async function(t,n,r,i={}){const a=await e.post("key/import",{signal:i.signal,searchParams:Xt({arg:t,pem:n,password:r,...i}),headers:i.headers});return Vn(await a.json())})),Lr=Gt((e=>async(e,t={})=>{throw Jt(new Error("Not implemented"),"ERR_NOT_IMPLEMENTED")})),Rr=Gt((e=>async function(t={}){const n=await e.post("key/list",{signal:t.signal,searchParams:Xt(t),headers:t.headers});return((await n.json()).Keys||[]).map((e=>Vn(e)))})),Br=Gt((e=>async function(t,n,r={}){const i=await e.post("key/rename",{signal:r.signal,searchParams:Xt({arg:[t,n],...r}),headers:r.headers});return Vn(await i.json())})),Mr=Gt((e=>async function(t,n={}){const r=await e.post("key/rm",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers});return Vn((await r.json()).Keys[0])}));function Vr(e){return{export:Dr(e),gen:Fr(e),import:Pr(e),info:Lr(e),list:Rr(e),rename:Br(e),rm:Mr(e)}}const Or=Gt((e=>async function(t,n,r={}){const i=await e.post("log/level",{signal:r.signal,searchParams:Xt({arg:[t,n],...r}),headers:r.headers});return Vn(await i.json())})),Ur=Gt((e=>async function(t={}){const n=await e.post("log/ls",{signal:t.signal,searchParams:Xt(t),headers:t.headers});return(await n.json()).Strings})),$r=Gt((e=>async function*(t={}){const n=await e.post("log/tail",{signal:t.signal,searchParams:Xt(t),headers:t.headers});yield*n.ndjson()}));function zr(e){return{level:Or(e),ls:Ur(e),tail:$r(e)}}const jr=Gt((e=>async function(t,n={}){const r=await e.post("name/publish",{signal:n.signal,searchParams:Xt({arg:`${t}`,...n}),headers:n.headers});return Vn(await r.json())})),qr=Gt((e=>async function*(t,n={}){const r=await e.post("name/resolve",{signal:n.signal,searchParams:Xt({arg:t,stream:!0,...n}),headers:n.headers});for await(const e of r.ndjson())yield e.Path})),Hr=Gt((e=>async function(t,n={}){const r=await e.post("name/pubsub/cancel",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers});return Vn(await r.json())})),Gr=Gt((e=>async function(t={}){const n=await e.post("name/pubsub/state",{signal:t.signal,searchParams:Xt(t),headers:t.headers});return Vn(await n.json())})),Wr=Gt((e=>async function(t={}){const n=await e.post("name/pubsub/subs",{signal:t.signal,searchParams:Xt(t),headers:t.headers});return(await n.json()).Strings||[]}));function Jr(e){return{cancel:Hr(e),state:Gr(e),subs:Wr(e)}}function Kr(e){return{publish:jr(e),resolve:qr(e),pubsub:Jr(e)}}const Xr=Gt((e=>async function(t,n={}){const r=await e.post("object/data",{signal:n.signal,searchParams:Xt({arg:`${t instanceof Uint8Array?u.CID.decode(t):t}`,...n}),headers:n.headers}),i=await r.arrayBuffer();return new Uint8Array(i,0,i.byteLength)})),Zr=Gt((e=>async function(t,n={}){const r=await e.post("object/get",{signal:n.signal,searchParams:Xt({arg:`${t instanceof Uint8Array?u.CID.decode(t):t}`,dataEncoding:"base64",...n}),headers:n.headers}),i=await r.json();return{Data:(0,jn.fromString)(i.Data,"base64pad"),Links:(i.Links||[]).map((e=>({Name:e.Name,Hash:u.CID.parse(e.Hash),Tsize:e.Size})))}})),Qr=Gt((e=>async function(t,n={}){const r=await e.post("object/links",{signal:n.signal,searchParams:Xt({arg:`${t instanceof Uint8Array?u.CID.decode(t):t}`,...n}),headers:n.headers});return((await r.json()).Links||[]).map((e=>({Name:e.Name,Tsize:e.Size,Hash:u.CID.parse(e.Hash)})))})),ei=Gt((e=>async function(t={}){const n=await e.post("object/new",{signal:t.signal,searchParams:Xt({arg:t.template,...t}),headers:t.headers}),{Hash:r}=await n.json();return u.CID.parse(r)})),ti=(e,t)=>{const n=Gt((n=>{const r=tr(e,t);return async function(e,t={}){return r(e,{...t,storeCodec:"dag-pb",hashAlg:"sha2-256",version:1})}}));return n(t)},ni=Gt((e=>async function(t,n={}){const r=await e.post("object/stat",{signal:n.signal,searchParams:Xt({arg:`${t}`,...n}),headers:n.headers}),i=await r.json();return{...i,Hash:u.CID.parse(i.Hash)}})),ri=Gt((e=>async function(t,n,r={}){const i=await e.post("object/patch/add-link",{signal:r.signal,searchParams:Xt({arg:[`${t}`,n.Name||n.name||"",(n.Hash||n.cid||"").toString()||null],...r}),headers:r.headers}),{Hash:a}=await i.json();return u.CID.parse(a)})),ii=Gt((e=>async function(t,n,r={}){const i=In((new Cn.AbortController).signal,r.signal),a=await e.post("object/patch/append-data",{signal:i,searchParams:Xt({arg:`${t}`,...r}),...await Yn([n],0,r.headers)}),{Hash:s}=await a.json();return u.CID.parse(s)})),ai=Gt((e=>async function(t,n,r={}){const i=await e.post("object/patch/rm-link",{signal:r.signal,searchParams:Xt({arg:[`${t}`,n.Name||n.name||null],...r}),headers:r.headers}),{Hash:a}=await i.json();return u.CID.parse(a)})),si=Gt((e=>async function(t,n,r={}){const i=In((new Cn.AbortController).signal,r.signal),a=await e.post("object/patch/set-data",{signal:i,searchParams:Xt({arg:[`${t}`],...r}),...await Yn([n],0,r.headers)}),{Hash:s}=await a.json();return u.CID.parse(s)}));function oi(e){return{addLink:ri(e),appendData:ii(e),rmLink:ai(e),setData:si(e)}}function fi(e,t){return{data:Xr(t),get:Zr(t),links:Qr(t),new:ei(t),put:ti(e,t),stat:ni(t),patch:oi(t)}}async function*di(e){if(null==e)throw Jt(new Error(`Unexpected input: ${e}`),"ERR_UNEXPECTED_INPUT");const t=u.CID.asCID(e);if(t)yield li({cid:t});else{if(!(e instanceof String||"string"==typeof e)){if(null!=e.cid||null!=e.path)return yield li(e);if(Symbol.iterator in e){const t=e[Symbol.iterator](),n=t.next();if(n.done)return t;if(u.CID.asCID(n.value)||n.value instanceof String||"string"==typeof n.value){yield li({cid:n.value});for(const e of t)yield li({cid:e});return}if(null!=n.value.cid||null!=n.value.path){yield li(n.value);for(const e of t)yield li(e);return}throw Jt(new Error("Unexpected input: "+typeof e),"ERR_UNEXPECTED_INPUT")}if(Symbol.asyncIterator in e){const t=e[Symbol.asyncIterator](),n=await t.next();if(n.done)return t;if(u.CID.asCID(n.value)||n.value instanceof String||"string"==typeof n.value){yield li({cid:n.value});for await(const e of t)yield li({cid:e});return}if(null!=n.value.cid||null!=n.value.path){yield li(n.value);for await(const e of t)yield li(e);return}throw Jt(new Error("Unexpected input: "+typeof e),"ERR_UNEXPECTED_INPUT")}throw Jt(new Error("Unexpected input: "+typeof e),"ERR_UNEXPECTED_INPUT")}yield li({path:e})}}function li(e){const t=e.cid||`${e.path}`;if(!t)throw Jt(new Error("Unexpected input: Please path either a CID or an IPFS path"),"ERR_UNEXPECTED_INPUT");const n={path:t,recursive:!1!==e.recursive};return null!=e.metadata&&(n.metadata=e.metadata),n}const ci=Gt((e=>async function*(t,n={}){for await(const{path:r,recursive:i,metadata:a}of di(t)){const t=await e.post("pin/add",{signal:n.signal,searchParams:Xt({...n,arg:r,recursive:i,metadata:a?JSON.stringify(a):void 0,stream:!0}),headers:n.headers});for await(const e of t.ndjson())if(e.Pins)for(const t of e.Pins)yield u.CID.parse(t);else yield u.CID.parse(e)}}));function ui(e){const t=ci(e);return Gt((()=>async function(e,n={}){return Zn(t([{path:e,...n}],n))}))(e)}function pi(e,t,n){const r={type:e,cid:u.CID.parse(t)};return n&&(r.metadata=n),r}const mi=Gt((e=>async function*(t={}){let n=[];t.paths&&(n=Array.isArray(t.paths)?t.paths:[t.paths]);const r=await e.post("pin/ls",{signal:t.signal,searchParams:Xt({...t,arg:n.map((e=>`${e}`)),stream:!0}),headers:t.headers});for await(const e of r.ndjson()){if(e.Keys){for(const t of Object.keys(e.Keys))yield pi(e.Keys[t].Type,t,e.Keys[t].Metadata);return}yield pi(e.Type,e.Cid,e.Metadata)}})),yi=Gt((e=>async function*(t,n={}){for await(const{path:r,recursive:i}of di(t)){const t=new URLSearchParams(n.searchParams);t.append("arg",`${r}`),null!=i&&t.set("recursive",String(i));const a=await e.post("pin/rm",{signal:n.signal,headers:n.headers,searchParams:Xt({...n,arg:`${r}`,recursive:i})});for await(const e of a.ndjson())e.Pins?yield*e.Pins.map((e=>u.CID.parse(e))):yield u.CID.parse(e)}})),hi=e=>{const t=yi(e);return Gt((()=>async function(e,n={}){return Zn(t([{path:e,...n}],n))}))(e)},bi=({Name:e,Status:t,Cid:n})=>({cid:u.CID.parse(n),name:e,status:t}),gi=e=>{if("string"==typeof e&&""!==e)return e;throw new TypeError("service name must be passed")},_i=e=>{if(u.CID.asCID(e))return e.toString();throw new TypeError("CID instance expected instead of "+typeof e)},Ti=({service:e,cid:t,name:n,status:r,all:i})=>{const a=Xt({service:gi(e),name:n,force:!!i||void 0});if(t)for(const e of t)a.append("cid",_i(e));if(r)for(const e of r)a.append("status",e);return a},vi=({cid:e,service:t,background:n,name:r,origins:i})=>{const a=Xt({arg:_i(e),service:gi(t),name:r,background:!!n||void 0});if(i)for(const e of i)a.append("origin",e.toString());return a};function wi(e){return async function(t,{timeout:n,signal:r,headers:i,...a}){const s=await e.post("pin/remote/add",{timeout:n,signal:r,headers:i,searchParams:vi({cid:t,...a})});return bi(await s.json())}}function Yi(e){return async function*({timeout:t,signal:n,headers:r,...i}){const a=await e.post("pin/remote/ls",{timeout:t,signal:n,headers:r,searchParams:Ti(i)});for await(const e of a.ndjson())yield bi(e)}}function Ai(e){return async function({timeout:t,signal:n,headers:r,...i}){await e.post("pin/remote/rm",{timeout:t,signal:n,headers:r,searchParams:Ti({...i,all:!1})})}}function Ii(e){return async function({timeout:t,signal:n,headers:r,...i}){await e.post("pin/remote/rm",{timeout:t,signal:n,headers:r,searchParams:Ti({...i,all:!0})})}}function Ci(e){const t=String(e);if("undefined"===t)throw Error("endpoint is required");return"/"===t[t.length-1]?t.slice(0,-1):t}function Ei(e){return{service:e.Service,endpoint:new URL(e.ApiEndpoint),...e.Stat&&{stat:Si(e.Stat)}}}function Si(e){switch(e.Status){case"valid":{const{Pinning:t,Pinned:n,Queued:r,Failed:i}=e.PinCount;return{status:"valid",pinCount:{queued:r,pinning:t,pinned:n,failed:i}}}case"invalid":return{status:"invalid"};default:return{status:e.Status}}}function Ni(e){return async function(t,n){const{endpoint:r,key:i,headers:a,timeout:s,signal:o}=n;await e.post("pin/remote/service/add",{timeout:s,signal:o,searchParams:Xt({arg:[t,Ci(r),i]}),headers:a})}}function ki(e){return async function(t={}){const{stat:n,headers:r,timeout:i,signal:a}=t,s=await e.post("pin/remote/service/ls",{timeout:i,signal:a,headers:r,searchParams:!0===n?Xt({stat:n}):void 0}),{RemoteServices:o}=await s.json();return o.map(Ei)}}function xi(e){return async function(t,n={}){await e.post("pin/remote/service/rm",{signal:n.signal,headers:n.headers,searchParams:Xt({arg:t})})}}function Di(e){const t=new Ht(e);return{add:Ni(t),ls:ki(t),rm:xi(t)}}function Fi(e){const t=new Ht(e);return{add:wi(t),ls:Yi(t),rm:Ai(t),rmAll:Ii(t),service:Di(e)}}function Pi(e){return{addAll:ci(e),add:ui(e),ls:mi(e),rmAll:yi(e),rm:hi(e),remote:Fi(e)}}const Li=e=>Array.isArray(e)?e.map(Ri):e,Ri=e=>(0,or.toString)(Bi(e)),Bi=e=>pt.base64url.decode(e),Mi=e=>pt.base64url.encode((0,jn.fromString)(e)),Vi=Gt((e=>async function(t={}){const{Strings:n}=await(await e.post("pubsub/ls",{signal:t.signal,searchParams:Xt(t),headers:t.headers})).json();return Li(n)||[]})),Oi=Gt((e=>async function(t,n={}){const r=await e.post("pubsub/peers",{signal:n.signal,searchParams:Xt({arg:Mi(t),...n}),headers:n.headers}),{Strings:i}=await r.json();return i||[]})),Ui=Gt((e=>async function(t,n,r={}){const i=Xt({arg:Mi(t),...r}),a=In((new Cn.AbortController).signal,r.signal),s=await e.post("pubsub/pub",{signal:a,searchParams:i,...await Yn([n],0,r.headers)});await s.text()})),$i=Ft("ipfs-http-client:pubsub:subscribe"),zi=(e,t)=>Gt((e=>async function(n,r,i={}){let a,s;i.signal=t.subscribe(n,r,i.signal);const o=new Promise(((e,t)=>{a=e,s=t})),f=setTimeout((()=>a()),1e3);return e.post("pubsub/sub",{signal:i.signal,searchParams:Xt({arg:Mi(n),...i}),headers:i.headers}).catch((e=>{t.unsubscribe(n,r),s(e)})).then((e=>{clearTimeout(f),e&&(async function(e,{onMessage:t,onEnd:n,onError:r}){r=r||$i;try{for await(const n of e.ndjson())try{if(!n.from)continue;t({from:n.from,data:Bi(n.data),seqno:Bi(n.seqno),topicIDs:Li(n.topicIDs)})}catch(e){e.message=`Failed to parse pubsub message: ${e.message}`,r(e,!1,n)}}catch(e){ji(e)||r(e,!0)}finally{n()}}(e,{onMessage:r,onEnd:()=>t.unsubscribe(n,r),onError:i.onError}),a())})),o}))(e),ji=e=>{switch(e.type){case"aborted":case"abort":return!0;default:return"AbortError"===e.name}};class qi{constructor(){this._subs=new Map}subscribe(e,t,n){const r=this._subs.get(e)||[];if(r.find((e=>e.handler===t)))throw new Error(`Already subscribed to ${e} with this handler`);const i=new Cn.AbortController;return this._subs.set(e,[{handler:t,controller:i}].concat(r)),n&&n.addEventListener("abort",(()=>this.unsubscribe(e,t))),i.signal}unsubscribe(e,t){const n=this._subs.get(e)||[];let r;t?(this._subs.set(e,n.filter((e=>e.handler!==t))),r=n.filter((e=>e.handler===t))):(this._subs.set(e,[]),r=n),(this._subs.get(e)||[]).length||this._subs.delete(e),r.forEach((e=>e.controller.abort()))}}function Hi(e){const t=new qi;return{ls:Vi(e),peers:Oi(e),publish:Ui(e),subscribe:zi(e,t),unsubscribe:(n=t,async function(e,t){n.unsubscribe(e,t)})};var n}const Gi=Gt((e=>async function*(t={}){const n=await e.post("refs/local",{signal:t.signal,transform:Vn,searchParams:Xt(t),headers:t.headers});yield*n.ndjson()})),Wi=Gt(((e,t)=>Object.assign((async function*(t,n={}){const r=Array.isArray(t)?t:[t],i=await e.post("refs",{signal:n.signal,searchParams:Xt({arg:r.map((e=>`${e instanceof Uint8Array?u.CID.decode(e):e}`)),...n}),headers:n.headers,transform:Vn});yield*i.ndjson()}),{local:Gi(t)}))),Ji=Gt((e=>async function*(t={}){const n=await e.post("repo/gc",{signal:t.signal,searchParams:Xt(t),headers:t.headers,transform:e=>({err:e.Error?new Error(e.Error):null,cid:(e.Key||{})["/"]?u.CID.parse(e.Key["/"]):null})});yield*n.ndjson()})),Ki=Gt((e=>async function(t={}){const n=await e.post("repo/stat",{signal:t.signal,searchParams:Xt(t),headers:t.headers}),r=await n.json();return{numObjects:BigInt(r.NumObjects),repoSize:BigInt(r.RepoSize),repoPath:r.RepoPath,version:r.Version,storageMax:BigInt(r.StorageMax)}})),Xi=Gt((e=>async function(t={}){return(await(await e.post("repo/version",{signal:t.signal,searchParams:Xt(t),headers:t.headers})).json()).Version}));function Zi(e){return{gc:Ji(e),stat:Ki(e),version:Xi(e)}}const Qi=Gt((e=>async function*(t={}){const n=await e.post("stats/bw",{signal:t.signal,searchParams:Xt(t),headers:t.headers,transform:e=>({totalIn:BigInt(e.TotalIn),totalOut:BigInt(e.TotalOut),rateIn:parseFloat(e.RateIn),rateOut:parseFloat(e.RateOut)})});yield*n.ndjson()}));function ea(e){return{bitswap:en(e),repo:Ki(e),bw:Qi(e)}}const ta=Gt((e=>async function(t={}){const n=await e.post("swarm/addrs",{signal:t.signal,searchParams:Xt(t),headers:t.headers}),{Addrs:r}=await n.json();return Object.keys(r).map((e=>({id:e,addrs:(r[e]||[]).map((e=>new Et.Multiaddr(e)))})))})),na=Gt((e=>async function(t,n={}){const r=await e.post("swarm/connect",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers}),{Strings:i}=await r.json();return i||[]})),ra=Gt((e=>async function(t,n={}){const r=await e.post("swarm/disconnect",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers}),{Strings:i}=await r.json();return i||[]})),ia=Gt((e=>async function(t={}){const n=await e.post("swarm/addrs/local",{signal:t.signal,searchParams:Xt(t),headers:t.headers}),{Strings:r}=await n.json();return(r||[]).map((e=>new Et.Multiaddr(e)))})),aa=Gt((e=>async function(t={}){const n=await e.post("swarm/peers",{signal:t.signal,searchParams:Xt(t),headers:t.headers}),{Peers:r}=await n.json();return(r||[]).map((e=>({addr:new Et.Multiaddr(e.Addr),peer:e.Peer,muxer:e.Muxer,latency:e.Latency,streams:e.Streams,direction:null==e.Direction?void 0:0===e.Direction?"inbound":"outbound"})))}));function sa(e){return{addrs:ta(e),connect:na(e),disconnect:ra(e),localAddrs:ia(e),peers:aa(e)}}const oa=Gt((e=>async function*(t,n={}){const r=In((new Cn.AbortController).signal,n.signal),{headers:i,body:a,total:s,parts:o}=await Yn(t,0,n.headers),[f,d]="function"==typeof n.progress?fa(s,o,n.progress):[void 0,void 0],l=await e.post("add",{searchParams:Xt({"stream-channels":!0,...n,progress:Boolean(f)}),onUploadProgress:d,signal:r,headers:i,body:a});for await(let e of l.ndjson())e=Vn(e),void 0!==e.hash?yield la(e):f&&f(e.bytes||0,e.name)})),fa=(e,t,n)=>t?[void 0,da(e,t,n)]:[n,void 0],da=(e,t,n)=>{let r=0;const i=t.length;return({loaded:a,total:s})=>{const o=Math.floor(a/s*e);for(;r<i;){const{start:e,end:i,name:a}=t[r];if(o<i){n(o-e,a);break}n(i-e,a),r+=1}}};function la({name:e,hash:t,size:n,mode:r,mtime:i,mtimeNsecs:a}){const s={path:e,cid:u.CID.parse(t),size:parseInt(n)};return null!=r&&(s.mode=parseInt(r,8)),null!=i&&(s.mtime={secs:i,nsecs:a||0}),s}var ca=n(3294);async function*ua(e){yield e}async function pa(e){if(on(e))return ua(ma(e));if("string"==typeof e||e instanceof String)return ua(ma(e.toString()));if(fn(e))return ca(e);if(ln(e)&&(e=an(e)),Symbol.iterator in e||Symbol.asyncIterator in e){const t=rn(e),{value:n,done:r}=await t.peek();if(r)return ua(new Uint8Array(0));if(t.push(n),Number.isInteger(n))return ua(Uint8Array.from(await sn(t)));if(on(n)||"string"==typeof n||n instanceof String)return pn(t,ma)}throw Jt(new Error(`Unexpected input: ${e}`),"ERR_UNEXPECTED_INPUT")}function ma(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):e instanceof ArrayBuffer?new Uint8Array(e):Array.isArray(e)?Uint8Array.from(e):(0,jn.fromString)(e.toString())}async function ya(e,t){const{path:n,mode:r,mtime:i,content:a}=e,s={path:n||"",mode:_n(r),mtime:Tn(i)};return a?s.content=await t(a):n||(s.content=await t(e)),s}function ha(e){const t=oa(e);return Gt((()=>async function(e,n={}){return await Zn(t(function(e){return async function*(e,t){if(null==e)throw Jt(new Error(`Unexpected input: ${e}`),"ERR_UNEXPECTED_INPUT");if("string"==typeof e||e instanceof String)yield ya(e.toString(),t);else if(on(e)||fn(e))yield ya(e,t);else{if(ln(e)&&(e=an(e)),Symbol.iterator in e||Symbol.asyncIterator in e){const n=rn(e),{value:r,done:i}=await n.peek();if(i)return void(yield{content:[]});if(n.push(r),Number.isInteger(r)||on(r)||"string"==typeof r||r instanceof String)return void(yield ya(n,t));throw Jt(new Error("Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead"),"ERR_UNEXPECTED_INPUT")}if(!dn(e))throw Jt(new Error('Unexpected input: cannot convert "'+typeof e+'" into ImportCandidate'),"ERR_UNEXPECTED_INPUT");yield ya(e,t)}}(e,pa)}(e),n))}))(e)}const ba=Gt((e=>async function*(t,n={}){const r=await e.post("cat",{signal:n.signal,searchParams:Xt({arg:t.toString(),...n}),headers:n.headers});yield*r.iterator()})),ga=Gt((e=>async(t={})=>(await e.post("commands",{signal:t.signal,searchParams:Xt(t),headers:t.headers})).json())),_a=Gt((e=>async(t,n={})=>{const r=await e.post("dns",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers});return(await r.json()).Path})),Ta=Gt((e=>()=>{const t=new URL(e.opts.base||"");return{host:t.hostname,port:t.port,protocol:t.protocol,pathname:t.pathname,"api-path":t.pathname}})),va=Gt((e=>async function*(t,n={}){const r={arg:`${t instanceof Uint8Array?u.CID.decode(t):t}`,...n};r.compressionLevel&&(r["compression-level"]=r.compressionLevel,delete r.compressionLevel);const i=await e.post("get",{signal:n.signal,searchParams:Xt(r),headers:n.headers});yield*i.iterator()})),wa=Gt((e=>async function(t={}){const n=await e.post("id",{signal:t.signal,searchParams:Xt({arg:t.peerId?t.peerId.toString():void 0,...t}),headers:t.headers}),r={...Vn(await n.json())};return r.addresses&&(r.addresses=r.addresses.map((e=>new Et.Multiaddr(e)))),r})),Ya=e=>{const t=wa(e);return async function(e={}){const n=await t(e);return Boolean(n&&n.addresses&&n.addresses.length)}},Aa=Gt(((e,t)=>async function*(n,r={}){const i=`${n instanceof Uint8Array?u.CID.decode(n):n}`;async function a(e){let n=e.Hash;if(n.includes("/")){const e=n.startsWith("/ipfs/")?n:`/ipfs/${n}`;n=(await Sr(t)(e)).cid}else n=u.CID.parse(n);const r={name:e.Name,path:i+(e.Name?`/${e.Name}`:""),size:e.Size,cid:n,type:Ia(e)};return e.Mode&&(r.mode=parseInt(e.Mode,8)),void 0!==e.Mtime&&null!==e.Mtime&&(r.mtime={secs:e.Mtime},void 0!==e.MtimeNsecs&&null!==e.MtimeNsecs&&(r.mtime.nsecs=e.MtimeNsecs)),r}const s=await e.post("ls",{signal:r.signal,searchParams:Xt({arg:i,...r}),headers:r.headers});for await(let e of s.ndjson()){if(e=e.Objects,!e)throw new Error("expected .Objects in results");if(e=e[0],!e)throw new Error("expected one array in results.Objects");const t=e.Links;if(!Array.isArray(t))throw new Error("expected one array in results.Objects[0].Links");if(!t.length)return void(yield a(e));yield*t.map(a)}}));function Ia(e){switch(e.Type){case 1:case 5:return"dir";default:return"file"}}const Ca=Gt((e=>async function(t={}){const n=await e.post("dns",{signal:t.signal,searchParams:Xt(t),headers:t.headers});return Vn(await n.json())})),Ea=Gt((e=>async function*(t,n={}){const r=await e.post("ping",{signal:n.signal,searchParams:Xt({arg:`${t}`,...n}),headers:n.headers,transform:Vn});yield*r.ndjson()})),Sa=Gt((e=>async function(t,n={}){const r=await e.post("resolve",{signal:n.signal,searchParams:Xt({arg:t,...n}),headers:n.headers}),{Path:i}=await r.json();return i})),Na=Gt((e=>async(e={})=>{throw Jt(new Error("Not implemented"),"ERR_NOT_IMPLEMENTED")})),ka=Gt((e=>async function(t={}){const n=await e.post("shutdown",{signal:t.signal,searchParams:Xt(t),headers:t.headers});await n.text()})),xa=Gt((e=>async function(t={}){const n=await e.post("version",{signal:t.signal,searchParams:Xt(t),headers:t.headers});return{...Vn(await n.json()),"ipfs-http-client":"1.0.0"}}));var Da=n(2611),Fa=n(6953);function Pa(e={}){const t={name:It.identity.name,code:It.identity.code,encode:e=>e,decode:e=>e},n=Object.values(Ct.gh);(e.ipld&&e.ipld.bases?e.ipld.bases:[]).forEach((e=>n.push(e)));const s=new o({bases:n,loadBase:e.ipld&&e.ipld.loadBase}),f=Object.values(Ct.QB);[r,i,a,t].concat(e.ipld&&e.ipld.codecs||[]).forEach((e=>f.push(e)));const l=new d({codecs:f,loadCodec:e.ipld&&e.ipld.loadCodec}),u=Object.values(Ct.kq);(e.ipld&&e.ipld.hashers?e.ipld.hashers:[]).forEach((e=>u.push(e)));const p=new c({hashers:u,loadHasher:e.ipld&&e.ipld.loadHasher});var m;return{add:ha(e),addAll:oa(e),bitswap:(m=e,{wantlist:Zt(m),wantlistForPeer:Qt(m),unwant:tn(m),stat:en(m)}),block:xn(e),bootstrap:Bn(e),cat:ba(e),commands:ga(e),config:Wn(e),dag:rr(l,e),dht:ur(e),diag:hr(e),dns:_a(e),files:xr(e),get:va(e),getEndpointConfig:Ta(e),id:wa(e),isOnline:Ya(e),key:Vr(e),log:zr(e),ls:Aa(e),mount:Ca(e),name:Kr(e),object:fi(l,e),pin:Pi(e),ping:Ea(e),pubsub:Hi(e),refs:Wi(e),repo:Zi(e),resolve:Sa(e),start:Na(e),stats:ea(e),stop:ka(e),swarm:sa(e),version:xa(e),bases:s,codecs:l,hashers:p}}const La=Da},9880:(e,t,n)=>{"use strict";n.d(t,{kU:()=>l,Dp:()=>d,ET:()=>c});var r=n(5934);class i{constructor(e,t,n){this.name=e,this.prefix=t,this.baseEncode=n}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class a{constructor(e,t,n){this.name=e,this.prefix=t,this.baseDecode=n}decode(e){if("string"==typeof e){if(e[0]===this.prefix)return this.baseDecode(e.slice(1));throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)}throw Error("Can only multibase decode strings")}or(e){return o(this,e)}}class s{constructor(e){this.decoders=e}or(e){return o(this,e)}decode(e){const t=e[0],n=this.decoders[t];if(n)return n.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const o=(e,t)=>new s({...e.decoders||{[e.prefix]:e},...t.decoders||{[t.prefix]:t}});class f{constructor(e,t,n,r){this.name=e,this.prefix=t,this.baseEncode=n,this.baseDecode=r,this.encoder=new i(e,t,n),this.decoder=new a(e,t,r)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const d=({name:e,prefix:t,encode:n,decode:r})=>new f(e,t,n,r),l=({prefix:e,name:t,alphabet:n})=>{const{encode:i,decode:a}=function(e,t){if(e.length>=255)throw new TypeError("Alphabet too long");for(var n=new Uint8Array(256),r=0;r<n.length;r++)n[r]=255;for(var i=0;i<e.length;i++){var a=e.charAt(i),s=a.charCodeAt(0);if(255!==n[s])throw new TypeError(a+" is ambiguous");n[s]=i}var o=e.length,f=e.charAt(0),d=Math.log(o)/Math.log(256),l=Math.log(256)/Math.log(o);function c(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var t=0;if(" "!==e[t]){for(var r=0,i=0;e[t]===f;)r++,t++;for(var a=(e.length-t)*d+1>>>0,s=new Uint8Array(a);e[t];){var l=n[e.charCodeAt(t)];if(255===l)return;for(var c=0,u=a-1;(0!==l||c<i)&&-1!==u;u--,c++)l+=o*s[u]>>>0,s[u]=l%256>>>0,l=l/256>>>0;if(0!==l)throw new Error("Non-zero carry");i=c,t++}if(" "!==e[t]){for(var p=a-i;p!==a&&0===s[p];)p++;for(var m=new Uint8Array(r+(a-p)),y=r;p!==a;)m[y++]=s[p++];return m}}}return{encode:function(t){if(t instanceof Uint8Array||(ArrayBuffer.isView(t)?t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength):Array.isArray(t)&&(t=Uint8Array.from(t))),!(t instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===t.length)return"";for(var n=0,r=0,i=0,a=t.length;i!==a&&0===t[i];)i++,n++;for(var s=(a-i)*l+1>>>0,d=new Uint8Array(s);i!==a;){for(var c=t[i],u=0,p=s-1;(0!==c||u<r)&&-1!==p;p--,u++)c+=256*d[p]>>>0,d[p]=c%o>>>0,c=c/o>>>0;if(0!==c)throw new Error("Non-zero carry");r=u,i++}for(var m=s-r;m!==s&&0===d[m];)m++;for(var y=f.repeat(n);m<s;++m)y+=e.charAt(d[m]);return y},decodeUnsafe:c,decode:function(e){var n=c(e);if(n)return n;throw new Error(`Non-${t} character`)}}}(n,t);return d({prefix:e,name:t,encode:i,decode:e=>(0,r.oQ)(a(e))})},c=({name:e,prefix:t,bitsPerChar:n,alphabet:r})=>d({prefix:t,name:e,encode:e=>((e,t,n)=>{const r="="===t[t.length-1],i=(1<<n)-1;let a="",s=0,o=0;for(let r=0;r<e.length;++r)for(o=o<<8|e[r],s+=8;s>n;)s-=n,a+=t[i&o>>s];if(s&&(a+=t[i&o<<n-s]),r)for(;a.length*n&7;)a+="=";return a})(e,r,n),decode:t=>((e,t,n,r)=>{const i={};for(let e=0;e<t.length;++e)i[t[e]]=e;let a=e.length;for(;"="===e[a-1];)--a;const s=new Uint8Array(a*n/8|0);let o=0,f=0,d=0;for(let t=0;t<a;++t){const a=i[e[t]];if(void 0===a)throw new SyntaxError(`Non-${r} character`);f=f<<n|a,o+=n,o>=8&&(o-=8,s[d++]=255&f>>o)}if(o>=n||255&f<<8-o)throw new SyntaxError("Unexpected end of data");return s})(t,r,n,e)})},2817:(e,t,n)=>{"use strict";n.r(t),n.d(t,{base32:()=>i,base32hex:()=>f,base32hexpad:()=>l,base32hexpadupper:()=>c,base32hexupper:()=>d,base32pad:()=>s,base32padupper:()=>o,base32upper:()=>a,base32z:()=>u});var r=n(9880);const i=(0,r.ET)({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),a=(0,r.ET)({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),s=(0,r.ET)({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),o=(0,r.ET)({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),f=(0,r.ET)({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),d=(0,r.ET)({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),l=(0,r.ET)({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),c=(0,r.ET)({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),u=(0,r.ET)({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5})},9086:(e,t,n)=>{"use strict";n.r(t),n.d(t,{base58btc:()=>i,base58flickr:()=>a});var r=n(9880);const i=(0,r.kU)({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),a=(0,r.kU)({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"})},9885:(e,t,n)=>{"use strict";n.r(t),n.d(t,{base64:()=>i,base64pad:()=>a,base64url:()=>s,base64urlpad:()=>o});var r=n(9880);const i=(0,r.ET)({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),a=(0,r.ET)({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),s=(0,r.ET)({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),o=(0,r.ET)({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6})},1253:(e,t,n)=>{"use strict";n.d(t,{gh:()=>O,QB:()=>$,kq:()=>U});var r={};n.r(r),n.d(r,{identity:()=>m});var i={};n.r(i),n.d(i,{base2:()=>y});var a={};n.r(a),n.d(a,{base8:()=>h});var s={};n.r(s),n.d(s,{base10:()=>b});var o={};n.r(o),n.d(o,{base16:()=>g,base16upper:()=>_});var f={};n.r(f),n.d(f,{base36:()=>v,base36upper:()=>w});var d={};n.r(d),n.d(d,{sha256:()=>E,sha512:()=>S});var l={};n.r(l),n.d(l,{code:()=>x,decode:()=>F,encode:()=>D,name:()=>k});var c={};n.r(c),n.d(c,{code:()=>B,decode:()=>V,encode:()=>M,name:()=>R});var u=n(9880),p=n(5934);const m=(0,u.Dp)({prefix:"\0",name:"identity",encode:e=>(0,p.BB)(e),decode:e=>(0,p.mL)(e)}),y=(0,u.ET)({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1}),h=(0,u.ET)({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3}),b=(0,u.kU)({prefix:"9",name:"base10",alphabet:"0123456789"}),g=(0,u.ET)({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),_=(0,u.ET)({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var T=n(2817);const v=(0,u.kU)({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),w=(0,u.kU)({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var Y=n(9086),A=n(9885),I=n(7225);const C=e=>async t=>new Uint8Array(await crypto.subtle.digest(e,t)),E=(0,I.D)({name:"sha2-256",code:18,encode:C("SHA-256")}),S=(0,I.D)({name:"sha2-512",code:19,encode:C("SHA-512")});var N=n(8103);const k="raw",x=85,D=e=>(0,p.oQ)(e),F=e=>(0,p.oQ)(e),P=new TextEncoder,L=new TextDecoder,R="json",B=512,M=e=>P.encode(JSON.stringify(e)),V=e=>JSON.parse(L.decode(e));n(6441);const O={...r,...i,...a,...s,...o,...T,...f,...Y,...A},U={...d,...N},$={raw:l,json:c}},5934:(e,t,n)=>{"use strict";n.d(t,{BB:()=>s,fS:()=>r,mL:()=>a,oQ:()=>i}),new Uint8Array(0);const r=(e,t)=>{if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;for(let n=0;n<e.byteLength;n++)if(e[n]!==t[n])return!1;return!0},i=e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")},a=e=>(new TextEncoder).encode(e),s=e=>(new TextDecoder).decode(e)},1362:(e,t,n)=>{"use strict";n.r(t),n.d(t,{CID:()=>f});var r=n(4714),i=n(8924),a=n(9086),s=n(2817),o=n(5934);class f{constructor(e,t,n,r){this.code=t,this.version=e,this.multihash=n,this.bytes=r,this.byteOffset=r.byteOffset,this.byteLength=r.byteLength,this.asCID=this,this._baseCache=new Map,Object.defineProperties(this,{byteOffset:b,byteLength:b,code:h,version:h,multihash:h,bytes:h,_baseCache:b,asCID:b})}toV0(){if(0===this.version)return this;{const{code:e,multihash:t}=this;if(e!==u)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==p)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return f.createV0(t)}}toV1(){switch(this.version){case 0:{const{code:e,digest:t}=this.multihash,n=i.create(e,t);return f.createV1(this.code,n)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}equals(e){return e&&this.code===e.code&&this.version===e.version&&i.equals(this.multihash,e.multihash)}toString(e){const{bytes:t,version:n,_baseCache:r}=this;return 0===n?l(t,r,e||a.base58btc.encoder):c(t,r,e||s.base32.encoder)}toJSON(){return{code:this.code,version:this.version,hash:this.multihash.bytes}}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}static isCID(e){return g(/^0\.0/,_),!(!e||!e[y]&&e.asCID!==e)}get toBaseEncodedString(){throw new Error("Deprecated, use .toString()")}get codec(){throw new Error('"codec" property is deprecated, use integer "code" property instead')}get buffer(){throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead")}get multibaseName(){throw new Error('"multibaseName" property is deprecated')}get prefix(){throw new Error('"prefix" property is deprecated')}static asCID(e){if(e instanceof f)return e;if(null!=e&&e.asCID===e){const{version:t,code:n,multihash:r,bytes:i}=e;return new f(t,n,r,i||m(t,n,r.bytes))}if(null!=e&&!0===e[y]){const{version:t,multihash:n,code:r}=e,a=i.decode(n);return f.create(t,r,a)}return null}static create(e,t,n){if("number"!=typeof t)throw new Error("String codecs are no longer supported");switch(e){case 0:if(t!==u)throw new Error(`Version 0 CID must use dag-pb (code: ${u}) block encoding`);return new f(e,t,n,n.bytes);case 1:{const r=m(e,t,n.bytes);return new f(e,t,n,r)}default:throw new Error("Invalid version")}}static createV0(e){return f.create(0,u,e)}static createV1(e,t){return f.create(1,e,t)}static decode(e){const[t,n]=f.decodeFirst(e);if(n.length)throw new Error("Incorrect length");return t}static decodeFirst(e){const t=f.inspectBytes(e),n=t.size-t.multihashSize,r=(0,o.oQ)(e.subarray(n,n+t.multihashSize));if(r.byteLength!==t.multihashSize)throw new Error("Incorrect length");const a=r.subarray(t.multihashSize-t.digestSize),s=new i.Digest(t.multihashCode,t.digestSize,a,r);return[0===t.version?f.createV0(s):f.createV1(t.codec,s),e.subarray(t.size)]}static inspectBytes(e){let t=0;const n=()=>{const[n,i]=r.Jx(e.subarray(t));return t+=i,n};let i=n(),a=u;if(18===i?(i=0,t=0):1===i&&(a=n()),0!==i&&1!==i)throw new RangeError(`Invalid CID version ${i}`);const s=t,o=n(),f=n(),d=t+f;return{version:i,codec:a,multihashCode:o,digestSize:f,multihashSize:d-s,size:d}}static parse(e,t){const[n,r]=d(e,t),i=f.decode(r);return i._baseCache.set(n,e),i}}const d=(e,t)=>{switch(e[0]){case"Q":{const n=t||a.base58btc;return[a.base58btc.prefix,n.decode(`${a.base58btc.prefix}${e}`)]}case a.base58btc.prefix:{const n=t||a.base58btc;return[a.base58btc.prefix,n.decode(e)]}case s.base32.prefix:{const n=t||s.base32;return[s.base32.prefix,n.decode(e)]}default:if(null==t)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[e[0],t.decode(e)]}},l=(e,t,n)=>{const{prefix:r}=n;if(r!==a.base58btc.prefix)throw Error(`Cannot string encode V0 in ${n.name} encoding`);const i=t.get(r);if(null==i){const i=n.encode(e).slice(1);return t.set(r,i),i}return i},c=(e,t,n)=>{const{prefix:r}=n,i=t.get(r);if(null==i){const i=n.encode(e);return t.set(r,i),i}return i},u=112,p=18,m=(e,t,n)=>{const i=r.P$(e),a=i+r.P$(t),s=new Uint8Array(a+n.byteLength);return r.mL(e,s,0),r.mL(t,s,i),s.set(n,a),s},y=Symbol.for("@ipld/js-cid/CID"),h={writable:!1,configurable:!1,enumerable:!0},b={writable:!1,enumerable:!1,configurable:!1},g=(e,t)=>{if(!e.test("0.0.0-dev"))throw new Error(t);console.warn(t)},_="CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n"},8924:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Digest:()=>f,create:()=>a,decode:()=>s,equals:()=>o});var r=n(5934),i=n(4714);const a=(e,t)=>{const n=t.byteLength,r=i.P$(e),a=r+i.P$(n),s=new Uint8Array(a+n);return i.mL(e,s,0),i.mL(n,s,r),s.set(t,a),new f(e,n,t,s)},s=e=>{const t=(0,r.oQ)(e),[n,a]=i.Jx(t),[s,o]=i.Jx(t.subarray(a)),d=t.subarray(a+o);if(d.byteLength!==s)throw new Error("Incorrect length");return new f(n,s,d,t)},o=(e,t)=>e===t||e.code===t.code&&e.size===t.size&&(0,r.fS)(e.bytes,t.bytes);class f{constructor(e,t,n,r){this.code=e,this.size=t,this.digest=n,this.bytes=r}}},7225:(e,t,n)=>{"use strict";n.d(t,{D:()=>i});var r=n(8924);const i=({name:e,code:t,encode:n})=>new a(e,t,n);class a{constructor(e,t,n){this.name=e,this.code=t,this.encode=n}digest(e){if(e instanceof Uint8Array){const t=this.encode(e);return t instanceof Uint8Array?r.create(this.code,t):t.then((e=>r.create(this.code,e)))}throw Error("Unknown type, must be binary type")}}},8103:(e,t,n)=>{"use strict";n.r(t),n.d(t,{identity:()=>s});var r=n(5934),i=n(8924);const a=r.oQ,s={code:0,name:"identity",encode:a,digest:e=>i.create(0,a(e))}},6441:(e,t,n)=>{"use strict";n.d(t,{k0:()=>r.CID});var r=n(1362);n(4714),n(5934),n(7225),n(8924)},4714:(e,t,n)=>{"use strict";n.d(t,{Jx:()=>m,mL:()=>y,P$:()=>h});var r=Math.pow(2,31),i=Math.pow(2,7),a=Math.pow(2,14),s=Math.pow(2,21),o=Math.pow(2,28),f=Math.pow(2,35),d=Math.pow(2,42),l=Math.pow(2,49),c=Math.pow(2,56),u=Math.pow(2,63);const p={encode:function e(t,n,i){n=n||[];for(var a=i=i||0;t>=r;)n[i++]=255&t|128,t/=128;for(;-128&t;)n[i++]=255&t|128,t>>>=7;return n[i]=0|t,e.bytes=i-a+1,n},decode:function e(t,n){var r,i=0,a=0,s=n=n||0,o=t.length;do{if(s>=o)throw e.bytes=0,new RangeError("Could not decode varint");r=t[s++],i+=a<28?(127&r)<<a:(127&r)*Math.pow(2,a),a+=7}while(r>=128);return e.bytes=s-n,i},encodingLength:function(e){return e<i?1:e<a?2:e<s?3:e<o?4:e<f?5:e<d?6:e<l?7:e<c?8:e<u?9:10}},m=e=>[p.decode(e),p.decode.bytes],y=(e,t,n=0)=>(p.encode(e,t,n),t),h=e=>p.encodingLength(e)},605:(e,t,n)=>{"use strict";function r(e,t){t||(t=e.reduce(((e,t)=>e+t.length),0));const n=new Uint8Array(t);let r=0;for(const t of e)n.set(t,r),r+=t.length;return n}n.r(t),n.d(t,{concat:()=>r})},9588:(e,t,n)=>{"use strict";function r(e,t){if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;for(let n=0;n<e.byteLength;n++)if(e[n]!==t[n])return!1;return!0}n.r(t),n.d(t,{equals:()=>r})},2217:(e,t,n)=>{"use strict";n.r(t),n.d(t,{fromString:()=>i});var r=n(7645);function i(e,t="utf8"){const n=r.Z[t];if(!n)throw new Error(`Unsupported encoding "${t}"`);return n.decoder.decode(`${n.prefix}${e}`)}},2263:(e,t,n)=>{"use strict";n.r(t),n.d(t,{toString:()=>i});var r=n(7645);function i(e,t="utf8"){const n=r.Z[t];if(!n)throw new Error(`Unsupported encoding "${t}"`);return n.encoder.encode(e).substring(1)}},7645:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(1253);function i(e,t,n,r){return{name:e,prefix:t,encoder:{name:e,prefix:t,encode:n},decoder:{decode:r}}}const a=i("utf8","u",(e=>"u"+new TextDecoder("utf8").decode(e)),(e=>(new TextEncoder).encode(e.substring(1)))),s=i("ascii","a",(e=>{let t="a";for(let n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return t}),(e=>{e=e.substring(1);const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t})),o={utf8:a,"utf-8":a,hex:r.gh.base16,latin1:s,ascii:s,binary:s,...r.gh}},8899:e=>{"use strict";e.exports=JSON.parse('{"contractName":"List","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"donations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"nftletter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"t","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokens","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"userlist","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_email","type":"string"},{"internalType":"string","name":"_data","type":"string"}],"name":"makeUser","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"readUser","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"userAdr","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"data","type":"string"}],"internalType":"struct List.User","name":"","type":"tuple"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"readToken","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"donate","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function","payable":true},{"inputs":[{"internalType":"address","name":"_a","type":"address"},{"internalType":"string","name":"_data","type":"string"}],"name":"nftLetter","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.13+commit.abaa5c0e\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"approved\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"ApprovalForAll\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"fallback\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"donate\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"donations\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"getApproved\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isApprovedForAll\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"_name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_email\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_data\\",\\"type\\":\\"string\\"}],\\"name\\":\\"makeUser\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_a\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_data\\",\\"type\\":\\"string\\"}],\\"name\\":\\"nftLetter\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"nftletter\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"ownerOf\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"readToken\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"readUser\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"userAdr\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"email\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"data\\",\\"type\\":\\"string\\"}],\\"internalType\\":\\"struct List.User\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setApprovalForAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceId\\",\\"type\\":\\"bytes4\\"}],\\"name\\":\\"supportsInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"t\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"tokenURI\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"tokens\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"userlist\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC721-approve}.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC721-balanceOf}.\\"},\\"getApproved(uint256)\\":{\\"details\\":\\"See {IERC721-getApproved}.\\"},\\"isApprovedForAll(address,address)\\":{\\"details\\":\\"See {IERC721-isApprovedForAll}.\\"},\\"name()\\":{\\"details\\":\\"See {IERC721Metadata-name}.\\"},\\"ownerOf(uint256)\\":{\\"details\\":\\"See {IERC721-ownerOf}.\\"},\\"safeTransferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC721-safeTransferFrom}.\\"},\\"safeTransferFrom(address,address,uint256,bytes)\\":{\\"details\\":\\"See {IERC721-safeTransferFrom}.\\"},\\"setApprovalForAll(address,bool)\\":{\\"details\\":\\"See {IERC721-setApprovalForAll}.\\"},\\"supportsInterface(bytes4)\\":{\\"details\\":\\"See {IERC165-supportsInterface}.\\"},\\"symbol()\\":{\\"details\\":\\"See {IERC721Metadata-symbol}.\\"},\\"tokenURI(uint256)\\":{\\"details\\":\\"See {IERC721Metadata-tokenURI}.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC721-transferFrom}.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"project:/contracts/List.sol\\":\\"List\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\"},\\"optimizer\\":{\\"enabled\\":false,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\":{\\"keccak256\\":\\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\\",\\"license\\":\\"MIT\\",\\"urls\\":[\\"bzz-raw://cbc4803332d45dff58f865ed21c942fe4668e47cc7196c8dfe84102040b1d70f\\",\\"dweb:/ipfs/QmXhZLsocznRWCSyhjo3vo66Z1VsuuNptAVb6ASPYsWtGx\\"]},\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\":{\\"keccak256\\":\\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\\",\\"license\\":\\"MIT\\",\\"urls\\":[\\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\\",\\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\\"]},\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\":{\\"keccak256\\":\\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\\",\\"license\\":\\"MIT\\",\\"urls\\":[\\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\\",\\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\\"]},\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\":{\\"keccak256\\":\\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\\",\\"license\\":\\"MIT\\",\\"urls\\":[\\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\\",\\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\\"]},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"keccak256\\":\\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\\",\\"license\\":\\"MIT\\",\\"urls\\":[\\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\\",\\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\\"]},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\",\\"urls\\":[\\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\\",\\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\\"]},\\"@openzeppelin/contracts/utils/Strings.sol\\":{\\"keccak256\\":\\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\\",\\"license\\":\\"MIT\\",\\"urls\\":[\\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\\",\\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\\"]},\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\":{\\"keccak256\\":\\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\\",\\"license\\":\\"MIT\\",\\"urls\\":[\\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\\",\\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\\"]},\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\":{\\"keccak256\\":\\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\\",\\"license\\":\\"MIT\\",\\"urls\\":[\\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\\",\\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\\"]},\\"project:/contracts/List.sol\\":{\\"keccak256\\":\\"0x99c9856c93ab0912d0220d9d16fd59409ec4ca56dee34212fcc600199beb0a8f\\",\\"license\\":\\"GPL-3.0\\",\\"urls\\":[\\"bzz-raw://41ccca30cfd9da456487afe3a31a1fd22080c2904ba69afb5131f01f2e2fb41a\\",\\"dweb:/ipfs/Qmdfqj9Rz3NdWdofwutUeZSrfJXJDcpD1ZDPmvHDk5WyUG\\"]}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b506040518060400160405280600d81526020017f496d70616374204d61726b6574000000000000000000000000000000000000008152506040518060400160405280600581526020017f494d50435400000000000000000000000000000000000000000000000000000081525081600090805190602001906200009692919062000142565b508060019080519060200190620000af92919062000142565b50505030600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160068190555062000256565b828054620001509062000221565b90600052602060002090601f016020900481019282620001745760008555620001c0565b82601f106200018f57805160ff1916838001178555620001c0565b82800160010185558215620001c0579182015b82811115620001bf578251825591602001919060010190620001a2565b5b509050620001cf9190620001d3565b5090565b5b80821115620001ee576000816000905550600101620001d4565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023a57607f821691505b60208210810362000250576200024f620001f2565b5b50919050565b6136cf80620002666000396000f3fe6080604052600436106101445760003560e01c806392d0d153116100b6578063c87b56dd1161006f578063c87b56dd146104c6578063d8e136e214610503578063e985e9c514610540578063ed88c68e1461057d578063f61f90c11461059b578063f8626af8146105c657610145565b806392d0d153146103a457806395d89b41146103cf5780639cb87798146103fa578063a22cb46514610437578063a932068814610460578063b88d4fde1461049d57610145565b80632629aecf116101085780632629aecf1461024a57806342842e0e146102875780634f64b2be146102b05780636352211e146102ed57806370a082311461032a5780638ef612641461036757610145565b806301ffc9a71461015357806306fdde0314610190578063081812fc146101bb578063095ea7b3146101f857806323b872dd1461022157610145565b5b34801561015157600080fd5b005b34801561015f57600080fd5b5061017a60048036038101906101759190612314565b610603565b604051610187919061235c565b60405180910390f35b34801561019c57600080fd5b506101a56106e5565b6040516101b29190612410565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd9190612468565b610777565b6040516101ef91906124d6565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a919061251d565b6107fc565b005b34801561022d57600080fd5b506102486004803603810190610243919061255d565b610913565b005b34801561025657600080fd5b50610271600480360381019061026c91906126e5565b610973565b60405161027e919061235c565b60405180910390f35b34801561029357600080fd5b506102ae60048036038101906102a9919061255d565b610b66565b005b3480156102bc57600080fd5b506102d760048036038101906102d29190612468565b610b86565b6040516102e491906127e1565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f9190612468565b610c26565b60405161032191906124d6565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190612803565b610cd7565b60405161035e919061283f565b60405180910390f35b34801561037357600080fd5b5061038e60048036038101906103899190612468565b610d8e565b60405161039b919061283f565b60405180910390f35b3480156103b057600080fd5b506103b9610da6565b6040516103c6919061283f565b60405180910390f35b3480156103db57600080fd5b506103e4610dac565b6040516103f19190612410565b60405180910390f35b34801561040657600080fd5b50610421600480360381019061041c919061285a565b610e3e565b60405161042e919061235c565b60405180910390f35b34801561044357600080fd5b5061045e600480360381019061045991906128e2565b610ed1565b005b34801561046c57600080fd5b5061048760048036038101906104829190612468565b610ee7565b6040516104949190612410565b60405180910390f35b3480156104a957600080fd5b506104c460048036038101906104bf91906129c3565b610f8c565b005b3480156104d257600080fd5b506104ed60048036038101906104e89190612468565b610fee565b6040516104fa9190612410565b60405180910390f35b34801561050f57600080fd5b5061052a60048036038101906105259190612468565b611095565b604051610537919061283f565b60405180910390f35b34801561054c57600080fd5b5061056760048036038101906105629190612a46565b6110ad565b604051610574919061235c565b60405180910390f35b610585611141565b604051610592919061235c565b60405180910390f35b3480156105a757600080fd5b506105b0611285565b6040516105bd9190612b72565b60405180910390f35b3480156105d257600080fd5b506105ed60048036038101906105e89190612468565b611520565b6040516105fa919061283f565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106ce57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106de57506106dd82611538565b5b9050919050565b6060600080546106f490612bc3565b80601f016020809104026020016040519081016040528092919081815260200182805461072090612bc3565b801561076d5780601f106107425761010080835404028352916020019161076d565b820191906000526020600020905b81548152906001019060200180831161075057829003601f168201915b5050505050905090565b6000610782826115a2565b6107c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b890612c66565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061080782610c26565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086e90612cf8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661089661160e565b73ffffffffffffffffffffffffffffffffffffffff1614806108c557506108c4816108bf61160e565b6110ad565b5b610904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fb90612d8a565b60405180910390fd5b61090e8383611616565b505050565b61092461091e61160e565b826116cf565b610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095a90612e1c565b60405180910390fd5b61096e8383836117ad565b505050565b60008060019050600a6040518060a0016040528060065481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020018581525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190610a5192919061213a565b506060820151816003019080519060200190610a6e92919061213a565b506080820151816004019080519060200190610a8b92919061213a565b505050600654600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600e6000600654815260200190815260200160002081905550600160066000828254610b039190612e6b565b92505081905550610b173360085485611a13565b826011600060085481526020019081526020016000209080519060200190610b409291906121c0565b50600160086000828254610b549190612e6b565b92505081905550809150509392505050565b610b8183838360405180602001604052806000815250610f8c565b505050565b60116020528060005260406000206000915090508054610ba590612bc3565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd190612bc3565b8015610c1e5780601f10610bf357610100808354040283529160200191610c1e565b820191906000526020600020905b815481529060010190602001808311610c0157829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590612f33565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90612fc5565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60106020528060005260406000206000915090505481565b60085481565b606060018054610dbb90612bc3565b80601f0160208091040260200160405190810160405280929190818152602001828054610de790612bc3565b8015610e345780601f10610e0957610100808354040283529160200191610e34565b820191906000526020600020905b815481529060010190602001808311610e1757829003601f168201915b5050505050905090565b6000610e4d8360085484611a13565b816011600060085481526020019081526020016000209080519060200190610e769291906121c0565b5060085460106000600954815260200190815260200160002081905550600160096000828254610ea69190612e6b565b92505081905550600160086000828254610ec09190612e6b565b925050819055506001905092915050565b610ee3610edc61160e565b8383611a6e565b5050565b6060601160008381526020019081526020016000208054610f0790612bc3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3390612bc3565b8015610f805780601f10610f5557610100808354040283529160200191610f80565b820191906000526020600020905b815481529060010190602001808311610f6357829003601f168201915b50505050509050919050565b610f9d610f9761160e565b836116cf565b610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd390612e1c565b60405180910390fd5b610fe884848484611bda565b50505050565b6060610ff9826115a2565b611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102f90613057565b60405180910390fd5b6000611042611c36565b90506000815111611062576040518060200160405280600081525061108d565b8061106c84611c4d565b60405160200161107d9291906130b3565b6040516020818303038152906040525b915050919050565b600e6020528060005260406000206000915090505481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600066038d7ea4c6800034101561118d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118490613123565b60405180910390fd5b6111cf336008546040518060400160405280600981526020017f6920646f6e617465640000000000000000000000000000000000000000000000815250611a13565b6040518060400160405280600981526020017f6920646f6e617465640000000000000000000000000000000000000000000000815250601160006008548152602001908152602001600020908051906020019061122d9291906121c0565b50600854600f600060075481526020019081526020016000208190555060016007600082825461125d9190612e6b565b925050819055506001600860008282546112779190612e6b565b925050819055506001905090565b61128d612246565b600a6001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112db9190613143565b815481106112ec576112eb613177565b5b90600052602060002090600502016040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461137590612bc3565b80601f01602080910402602001604051908101604052809291908181526020018280546113a190612bc3565b80156113ee5780601f106113c3576101008083540402835291602001916113ee565b820191906000526020600020905b8154815290600101906020018083116113d157829003601f168201915b5050505050815260200160038201805461140790612bc3565b80601f016020809104026020016040519081016040528092919081815260200182805461143390612bc3565b80156114805780601f1061145557610100808354040283529160200191611480565b820191906000526020600020905b81548152906001019060200180831161146357829003601f168201915b5050505050815260200160048201805461149990612bc3565b80601f01602080910402602001604051908101604052809291908181526020018280546114c590612bc3565b80156115125780601f106114e757610100808354040283529160200191611512565b820191906000526020600020905b8154815290600101906020018083116114f557829003601f168201915b505050505081525050905090565b600f6020528060005260406000206000915090505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661168983610c26565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006116da826115a2565b611719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171090613218565b60405180910390fd5b600061172483610c26565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061179357508373ffffffffffffffffffffffffffffffffffffffff1661177b84610777565b73ffffffffffffffffffffffffffffffffffffffff16145b806117a457506117a381856110ad565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166117cd82610c26565b73ffffffffffffffffffffffffffffffffffffffff1614611823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181a906132aa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611892576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118899061333c565b60405180910390fd5b61189d838383611dad565b6118a8600082611616565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118f89190613143565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461194f9190612e6b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a0e838383611db2565b505050565b611a1d8383611db7565b611a2a6000848484611f90565b611a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a60906133ce565b60405180910390fd5b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad39061343a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611bcd919061235c565b60405180910390a3505050565b611be58484846117ad565b611bf184848484611f90565b611c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c27906133ce565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060008203611c94576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611da8565b600082905060005b60008214611cc6578080611caf9061345a565b915050600a82611cbf91906134d1565b9150611c9c565b60008167ffffffffffffffff811115611ce257611ce16125ba565b5b6040519080825280601f01601f191660200182016040528015611d145781602001600182028036833780820191505090505b5090505b60008514611da157600182611d2d9190613143565b9150600a85611d3c9190613502565b6030611d489190612e6b565b60f81b818381518110611d5e57611d5d613177565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611d9a91906134d1565b9450611d18565b8093505050505b919050565b505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d9061357f565b60405180910390fd5b611e2f816115a2565b15611e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e66906135eb565b60405180910390fd5b611e7b60008383611dad565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ecb9190612e6b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f8c60008383611db2565b5050565b6000611fb18473ffffffffffffffffffffffffffffffffffffffff16612117565b1561210a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611fda61160e565b8786866040518563ffffffff1660e01b8152600401611ffc949392919061360b565b6020604051808303816000875af192505050801561203857506040513d601f19601f82011682018060405250810190612035919061366c565b60015b6120ba573d8060008114612068576040519150601f19603f3d011682016040523d82523d6000602084013e61206d565b606091505b5060008151036120b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a9906133ce565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061210f565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461214690612bc3565b90600052602060002090601f01602090048101928261216857600085556121af565b82601f1061218157805160ff19168380011785556121af565b828001600101855582156121af579182015b828111156121ae578251825591602001919060010190612193565b5b5090506121bc919061228b565b5090565b8280546121cc90612bc3565b90600052602060002090601f0160209004810192826121ee5760008555612235565b82601f1061220757805160ff1916838001178555612235565b82800160010185558215612235579182015b82811115612234578251825591602001919060010190612219565b5b509050612242919061228b565b5090565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081525090565b5b808211156122a457600081600090555060010161228c565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122f1816122bc565b81146122fc57600080fd5b50565b60008135905061230e816122e8565b92915050565b60006020828403121561232a576123296122b2565b5b6000612338848285016122ff565b91505092915050565b60008115159050919050565b61235681612341565b82525050565b6000602082019050612371600083018461234d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123b1578082015181840152602081019050612396565b838111156123c0576000848401525b50505050565b6000601f19601f8301169050919050565b60006123e282612377565b6123ec8185612382565b93506123fc818560208601612393565b612405816123c6565b840191505092915050565b6000602082019050818103600083015261242a81846123d7565b905092915050565b6000819050919050565b61244581612432565b811461245057600080fd5b50565b6000813590506124628161243c565b92915050565b60006020828403121561247e5761247d6122b2565b5b600061248c84828501612453565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124c082612495565b9050919050565b6124d0816124b5565b82525050565b60006020820190506124eb60008301846124c7565b92915050565b6124fa816124b5565b811461250557600080fd5b50565b600081359050612517816124f1565b92915050565b60008060408385031215612534576125336122b2565b5b600061254285828601612508565b925050602061255385828601612453565b9150509250929050565b600080600060608486031215612576576125756122b2565b5b600061258486828701612508565b935050602061259586828701612508565b92505060406125a686828701612453565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6125f2826123c6565b810181811067ffffffffffffffff82111715612611576126106125ba565b5b80604052505050565b60006126246122a8565b905061263082826125e9565b919050565b600067ffffffffffffffff8211156126505761264f6125ba565b5b612659826123c6565b9050602081019050919050565b82818337600083830152505050565b600061268861268384612635565b61261a565b9050828152602081018484840111156126a4576126a36125b5565b5b6126af848285612666565b509392505050565b600082601f8301126126cc576126cb6125b0565b5b81356126dc848260208601612675565b91505092915050565b6000806000606084860312156126fe576126fd6122b2565b5b600084013567ffffffffffffffff81111561271c5761271b6122b7565b5b612728868287016126b7565b935050602084013567ffffffffffffffff811115612749576127486122b7565b5b612755868287016126b7565b925050604084013567ffffffffffffffff811115612776576127756122b7565b5b612782868287016126b7565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60006127b38261278c565b6127bd8185612797565b93506127cd818560208601612393565b6127d6816123c6565b840191505092915050565b600060208201905081810360008301526127fb81846127a8565b905092915050565b600060208284031215612819576128186122b2565b5b600061282784828501612508565b91505092915050565b61283981612432565b82525050565b60006020820190506128546000830184612830565b92915050565b60008060408385031215612871576128706122b2565b5b600061287f85828601612508565b925050602083013567ffffffffffffffff8111156128a05761289f6122b7565b5b6128ac858286016126b7565b9150509250929050565b6128bf81612341565b81146128ca57600080fd5b50565b6000813590506128dc816128b6565b92915050565b600080604083850312156128f9576128f86122b2565b5b600061290785828601612508565b9250506020612918858286016128cd565b9150509250929050565b600067ffffffffffffffff82111561293d5761293c6125ba565b5b612946826123c6565b9050602081019050919050565b600061296661296184612922565b61261a565b905082815260208101848484011115612982576129816125b5565b5b61298d848285612666565b509392505050565b600082601f8301126129aa576129a96125b0565b5b81356129ba848260208601612953565b91505092915050565b600080600080608085870312156129dd576129dc6122b2565b5b60006129eb87828801612508565b94505060206129fc87828801612508565b9350506040612a0d87828801612453565b925050606085013567ffffffffffffffff811115612a2e57612a2d6122b7565b5b612a3a87828801612995565b91505092959194509250565b60008060408385031215612a5d57612a5c6122b2565b5b6000612a6b85828601612508565b9250506020612a7c85828601612508565b9150509250929050565b612a8f81612432565b82525050565b612a9e816124b5565b82525050565b600082825260208201905092915050565b6000612ac082612377565b612aca8185612aa4565b9350612ada818560208601612393565b612ae3816123c6565b840191505092915050565b600060a083016000830151612b066000860182612a86565b506020830151612b196020860182612a95565b5060408301518482036040860152612b318282612ab5565b91505060608301518482036060860152612b4b8282612ab5565b91505060808301518482036080860152612b658282612ab5565b9150508091505092915050565b60006020820190508181036000830152612b8c8184612aee565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612bdb57607f821691505b602082108103612bee57612bed612b94565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612c50602c83612382565b9150612c5b82612bf4565b604082019050919050565b60006020820190508181036000830152612c7f81612c43565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ce2602183612382565b9150612ced82612c86565b604082019050919050565b60006020820190508181036000830152612d1181612cd5565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612d74603883612382565b9150612d7f82612d18565b604082019050919050565b60006020820190508181036000830152612da381612d67565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000612e06603183612382565b9150612e1182612daa565b604082019050919050565b60006020820190508181036000830152612e3581612df9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e7682612432565b9150612e8183612432565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612eb657612eb5612e3c565b5b828201905092915050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000612f1d602983612382565b9150612f2882612ec1565b604082019050919050565b60006020820190508181036000830152612f4c81612f10565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612faf602a83612382565b9150612fba82612f53565b604082019050919050565b60006020820190508181036000830152612fde81612fa2565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613041602f83612382565b915061304c82612fe5565b604082019050919050565b6000602082019050818103600083015261307081613034565b9050919050565b600081905092915050565b600061308d82612377565b6130978185613077565b93506130a7818560208601612393565b80840191505092915050565b60006130bf8285613082565b91506130cb8284613082565b91508190509392505050565b7f6e6f7420656e6f75676820776569000000000000000000000000000000000000600082015250565b600061310d600e83612382565b9150613118826130d7565b602082019050919050565b6000602082019050818103600083015261313c81613100565b9050919050565b600061314e82612432565b915061315983612432565b92508282101561316c5761316b612e3c565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613202602c83612382565b915061320d826131a6565b604082019050919050565b60006020820190508181036000830152613231816131f5565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613294602583612382565b915061329f82613238565b604082019050919050565b600060208201905081810360008301526132c381613287565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613326602483612382565b9150613331826132ca565b604082019050919050565b6000602082019050818103600083015261335581613319565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006133b8603283612382565b91506133c38261335c565b604082019050919050565b600060208201905081810360008301526133e7816133ab565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613424601983612382565b915061342f826133ee565b602082019050919050565b6000602082019050818103600083015261345381613417565b9050919050565b600061346582612432565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361349757613496612e3c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134dc82612432565b91506134e783612432565b9250826134f7576134f66134a2565b5b828204905092915050565b600061350d82612432565b915061351883612432565b925082613528576135276134a2565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613569602083612382565b915061357482613533565b602082019050919050565b600060208201905081810360008301526135988161355c565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006135d5601c83612382565b91506135e08261359f565b602082019050919050565b60006020820190508181036000830152613604816135c8565b9050919050565b600060808201905061362060008301876124c7565b61362d60208301866124c7565b61363a6040830185612830565b818103606083015261364c81846127a8565b905095945050505050565b600081519050613666816122e8565b92915050565b600060208284031215613682576136816122b2565b5b600061369084828501613657565b9150509291505056fea2646970667358221220ac003dc2e980a69006248c5524bc38efa531205f585adbc8e6b0ca72ee42461764736f6c634300080d0033","deployedBytecode":"","immutableReferences":{},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:516:16","statements":[{"body":{"nodeType":"YulBlock","src":"35:152:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"52:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"55:77:16","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45:6:16"},"nodeType":"YulFunctionCall","src":"45:88:16"},"nodeType":"YulExpressionStatement","src":"45:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"149:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"152:4:16","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"142:6:16"},"nodeType":"YulFunctionCall","src":"142:15:16"},"nodeType":"YulExpressionStatement","src":"142:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"173:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"176:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"166:6:16"},"nodeType":"YulFunctionCall","src":"166:15:16"},"nodeType":"YulExpressionStatement","src":"166:15:16"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"7:180:16"},{"body":{"nodeType":"YulBlock","src":"244:269:16","statements":[{"nodeType":"YulAssignment","src":"254:22:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"268:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"274:1:16","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"264:3:16"},"nodeType":"YulFunctionCall","src":"264:12:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"254:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"285:38:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"315:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"321:1:16","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"311:3:16"},"nodeType":"YulFunctionCall","src":"311:12:16"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"289:18:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"362:51:16","statements":[{"nodeType":"YulAssignment","src":"376:27:16","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"390:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"398:4:16","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"386:3:16"},"nodeType":"YulFunctionCall","src":"386:17:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"376:6:16"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"342:18:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"335:6:16"},"nodeType":"YulFunctionCall","src":"335:26:16"},"nodeType":"YulIf","src":"332:81:16"},{"body":{"nodeType":"YulBlock","src":"465:42:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"479:16:16"},"nodeType":"YulFunctionCall","src":"479:18:16"},"nodeType":"YulExpressionStatement","src":"479:18:16"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"429:18:16"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"452:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"460:2:16","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"449:2:16"},"nodeType":"YulFunctionCall","src":"449:14:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"426:2:16"},"nodeType":"YulFunctionCall","src":"426:38:16"},"nodeType":"YulIf","src":"423:84:16"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"228:4:16","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"237:6:16","type":""}],"src":"193:320:16"}]},"contents":"{\\n\\n    function panic_error_0x22() {\\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\\n        mstore(4, 0x22)\\n        revert(0, 0x24)\\n    }\\n\\n    function extract_byte_array_length(data) -> length {\\n        length := div(data, 2)\\n        let outOfPlaceEncoding := and(data, 1)\\n        if iszero(outOfPlaceEncoding) {\\n            length := and(length, 0x7f)\\n        }\\n\\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\\n            panic_error_0x22()\\n        }\\n    }\\n\\n}\\n","id":16,"language":"Yul","name":"#utility.yul"}],"deployedGeneratedSources":[{"ast":{"nodeType":"YulBlock","src":"0:36409:16","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:16","statements":[{"nodeType":"YulAssignment","src":"57:19:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:16"},"nodeType":"YulFunctionCall","src":"67:9:16"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:16"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:16","type":""}],"src":"7:75:16"},{"body":{"nodeType":"YulBlock","src":"177:28:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:16"},"nodeType":"YulFunctionCall","src":"187:12:16"},"nodeType":"YulExpressionStatement","src":"187:12:16"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:16"},{"body":{"nodeType":"YulBlock","src":"300:28:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:16"},"nodeType":"YulFunctionCall","src":"310:12:16"},"nodeType":"YulExpressionStatement","src":"310:12:16"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:16"},{"body":{"nodeType":"YulBlock","src":"378:105:16","statements":[{"nodeType":"YulAssignment","src":"388:89:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:16","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:16"},"nodeType":"YulFunctionCall","src":"399:78:16"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:16"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:16","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:16","type":""}],"src":"334:149:16"},{"body":{"nodeType":"YulBlock","src":"531:78:16","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:16"},"nodeType":"YulFunctionCall","src":"589:12:16"},"nodeType":"YulExpressionStatement","src":"589:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:16"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:16"},"nodeType":"YulFunctionCall","src":"561:23:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:16"},"nodeType":"YulFunctionCall","src":"551:34:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:16"},"nodeType":"YulFunctionCall","src":"544:42:16"},"nodeType":"YulIf","src":"541:62:16"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:16","type":""}],"src":"489:120:16"},{"body":{"nodeType":"YulBlock","src":"666:86:16","statements":[{"nodeType":"YulAssignment","src":"676:29:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:16"},"nodeType":"YulFunctionCall","src":"685:20:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:16"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:16"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:16"},"nodeType":"YulFunctionCall","src":"714:32:16"},"nodeType":"YulExpressionStatement","src":"714:32:16"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:16","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:16","type":""}],"src":"615:137:16"},{"body":{"nodeType":"YulBlock","src":"823:262:16","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:16"},"nodeType":"YulFunctionCall","src":"871:79:16"},"nodeType":"YulExpressionStatement","src":"871:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:16"},"nodeType":"YulFunctionCall","src":"840:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:16"},"nodeType":"YulFunctionCall","src":"836:32:16"},"nodeType":"YulIf","src":"833:119:16"},{"nodeType":"YulBlock","src":"962:116:16","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:16","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:16"},"nodeType":"YulFunctionCall","src":"1036:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:16"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:16"},"nodeType":"YulFunctionCall","src":"1016:52:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:16"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:16","type":""}],"src":"758:327:16"},{"body":{"nodeType":"YulBlock","src":"1133:48:16","statements":[{"nodeType":"YulAssignment","src":"1143:32:16","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:16"},"nodeType":"YulFunctionCall","src":"1161:13:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:16"},"nodeType":"YulFunctionCall","src":"1154:21:16"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:16"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:16","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:16","type":""}],"src":"1091:90:16"},{"body":{"nodeType":"YulBlock","src":"1246:50:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:16"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:16"},"nodeType":"YulFunctionCall","src":"1268:21:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:16"},"nodeType":"YulFunctionCall","src":"1256:34:16"},"nodeType":"YulExpressionStatement","src":"1256:34:16"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:16","type":""}],"src":"1187:109:16"},{"body":{"nodeType":"YulBlock","src":"1394:118:16","statements":[{"nodeType":"YulAssignment","src":"1404:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:16"},"nodeType":"YulFunctionCall","src":"1412:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:16"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:16"},"nodeType":"YulFunctionCall","src":"1487:17:16"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:16"},"nodeType":"YulFunctionCall","src":"1440:65:16"},"nodeType":"YulExpressionStatement","src":"1440:65:16"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:16","type":""}],"src":"1302:210:16"},{"body":{"nodeType":"YulBlock","src":"1577:40:16","statements":[{"nodeType":"YulAssignment","src":"1588:22:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:16"},"nodeType":"YulFunctionCall","src":"1598:12:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:16"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:16","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:16","type":""}],"src":"1518:99:16"},{"body":{"nodeType":"YulBlock","src":"1719:73:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:16"},"nodeType":"YulFunctionCall","src":"1729:19:16"},"nodeType":"YulExpressionStatement","src":"1729:19:16"},{"nodeType":"YulAssignment","src":"1757:29:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:16"},"nodeType":"YulFunctionCall","src":"1772:14:16"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:16"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:16","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:16","type":""}],"src":"1623:169:16"},{"body":{"nodeType":"YulBlock","src":"1847:258:16","statements":[{"nodeType":"YulVariableDeclaration","src":"1857:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"1866:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1861:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"1926:63:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1951:3:16"},{"name":"i","nodeType":"YulIdentifier","src":"1956:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1947:3:16"},"nodeType":"YulFunctionCall","src":"1947:11:16"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1970:3:16"},{"name":"i","nodeType":"YulIdentifier","src":"1975:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:16"},"nodeType":"YulFunctionCall","src":"1966:11:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1960:5:16"},"nodeType":"YulFunctionCall","src":"1960:18:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1940:6:16"},"nodeType":"YulFunctionCall","src":"1940:39:16"},"nodeType":"YulExpressionStatement","src":"1940:39:16"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1887:1:16"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1884:2:16"},"nodeType":"YulFunctionCall","src":"1884:13:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1898:19:16","statements":[{"nodeType":"YulAssignment","src":"1900:15:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1909:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"1912:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1905:3:16"},"nodeType":"YulFunctionCall","src":"1905:10:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"1880:3:16","statements":[]},"src":"1876:113:16"},{"body":{"nodeType":"YulBlock","src":"2023:76:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2073:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"2078:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2069:3:16"},"nodeType":"YulFunctionCall","src":"2069:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"2087:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2062:6:16"},"nodeType":"YulFunctionCall","src":"2062:27:16"},"nodeType":"YulExpressionStatement","src":"2062:27:16"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2004:1:16"},{"name":"length","nodeType":"YulIdentifier","src":"2007:6:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2001:2:16"},"nodeType":"YulFunctionCall","src":"2001:13:16"},"nodeType":"YulIf","src":"1998:101:16"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1829:3:16","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1834:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"1839:6:16","type":""}],"src":"1798:307:16"},{"body":{"nodeType":"YulBlock","src":"2159:54:16","statements":[{"nodeType":"YulAssignment","src":"2169:38:16","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2187:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"2194:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:16"},"nodeType":"YulFunctionCall","src":"2183:14:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2203:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2199:3:16"},"nodeType":"YulFunctionCall","src":"2199:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2179:3:16"},"nodeType":"YulFunctionCall","src":"2179:28:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2169:6:16"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2142:5:16","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2152:6:16","type":""}],"src":"2111:102:16"},{"body":{"nodeType":"YulBlock","src":"2311:272:16","statements":[{"nodeType":"YulVariableDeclaration","src":"2321:53:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2368:5:16"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2335:32:16"},"nodeType":"YulFunctionCall","src":"2335:39:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2325:6:16","type":""}]},{"nodeType":"YulAssignment","src":"2383:78:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2449:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"2454:6:16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2390:58:16"},"nodeType":"YulFunctionCall","src":"2390:71:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2383:3:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2496:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"2503:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2492:3:16"},"nodeType":"YulFunctionCall","src":"2492:16:16"},{"name":"pos","nodeType":"YulIdentifier","src":"2510:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"2515:6:16"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2470:21:16"},"nodeType":"YulFunctionCall","src":"2470:52:16"},"nodeType":"YulExpressionStatement","src":"2470:52:16"},{"nodeType":"YulAssignment","src":"2531:46:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2542:3:16"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2569:6:16"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2547:21:16"},"nodeType":"YulFunctionCall","src":"2547:29:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2538:3:16"},"nodeType":"YulFunctionCall","src":"2538:39:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2531:3:16"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2292:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2299:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2307:3:16","type":""}],"src":"2219:364:16"},{"body":{"nodeType":"YulBlock","src":"2707:195:16","statements":[{"nodeType":"YulAssignment","src":"2717:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2729:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2740:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2725:3:16"},"nodeType":"YulFunctionCall","src":"2725:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2717:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2764:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2775:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2760:3:16"},"nodeType":"YulFunctionCall","src":"2760:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2783:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2779:3:16"},"nodeType":"YulFunctionCall","src":"2779:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2753:6:16"},"nodeType":"YulFunctionCall","src":"2753:47:16"},"nodeType":"YulExpressionStatement","src":"2753:47:16"},{"nodeType":"YulAssignment","src":"2809:86:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2881:6:16"},{"name":"tail","nodeType":"YulIdentifier","src":"2890:4:16"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2817:63:16"},"nodeType":"YulFunctionCall","src":"2817:78:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2809:4:16"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2679:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2691:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2702:4:16","type":""}],"src":"2589:313:16"},{"body":{"nodeType":"YulBlock","src":"2953:32:16","statements":[{"nodeType":"YulAssignment","src":"2963:16:16","value":{"name":"value","nodeType":"YulIdentifier","src":"2974:5:16"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2963:7:16"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2935:5:16","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2945:7:16","type":""}],"src":"2908:77:16"},{"body":{"nodeType":"YulBlock","src":"3034:79:16","statements":[{"body":{"nodeType":"YulBlock","src":"3091:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3100:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3093:6:16"},"nodeType":"YulFunctionCall","src":"3093:12:16"},"nodeType":"YulExpressionStatement","src":"3093:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3057:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3082:5:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3064:17:16"},"nodeType":"YulFunctionCall","src":"3064:24:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3054:2:16"},"nodeType":"YulFunctionCall","src":"3054:35:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3047:6:16"},"nodeType":"YulFunctionCall","src":"3047:43:16"},"nodeType":"YulIf","src":"3044:63:16"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3027:5:16","type":""}],"src":"2991:122:16"},{"body":{"nodeType":"YulBlock","src":"3171:87:16","statements":[{"nodeType":"YulAssignment","src":"3181:29:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3203:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3190:12:16"},"nodeType":"YulFunctionCall","src":"3190:20:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3181:5:16"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3246:5:16"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3219:26:16"},"nodeType":"YulFunctionCall","src":"3219:33:16"},"nodeType":"YulExpressionStatement","src":"3219:33:16"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3149:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"3157:3:16","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3165:5:16","type":""}],"src":"3119:139:16"},{"body":{"nodeType":"YulBlock","src":"3330:263:16","statements":[{"body":{"nodeType":"YulBlock","src":"3376:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3378:77:16"},"nodeType":"YulFunctionCall","src":"3378:79:16"},"nodeType":"YulExpressionStatement","src":"3378:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3351:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"3360:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3347:3:16"},"nodeType":"YulFunctionCall","src":"3347:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"3372:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3343:3:16"},"nodeType":"YulFunctionCall","src":"3343:32:16"},"nodeType":"YulIf","src":"3340:119:16"},{"nodeType":"YulBlock","src":"3469:117:16","statements":[{"nodeType":"YulVariableDeclaration","src":"3484:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"3498:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3488:6:16","type":""}]},{"nodeType":"YulAssignment","src":"3513:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"3559:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:16"},"nodeType":"YulFunctionCall","src":"3544:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3568:7:16"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3523:20:16"},"nodeType":"YulFunctionCall","src":"3523:53:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3513:6:16"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3300:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3311:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3323:6:16","type":""}],"src":"3264:329:16"},{"body":{"nodeType":"YulBlock","src":"3644:81:16","statements":[{"nodeType":"YulAssignment","src":"3654:65:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3669:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"3676:42:16","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3665:3:16"},"nodeType":"YulFunctionCall","src":"3665:54:16"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3654:7:16"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3626:5:16","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3636:7:16","type":""}],"src":"3599:126:16"},{"body":{"nodeType":"YulBlock","src":"3776:51:16","statements":[{"nodeType":"YulAssignment","src":"3786:35:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3815:5:16"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3797:17:16"},"nodeType":"YulFunctionCall","src":"3797:24:16"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3786:7:16"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3758:5:16","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3768:7:16","type":""}],"src":"3731:96:16"},{"body":{"nodeType":"YulBlock","src":"3898:53:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3915:3:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3938:5:16"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3920:17:16"},"nodeType":"YulFunctionCall","src":"3920:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3908:6:16"},"nodeType":"YulFunctionCall","src":"3908:37:16"},"nodeType":"YulExpressionStatement","src":"3908:37:16"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3886:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3893:3:16","type":""}],"src":"3833:118:16"},{"body":{"nodeType":"YulBlock","src":"4055:124:16","statements":[{"nodeType":"YulAssignment","src":"4065:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4077:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4073:3:16"},"nodeType":"YulFunctionCall","src":"4073:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4065:4:16"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4145:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4158:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4169:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4154:3:16"},"nodeType":"YulFunctionCall","src":"4154:17:16"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4101:43:16"},"nodeType":"YulFunctionCall","src":"4101:71:16"},"nodeType":"YulExpressionStatement","src":"4101:71:16"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4027:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4039:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4050:4:16","type":""}],"src":"3957:222:16"},{"body":{"nodeType":"YulBlock","src":"4228:79:16","statements":[{"body":{"nodeType":"YulBlock","src":"4285:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4294:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4287:6:16"},"nodeType":"YulFunctionCall","src":"4287:12:16"},"nodeType":"YulExpressionStatement","src":"4287:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4251:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4276:5:16"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4258:17:16"},"nodeType":"YulFunctionCall","src":"4258:24:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4248:2:16"},"nodeType":"YulFunctionCall","src":"4248:35:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4241:6:16"},"nodeType":"YulFunctionCall","src":"4241:43:16"},"nodeType":"YulIf","src":"4238:63:16"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4221:5:16","type":""}],"src":"4185:122:16"},{"body":{"nodeType":"YulBlock","src":"4365:87:16","statements":[{"nodeType":"YulAssignment","src":"4375:29:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4397:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4384:12:16"},"nodeType":"YulFunctionCall","src":"4384:20:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4375:5:16"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4440:5:16"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4413:26:16"},"nodeType":"YulFunctionCall","src":"4413:33:16"},"nodeType":"YulExpressionStatement","src":"4413:33:16"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4343:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"4351:3:16","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4359:5:16","type":""}],"src":"4313:139:16"},{"body":{"nodeType":"YulBlock","src":"4541:391:16","statements":[{"body":{"nodeType":"YulBlock","src":"4587:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4589:77:16"},"nodeType":"YulFunctionCall","src":"4589:79:16"},"nodeType":"YulExpressionStatement","src":"4589:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4562:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4558:3:16"},"nodeType":"YulFunctionCall","src":"4558:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"4583:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4554:3:16"},"nodeType":"YulFunctionCall","src":"4554:32:16"},"nodeType":"YulIf","src":"4551:119:16"},{"nodeType":"YulBlock","src":"4680:117:16","statements":[{"nodeType":"YulVariableDeclaration","src":"4695:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"4709:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4699:6:16","type":""}]},{"nodeType":"YulAssignment","src":"4724:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4759:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"4770:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4755:3:16"},"nodeType":"YulFunctionCall","src":"4755:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4779:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4734:20:16"},"nodeType":"YulFunctionCall","src":"4734:53:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4724:6:16"}]}]},{"nodeType":"YulBlock","src":"4807:118:16","statements":[{"nodeType":"YulVariableDeclaration","src":"4822:16:16","value":{"kind":"number","nodeType":"YulLiteral","src":"4836:2:16","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4826:6:16","type":""}]},{"nodeType":"YulAssignment","src":"4852:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4887:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"4898:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4883:3:16"},"nodeType":"YulFunctionCall","src":"4883:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4907:7:16"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4862:20:16"},"nodeType":"YulFunctionCall","src":"4862:53:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4852:6:16"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4503:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4514:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4526:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4534:6:16","type":""}],"src":"4458:474:16"},{"body":{"nodeType":"YulBlock","src":"5038:519:16","statements":[{"body":{"nodeType":"YulBlock","src":"5084:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5086:77:16"},"nodeType":"YulFunctionCall","src":"5086:79:16"},"nodeType":"YulExpressionStatement","src":"5086:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5059:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"5068:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5055:3:16"},"nodeType":"YulFunctionCall","src":"5055:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"5080:2:16","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5051:3:16"},"nodeType":"YulFunctionCall","src":"5051:32:16"},"nodeType":"YulIf","src":"5048:119:16"},{"nodeType":"YulBlock","src":"5177:117:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5192:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"5206:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5196:6:16","type":""}]},{"nodeType":"YulAssignment","src":"5221:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5256:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"5267:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5252:3:16"},"nodeType":"YulFunctionCall","src":"5252:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5276:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5231:20:16"},"nodeType":"YulFunctionCall","src":"5231:53:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5221:6:16"}]}]},{"nodeType":"YulBlock","src":"5304:118:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5319:16:16","value":{"kind":"number","nodeType":"YulLiteral","src":"5333:2:16","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5323:6:16","type":""}]},{"nodeType":"YulAssignment","src":"5349:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5384:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"5395:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5380:3:16"},"nodeType":"YulFunctionCall","src":"5380:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5404:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5359:20:16"},"nodeType":"YulFunctionCall","src":"5359:53:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5349:6:16"}]}]},{"nodeType":"YulBlock","src":"5432:118:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5447:16:16","value":{"kind":"number","nodeType":"YulLiteral","src":"5461:2:16","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5451:6:16","type":""}]},{"nodeType":"YulAssignment","src":"5477:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5512:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"5523:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5508:3:16"},"nodeType":"YulFunctionCall","src":"5508:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5532:7:16"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5487:20:16"},"nodeType":"YulFunctionCall","src":"5487:53:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5477:6:16"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4992:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5003:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5015:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5023:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5031:6:16","type":""}],"src":"4938:619:16"},{"body":{"nodeType":"YulBlock","src":"5652:28:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5669:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5672:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5662:6:16"},"nodeType":"YulFunctionCall","src":"5662:12:16"},"nodeType":"YulExpressionStatement","src":"5662:12:16"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"5563:117:16"},{"body":{"nodeType":"YulBlock","src":"5775:28:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5792:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5795:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5785:6:16"},"nodeType":"YulFunctionCall","src":"5785:12:16"},"nodeType":"YulExpressionStatement","src":"5785:12:16"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"5686:117:16"},{"body":{"nodeType":"YulBlock","src":"5837:152:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5854:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5857:77:16","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5847:6:16"},"nodeType":"YulFunctionCall","src":"5847:88:16"},"nodeType":"YulExpressionStatement","src":"5847:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5951:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5954:4:16","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5944:6:16"},"nodeType":"YulFunctionCall","src":"5944:15:16"},"nodeType":"YulExpressionStatement","src":"5944:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5975:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5978:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5968:6:16"},"nodeType":"YulFunctionCall","src":"5968:15:16"},"nodeType":"YulExpressionStatement","src":"5968:15:16"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5809:180:16"},{"body":{"nodeType":"YulBlock","src":"6038:238:16","statements":[{"nodeType":"YulVariableDeclaration","src":"6048:58:16","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6070:6:16"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6100:4:16"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6078:21:16"},"nodeType":"YulFunctionCall","src":"6078:27:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6066:3:16"},"nodeType":"YulFunctionCall","src":"6066:40:16"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"6052:10:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"6217:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6219:16:16"},"nodeType":"YulFunctionCall","src":"6219:18:16"},"nodeType":"YulExpressionStatement","src":"6219:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6160:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"6172:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6157:2:16"},"nodeType":"YulFunctionCall","src":"6157:34:16"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6196:10:16"},{"name":"memPtr","nodeType":"YulIdentifier","src":"6208:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6193:2:16"},"nodeType":"YulFunctionCall","src":"6193:22:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6154:2:16"},"nodeType":"YulFunctionCall","src":"6154:62:16"},"nodeType":"YulIf","src":"6151:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6255:2:16","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6259:10:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6248:6:16"},"nodeType":"YulFunctionCall","src":"6248:22:16"},"nodeType":"YulExpressionStatement","src":"6248:22:16"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6024:6:16","type":""},{"name":"size","nodeType":"YulTypedName","src":"6032:4:16","type":""}],"src":"5995:281:16"},{"body":{"nodeType":"YulBlock","src":"6323:88:16","statements":[{"nodeType":"YulAssignment","src":"6333:30:16","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"6343:18:16"},"nodeType":"YulFunctionCall","src":"6343:20:16"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6333:6:16"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6392:6:16"},{"name":"size","nodeType":"YulIdentifier","src":"6400:4:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"6372:19:16"},"nodeType":"YulFunctionCall","src":"6372:33:16"},"nodeType":"YulExpressionStatement","src":"6372:33:16"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"6307:4:16","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6316:6:16","type":""}],"src":"6282:129:16"},{"body":{"nodeType":"YulBlock","src":"6484:241:16","statements":[{"body":{"nodeType":"YulBlock","src":"6589:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6591:16:16"},"nodeType":"YulFunctionCall","src":"6591:18:16"},"nodeType":"YulExpressionStatement","src":"6591:18:16"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6561:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"6569:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6558:2:16"},"nodeType":"YulFunctionCall","src":"6558:30:16"},"nodeType":"YulIf","src":"6555:56:16"},{"nodeType":"YulAssignment","src":"6621:37:16","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6651:6:16"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6629:21:16"},"nodeType":"YulFunctionCall","src":"6629:29:16"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6621:4:16"}]},{"nodeType":"YulAssignment","src":"6695:23:16","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6707:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"6713:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6703:3:16"},"nodeType":"YulFunctionCall","src":"6703:15:16"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6695:4:16"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"6468:6:16","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"6479:4:16","type":""}],"src":"6417:308:16"},{"body":{"nodeType":"YulBlock","src":"6782:103:16","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6805:3:16"},{"name":"src","nodeType":"YulIdentifier","src":"6810:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"6815:6:16"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"6792:12:16"},"nodeType":"YulFunctionCall","src":"6792:30:16"},"nodeType":"YulExpressionStatement","src":"6792:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6863:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"6868:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6859:3:16"},"nodeType":"YulFunctionCall","src":"6859:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"6877:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6852:6:16"},"nodeType":"YulFunctionCall","src":"6852:27:16"},"nodeType":"YulExpressionStatement","src":"6852:27:16"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6764:3:16","type":""},{"name":"dst","nodeType":"YulTypedName","src":"6769:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"6774:6:16","type":""}],"src":"6731:154:16"},{"body":{"nodeType":"YulBlock","src":"6975:328:16","statements":[{"nodeType":"YulAssignment","src":"6985:75:16","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7052:6:16"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7010:41:16"},"nodeType":"YulFunctionCall","src":"7010:49:16"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6994:15:16"},"nodeType":"YulFunctionCall","src":"6994:66:16"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6985:5:16"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7076:5:16"},{"name":"length","nodeType":"YulIdentifier","src":"7083:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7069:6:16"},"nodeType":"YulFunctionCall","src":"7069:21:16"},"nodeType":"YulExpressionStatement","src":"7069:21:16"},{"nodeType":"YulVariableDeclaration","src":"7099:27:16","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7114:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"7121:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7110:3:16"},"nodeType":"YulFunctionCall","src":"7110:16:16"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7103:3:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"7164:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"7166:77:16"},"nodeType":"YulFunctionCall","src":"7166:79:16"},"nodeType":"YulExpressionStatement","src":"7166:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7145:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"7150:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7141:3:16"},"nodeType":"YulFunctionCall","src":"7141:16:16"},{"name":"end","nodeType":"YulIdentifier","src":"7159:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7138:2:16"},"nodeType":"YulFunctionCall","src":"7138:25:16"},"nodeType":"YulIf","src":"7135:112:16"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7280:3:16"},{"name":"dst","nodeType":"YulIdentifier","src":"7285:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"7290:6:16"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"7256:23:16"},"nodeType":"YulFunctionCall","src":"7256:41:16"},"nodeType":"YulExpressionStatement","src":"7256:41:16"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6948:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"6953:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"6961:3:16","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6969:5:16","type":""}],"src":"6891:412:16"},{"body":{"nodeType":"YulBlock","src":"7385:278:16","statements":[{"body":{"nodeType":"YulBlock","src":"7434:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"7436:77:16"},"nodeType":"YulFunctionCall","src":"7436:79:16"},"nodeType":"YulExpressionStatement","src":"7436:79:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7413:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"7421:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7409:3:16"},"nodeType":"YulFunctionCall","src":"7409:17:16"},{"name":"end","nodeType":"YulIdentifier","src":"7428:3:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7405:3:16"},"nodeType":"YulFunctionCall","src":"7405:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7398:6:16"},"nodeType":"YulFunctionCall","src":"7398:35:16"},"nodeType":"YulIf","src":"7395:122:16"},{"nodeType":"YulVariableDeclaration","src":"7526:34:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7553:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7540:12:16"},"nodeType":"YulFunctionCall","src":"7540:20:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7530:6:16","type":""}]},{"nodeType":"YulAssignment","src":"7569:88:16","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7630:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"7638:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7626:3:16"},"nodeType":"YulFunctionCall","src":"7626:17:16"},{"name":"length","nodeType":"YulIdentifier","src":"7645:6:16"},{"name":"end","nodeType":"YulIdentifier","src":"7653:3:16"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7578:47:16"},"nodeType":"YulFunctionCall","src":"7578:79:16"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7569:5:16"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7363:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"7371:3:16","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7379:5:16","type":""}],"src":"7323:340:16"},{"body":{"nodeType":"YulBlock","src":"7799:1029:16","statements":[{"body":{"nodeType":"YulBlock","src":"7845:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7847:77:16"},"nodeType":"YulFunctionCall","src":"7847:79:16"},"nodeType":"YulExpressionStatement","src":"7847:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7820:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"7829:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7816:3:16"},"nodeType":"YulFunctionCall","src":"7816:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"7841:2:16","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7812:3:16"},"nodeType":"YulFunctionCall","src":"7812:32:16"},"nodeType":"YulIf","src":"7809:119:16"},{"nodeType":"YulBlock","src":"7938:287:16","statements":[{"nodeType":"YulVariableDeclaration","src":"7953:45:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7984:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"7995:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7980:3:16"},"nodeType":"YulFunctionCall","src":"7980:17:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7967:12:16"},"nodeType":"YulFunctionCall","src":"7967:31:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7957:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"8045:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8047:77:16"},"nodeType":"YulFunctionCall","src":"8047:79:16"},"nodeType":"YulExpressionStatement","src":"8047:79:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8017:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"8025:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8014:2:16"},"nodeType":"YulFunctionCall","src":"8014:30:16"},"nodeType":"YulIf","src":"8011:117:16"},{"nodeType":"YulAssignment","src":"8142:73:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8187:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"8198:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8183:3:16"},"nodeType":"YulFunctionCall","src":"8183:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8207:7:16"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8152:30:16"},"nodeType":"YulFunctionCall","src":"8152:63:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8142:6:16"}]}]},{"nodeType":"YulBlock","src":"8235:288:16","statements":[{"nodeType":"YulVariableDeclaration","src":"8250:46:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8281:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8292:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8277:3:16"},"nodeType":"YulFunctionCall","src":"8277:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8264:12:16"},"nodeType":"YulFunctionCall","src":"8264:32:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8254:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"8343:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8345:77:16"},"nodeType":"YulFunctionCall","src":"8345:79:16"},"nodeType":"YulExpressionStatement","src":"8345:79:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8315:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"8323:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8312:2:16"},"nodeType":"YulFunctionCall","src":"8312:30:16"},"nodeType":"YulIf","src":"8309:117:16"},{"nodeType":"YulAssignment","src":"8440:73:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8485:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"8496:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8481:3:16"},"nodeType":"YulFunctionCall","src":"8481:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8505:7:16"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8450:30:16"},"nodeType":"YulFunctionCall","src":"8450:63:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8440:6:16"}]}]},{"nodeType":"YulBlock","src":"8533:288:16","statements":[{"nodeType":"YulVariableDeclaration","src":"8548:46:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8579:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8590:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8575:3:16"},"nodeType":"YulFunctionCall","src":"8575:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8562:12:16"},"nodeType":"YulFunctionCall","src":"8562:32:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8552:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"8641:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8643:77:16"},"nodeType":"YulFunctionCall","src":"8643:79:16"},"nodeType":"YulExpressionStatement","src":"8643:79:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8613:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"8621:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8610:2:16"},"nodeType":"YulFunctionCall","src":"8610:30:16"},"nodeType":"YulIf","src":"8607:117:16"},{"nodeType":"YulAssignment","src":"8738:73:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8783:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"8794:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8779:3:16"},"nodeType":"YulFunctionCall","src":"8779:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8803:7:16"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8748:30:16"},"nodeType":"YulFunctionCall","src":"8748:63:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8738:6:16"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7753:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7764:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7776:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7784:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7792:6:16","type":""}],"src":"7669:1159:16"},{"body":{"nodeType":"YulBlock","src":"8892:40:16","statements":[{"nodeType":"YulAssignment","src":"8903:22:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8919:5:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8913:5:16"},"nodeType":"YulFunctionCall","src":"8913:12:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8903:6:16"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8875:5:16","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8885:6:16","type":""}],"src":"8834:98:16"},{"body":{"nodeType":"YulBlock","src":"9033:73:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9050:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"9055:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9043:6:16"},"nodeType":"YulFunctionCall","src":"9043:19:16"},"nodeType":"YulExpressionStatement","src":"9043:19:16"},{"nodeType":"YulAssignment","src":"9071:29:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9090:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"9095:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9086:3:16"},"nodeType":"YulFunctionCall","src":"9086:14:16"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9071:11:16"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9005:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"9010:6:16","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9021:11:16","type":""}],"src":"8938:168:16"},{"body":{"nodeType":"YulBlock","src":"9202:270:16","statements":[{"nodeType":"YulVariableDeclaration","src":"9212:52:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9258:5:16"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9226:31:16"},"nodeType":"YulFunctionCall","src":"9226:38:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9216:6:16","type":""}]},{"nodeType":"YulAssignment","src":"9273:77:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9338:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"9343:6:16"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9280:57:16"},"nodeType":"YulFunctionCall","src":"9280:70:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9273:3:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9385:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"9392:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9381:3:16"},"nodeType":"YulFunctionCall","src":"9381:16:16"},{"name":"pos","nodeType":"YulIdentifier","src":"9399:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"9404:6:16"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9359:21:16"},"nodeType":"YulFunctionCall","src":"9359:52:16"},"nodeType":"YulExpressionStatement","src":"9359:52:16"},{"nodeType":"YulAssignment","src":"9420:46:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9431:3:16"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9458:6:16"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9436:21:16"},"nodeType":"YulFunctionCall","src":"9436:29:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9427:3:16"},"nodeType":"YulFunctionCall","src":"9427:39:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9420:3:16"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9183:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9190:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9198:3:16","type":""}],"src":"9112:360:16"},{"body":{"nodeType":"YulBlock","src":"9594:193:16","statements":[{"nodeType":"YulAssignment","src":"9604:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9616:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9627:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9612:3:16"},"nodeType":"YulFunctionCall","src":"9612:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9604:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9651:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9662:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9647:3:16"},"nodeType":"YulFunctionCall","src":"9647:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9670:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"9676:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9666:3:16"},"nodeType":"YulFunctionCall","src":"9666:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9640:6:16"},"nodeType":"YulFunctionCall","src":"9640:47:16"},"nodeType":"YulExpressionStatement","src":"9640:47:16"},{"nodeType":"YulAssignment","src":"9696:84:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9766:6:16"},{"name":"tail","nodeType":"YulIdentifier","src":"9775:4:16"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9704:61:16"},"nodeType":"YulFunctionCall","src":"9704:76:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9696:4:16"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9566:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9578:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9589:4:16","type":""}],"src":"9478:309:16"},{"body":{"nodeType":"YulBlock","src":"9859:263:16","statements":[{"body":{"nodeType":"YulBlock","src":"9905:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9907:77:16"},"nodeType":"YulFunctionCall","src":"9907:79:16"},"nodeType":"YulExpressionStatement","src":"9907:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9880:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"9889:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9876:3:16"},"nodeType":"YulFunctionCall","src":"9876:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"9901:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9872:3:16"},"nodeType":"YulFunctionCall","src":"9872:32:16"},"nodeType":"YulIf","src":"9869:119:16"},{"nodeType":"YulBlock","src":"9998:117:16","statements":[{"nodeType":"YulVariableDeclaration","src":"10013:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"10027:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10017:6:16","type":""}]},{"nodeType":"YulAssignment","src":"10042:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10077:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"10088:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10073:3:16"},"nodeType":"YulFunctionCall","src":"10073:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10097:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10052:20:16"},"nodeType":"YulFunctionCall","src":"10052:53:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10042:6:16"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9829:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9840:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9852:6:16","type":""}],"src":"9793:329:16"},{"body":{"nodeType":"YulBlock","src":"10193:53:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10210:3:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10233:5:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10215:17:16"},"nodeType":"YulFunctionCall","src":"10215:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10203:6:16"},"nodeType":"YulFunctionCall","src":"10203:37:16"},"nodeType":"YulExpressionStatement","src":"10203:37:16"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10181:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10188:3:16","type":""}],"src":"10128:118:16"},{"body":{"nodeType":"YulBlock","src":"10350:124:16","statements":[{"nodeType":"YulAssignment","src":"10360:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10372:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10383:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10368:3:16"},"nodeType":"YulFunctionCall","src":"10368:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10360:4:16"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10440:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10453:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10464:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10449:3:16"},"nodeType":"YulFunctionCall","src":"10449:17:16"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"10396:43:16"},"nodeType":"YulFunctionCall","src":"10396:71:16"},"nodeType":"YulExpressionStatement","src":"10396:71:16"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10322:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10334:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10345:4:16","type":""}],"src":"10252:222:16"},{"body":{"nodeType":"YulBlock","src":"10573:561:16","statements":[{"body":{"nodeType":"YulBlock","src":"10619:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10621:77:16"},"nodeType":"YulFunctionCall","src":"10621:79:16"},"nodeType":"YulExpressionStatement","src":"10621:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10594:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"10603:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10590:3:16"},"nodeType":"YulFunctionCall","src":"10590:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"10615:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10586:3:16"},"nodeType":"YulFunctionCall","src":"10586:32:16"},"nodeType":"YulIf","src":"10583:119:16"},{"nodeType":"YulBlock","src":"10712:117:16","statements":[{"nodeType":"YulVariableDeclaration","src":"10727:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"10741:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10731:6:16","type":""}]},{"nodeType":"YulAssignment","src":"10756:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10791:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"10802:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10787:3:16"},"nodeType":"YulFunctionCall","src":"10787:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10811:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10766:20:16"},"nodeType":"YulFunctionCall","src":"10766:53:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10756:6:16"}]}]},{"nodeType":"YulBlock","src":"10839:288:16","statements":[{"nodeType":"YulVariableDeclaration","src":"10854:46:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10885:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10896:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10881:3:16"},"nodeType":"YulFunctionCall","src":"10881:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10868:12:16"},"nodeType":"YulFunctionCall","src":"10868:32:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10858:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"10947:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"10949:77:16"},"nodeType":"YulFunctionCall","src":"10949:79:16"},"nodeType":"YulExpressionStatement","src":"10949:79:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10919:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"10927:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10916:2:16"},"nodeType":"YulFunctionCall","src":"10916:30:16"},"nodeType":"YulIf","src":"10913:117:16"},{"nodeType":"YulAssignment","src":"11044:73:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11089:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"11100:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11085:3:16"},"nodeType":"YulFunctionCall","src":"11085:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11109:7:16"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11054:30:16"},"nodeType":"YulFunctionCall","src":"11054:63:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11044:6:16"}]}]}]},"name":"abi_decode_tuple_t_addresst_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10535:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10546:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10558:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10566:6:16","type":""}],"src":"10480:654:16"},{"body":{"nodeType":"YulBlock","src":"11180:76:16","statements":[{"body":{"nodeType":"YulBlock","src":"11234:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11243:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11246:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11236:6:16"},"nodeType":"YulFunctionCall","src":"11236:12:16"},"nodeType":"YulExpressionStatement","src":"11236:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11203:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11225:5:16"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"11210:14:16"},"nodeType":"YulFunctionCall","src":"11210:21:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11200:2:16"},"nodeType":"YulFunctionCall","src":"11200:32:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11193:6:16"},"nodeType":"YulFunctionCall","src":"11193:40:16"},"nodeType":"YulIf","src":"11190:60:16"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11173:5:16","type":""}],"src":"11140:116:16"},{"body":{"nodeType":"YulBlock","src":"11311:84:16","statements":[{"nodeType":"YulAssignment","src":"11321:29:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11343:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11330:12:16"},"nodeType":"YulFunctionCall","src":"11330:20:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11321:5:16"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11383:5:16"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"11359:23:16"},"nodeType":"YulFunctionCall","src":"11359:30:16"},"nodeType":"YulExpressionStatement","src":"11359:30:16"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11289:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"11297:3:16","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"11305:5:16","type":""}],"src":"11262:133:16"},{"body":{"nodeType":"YulBlock","src":"11481:388:16","statements":[{"body":{"nodeType":"YulBlock","src":"11527:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11529:77:16"},"nodeType":"YulFunctionCall","src":"11529:79:16"},"nodeType":"YulExpressionStatement","src":"11529:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11502:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"11511:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11498:3:16"},"nodeType":"YulFunctionCall","src":"11498:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"11523:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11494:3:16"},"nodeType":"YulFunctionCall","src":"11494:32:16"},"nodeType":"YulIf","src":"11491:119:16"},{"nodeType":"YulBlock","src":"11620:117:16","statements":[{"nodeType":"YulVariableDeclaration","src":"11635:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"11649:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11639:6:16","type":""}]},{"nodeType":"YulAssignment","src":"11664:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11699:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"11710:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11695:3:16"},"nodeType":"YulFunctionCall","src":"11695:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11719:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11674:20:16"},"nodeType":"YulFunctionCall","src":"11674:53:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11664:6:16"}]}]},{"nodeType":"YulBlock","src":"11747:115:16","statements":[{"nodeType":"YulVariableDeclaration","src":"11762:16:16","value":{"kind":"number","nodeType":"YulLiteral","src":"11776:2:16","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11766:6:16","type":""}]},{"nodeType":"YulAssignment","src":"11792:60:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11824:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"11835:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11820:3:16"},"nodeType":"YulFunctionCall","src":"11820:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11844:7:16"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"11802:17:16"},"nodeType":"YulFunctionCall","src":"11802:50:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11792:6:16"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11443:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11454:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11466:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11474:6:16","type":""}],"src":"11401:468:16"},{"body":{"nodeType":"YulBlock","src":"11941:241:16","statements":[{"body":{"nodeType":"YulBlock","src":"12046:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12048:16:16"},"nodeType":"YulFunctionCall","src":"12048:18:16"},"nodeType":"YulExpressionStatement","src":"12048:18:16"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12018:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"12026:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12015:2:16"},"nodeType":"YulFunctionCall","src":"12015:30:16"},"nodeType":"YulIf","src":"12012:56:16"},{"nodeType":"YulAssignment","src":"12078:37:16","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12108:6:16"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"12086:21:16"},"nodeType":"YulFunctionCall","src":"12086:29:16"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12078:4:16"}]},{"nodeType":"YulAssignment","src":"12152:23:16","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"12164:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"12170:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12160:3:16"},"nodeType":"YulFunctionCall","src":"12160:15:16"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12152:4:16"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"11925:6:16","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"11936:4:16","type":""}],"src":"11875:307:16"},{"body":{"nodeType":"YulBlock","src":"12271:327:16","statements":[{"nodeType":"YulAssignment","src":"12281:74:16","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12347:6:16"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"12306:40:16"},"nodeType":"YulFunctionCall","src":"12306:48:16"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"12290:15:16"},"nodeType":"YulFunctionCall","src":"12290:65:16"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"12281:5:16"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"12371:5:16"},{"name":"length","nodeType":"YulIdentifier","src":"12378:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12364:6:16"},"nodeType":"YulFunctionCall","src":"12364:21:16"},"nodeType":"YulExpressionStatement","src":"12364:21:16"},{"nodeType":"YulVariableDeclaration","src":"12394:27:16","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"12409:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"12416:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12405:3:16"},"nodeType":"YulFunctionCall","src":"12405:16:16"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"12398:3:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"12459:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"12461:77:16"},"nodeType":"YulFunctionCall","src":"12461:79:16"},"nodeType":"YulExpressionStatement","src":"12461:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12440:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"12445:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12436:3:16"},"nodeType":"YulFunctionCall","src":"12436:16:16"},{"name":"end","nodeType":"YulIdentifier","src":"12454:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12433:2:16"},"nodeType":"YulFunctionCall","src":"12433:25:16"},"nodeType":"YulIf","src":"12430:112:16"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12575:3:16"},{"name":"dst","nodeType":"YulIdentifier","src":"12580:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"12585:6:16"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"12551:23:16"},"nodeType":"YulFunctionCall","src":"12551:41:16"},"nodeType":"YulExpressionStatement","src":"12551:41:16"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12244:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"12249:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"12257:3:16","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"12265:5:16","type":""}],"src":"12188:410:16"},{"body":{"nodeType":"YulBlock","src":"12678:277:16","statements":[{"body":{"nodeType":"YulBlock","src":"12727:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"12729:77:16"},"nodeType":"YulFunctionCall","src":"12729:79:16"},"nodeType":"YulExpressionStatement","src":"12729:79:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12706:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"12714:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12702:3:16"},"nodeType":"YulFunctionCall","src":"12702:17:16"},{"name":"end","nodeType":"YulIdentifier","src":"12721:3:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12698:3:16"},"nodeType":"YulFunctionCall","src":"12698:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12691:6:16"},"nodeType":"YulFunctionCall","src":"12691:35:16"},"nodeType":"YulIf","src":"12688:122:16"},{"nodeType":"YulVariableDeclaration","src":"12819:34:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12846:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12833:12:16"},"nodeType":"YulFunctionCall","src":"12833:20:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12823:6:16","type":""}]},{"nodeType":"YulAssignment","src":"12862:87:16","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12922:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"12930:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12918:3:16"},"nodeType":"YulFunctionCall","src":"12918:17:16"},{"name":"length","nodeType":"YulIdentifier","src":"12937:6:16"},{"name":"end","nodeType":"YulIdentifier","src":"12945:3:16"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"12871:46:16"},"nodeType":"YulFunctionCall","src":"12871:78:16"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"12862:5:16"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"12656:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"12664:3:16","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"12672:5:16","type":""}],"src":"12617:338:16"},{"body":{"nodeType":"YulBlock","src":"13087:817:16","statements":[{"body":{"nodeType":"YulBlock","src":"13134:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13136:77:16"},"nodeType":"YulFunctionCall","src":"13136:79:16"},"nodeType":"YulExpressionStatement","src":"13136:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13108:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"13117:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13104:3:16"},"nodeType":"YulFunctionCall","src":"13104:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"13129:3:16","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13100:3:16"},"nodeType":"YulFunctionCall","src":"13100:33:16"},"nodeType":"YulIf","src":"13097:120:16"},{"nodeType":"YulBlock","src":"13227:117:16","statements":[{"nodeType":"YulVariableDeclaration","src":"13242:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"13256:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13246:6:16","type":""}]},{"nodeType":"YulAssignment","src":"13271:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13306:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"13317:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13302:3:16"},"nodeType":"YulFunctionCall","src":"13302:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13326:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13281:20:16"},"nodeType":"YulFunctionCall","src":"13281:53:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13271:6:16"}]}]},{"nodeType":"YulBlock","src":"13354:118:16","statements":[{"nodeType":"YulVariableDeclaration","src":"13369:16:16","value":{"kind":"number","nodeType":"YulLiteral","src":"13383:2:16","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13373:6:16","type":""}]},{"nodeType":"YulAssignment","src":"13399:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13434:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"13445:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13430:3:16"},"nodeType":"YulFunctionCall","src":"13430:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13454:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13409:20:16"},"nodeType":"YulFunctionCall","src":"13409:53:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13399:6:16"}]}]},{"nodeType":"YulBlock","src":"13482:118:16","statements":[{"nodeType":"YulVariableDeclaration","src":"13497:16:16","value":{"kind":"number","nodeType":"YulLiteral","src":"13511:2:16","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13501:6:16","type":""}]},{"nodeType":"YulAssignment","src":"13527:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13562:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"13573:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13558:3:16"},"nodeType":"YulFunctionCall","src":"13558:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13582:7:16"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"13537:20:16"},"nodeType":"YulFunctionCall","src":"13537:53:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"13527:6:16"}]}]},{"nodeType":"YulBlock","src":"13610:287:16","statements":[{"nodeType":"YulVariableDeclaration","src":"13625:46:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13656:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13667:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13652:3:16"},"nodeType":"YulFunctionCall","src":"13652:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13639:12:16"},"nodeType":"YulFunctionCall","src":"13639:32:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13629:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"13718:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"13720:77:16"},"nodeType":"YulFunctionCall","src":"13720:79:16"},"nodeType":"YulExpressionStatement","src":"13720:79:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13690:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"13698:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13687:2:16"},"nodeType":"YulFunctionCall","src":"13687:30:16"},"nodeType":"YulIf","src":"13684:117:16"},{"nodeType":"YulAssignment","src":"13815:72:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13859:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"13870:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13855:3:16"},"nodeType":"YulFunctionCall","src":"13855:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13879:7:16"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13825:29:16"},"nodeType":"YulFunctionCall","src":"13825:62:16"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"13815:6:16"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13033:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13044:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13056:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13064:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13072:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13080:6:16","type":""}],"src":"12961:943:16"},{"body":{"nodeType":"YulBlock","src":"13993:391:16","statements":[{"body":{"nodeType":"YulBlock","src":"14039:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14041:77:16"},"nodeType":"YulFunctionCall","src":"14041:79:16"},"nodeType":"YulExpressionStatement","src":"14041:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14014:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"14023:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14010:3:16"},"nodeType":"YulFunctionCall","src":"14010:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"14035:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14006:3:16"},"nodeType":"YulFunctionCall","src":"14006:32:16"},"nodeType":"YulIf","src":"14003:119:16"},{"nodeType":"YulBlock","src":"14132:117:16","statements":[{"nodeType":"YulVariableDeclaration","src":"14147:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"14161:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14151:6:16","type":""}]},{"nodeType":"YulAssignment","src":"14176:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14211:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"14222:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14207:3:16"},"nodeType":"YulFunctionCall","src":"14207:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14231:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14186:20:16"},"nodeType":"YulFunctionCall","src":"14186:53:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14176:6:16"}]}]},{"nodeType":"YulBlock","src":"14259:118:16","statements":[{"nodeType":"YulVariableDeclaration","src":"14274:16:16","value":{"kind":"number","nodeType":"YulLiteral","src":"14288:2:16","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14278:6:16","type":""}]},{"nodeType":"YulAssignment","src":"14304:63:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14339:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"14350:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14335:3:16"},"nodeType":"YulFunctionCall","src":"14335:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14359:7:16"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14314:20:16"},"nodeType":"YulFunctionCall","src":"14314:53:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14304:6:16"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13955:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13966:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13978:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13986:6:16","type":""}],"src":"13910:474:16"},{"body":{"nodeType":"YulBlock","src":"14445:53:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14462:3:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14485:5:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"14467:17:16"},"nodeType":"YulFunctionCall","src":"14467:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14455:6:16"},"nodeType":"YulFunctionCall","src":"14455:37:16"},"nodeType":"YulExpressionStatement","src":"14455:37:16"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14433:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14440:3:16","type":""}],"src":"14390:108:16"},{"body":{"nodeType":"YulBlock","src":"14559:53:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14576:3:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14599:5:16"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"14581:17:16"},"nodeType":"YulFunctionCall","src":"14581:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14569:6:16"},"nodeType":"YulFunctionCall","src":"14569:37:16"},"nodeType":"YulExpressionStatement","src":"14569:37:16"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14547:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14554:3:16","type":""}],"src":"14504:108:16"},{"body":{"nodeType":"YulBlock","src":"14704:73:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14721:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"14726:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14714:6:16"},"nodeType":"YulFunctionCall","src":"14714:19:16"},"nodeType":"YulExpressionStatement","src":"14714:19:16"},{"nodeType":"YulAssignment","src":"14742:29:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14761:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"14766:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14757:3:16"},"nodeType":"YulFunctionCall","src":"14757:14:16"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14742:11:16"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14676:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"14681:6:16","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"14692:11:16","type":""}],"src":"14618:159:16"},{"body":{"nodeType":"YulBlock","src":"14865:262:16","statements":[{"nodeType":"YulVariableDeclaration","src":"14875:53:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14922:5:16"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"14889:32:16"},"nodeType":"YulFunctionCall","src":"14889:39:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14879:6:16","type":""}]},{"nodeType":"YulAssignment","src":"14937:68:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14993:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"14998:6:16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulIdentifier","src":"14944:48:16"},"nodeType":"YulFunctionCall","src":"14944:61:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14937:3:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15040:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"15047:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15036:3:16"},"nodeType":"YulFunctionCall","src":"15036:16:16"},{"name":"pos","nodeType":"YulIdentifier","src":"15054:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"15059:6:16"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"15014:21:16"},"nodeType":"YulFunctionCall","src":"15014:52:16"},"nodeType":"YulExpressionStatement","src":"15014:52:16"},{"nodeType":"YulAssignment","src":"15075:46:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15086:3:16"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15113:6:16"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"15091:21:16"},"nodeType":"YulFunctionCall","src":"15091:29:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15082:3:16"},"nodeType":"YulFunctionCall","src":"15082:39:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15075:3:16"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14846:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14853:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14861:3:16","type":""}],"src":"14783:344:16"},{"body":{"nodeType":"YulBlock","src":"15295:1148:16","statements":[{"nodeType":"YulVariableDeclaration","src":"15305:26:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15321:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"15326:4:16","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15317:3:16"},"nodeType":"YulFunctionCall","src":"15317:14:16"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"15309:4:16","type":""}]},{"nodeType":"YulBlock","src":"15341:162:16","statements":[{"nodeType":"YulVariableDeclaration","src":"15374:43:16","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15404:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"15411:4:16","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15400:3:16"},"nodeType":"YulFunctionCall","src":"15400:16:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15394:5:16"},"nodeType":"YulFunctionCall","src":"15394:23:16"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15378:12:16","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15464:12:16"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15482:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"15487:4:16","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15478:3:16"},"nodeType":"YulFunctionCall","src":"15478:14:16"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"15430:33:16"},"nodeType":"YulFunctionCall","src":"15430:63:16"},"nodeType":"YulExpressionStatement","src":"15430:63:16"}]},{"nodeType":"YulBlock","src":"15513:167:16","statements":[{"nodeType":"YulVariableDeclaration","src":"15551:43:16","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15581:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"15588:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15577:3:16"},"nodeType":"YulFunctionCall","src":"15577:16:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15571:5:16"},"nodeType":"YulFunctionCall","src":"15571:23:16"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15555:12:16","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15641:12:16"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15659:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"15664:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15655:3:16"},"nodeType":"YulFunctionCall","src":"15655:14:16"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"15607:33:16"},"nodeType":"YulFunctionCall","src":"15607:63:16"},"nodeType":"YulExpressionStatement","src":"15607:63:16"}]},{"nodeType":"YulBlock","src":"15690:235:16","statements":[{"nodeType":"YulVariableDeclaration","src":"15725:43:16","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15755:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"15762:4:16","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15751:3:16"},"nodeType":"YulFunctionCall","src":"15751:16:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15745:5:16"},"nodeType":"YulFunctionCall","src":"15745:23:16"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15729:12:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15793:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"15798:4:16","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15789:3:16"},"nodeType":"YulFunctionCall","src":"15789:14:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15809:4:16"},{"name":"pos","nodeType":"YulIdentifier","src":"15815:3:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15805:3:16"},"nodeType":"YulFunctionCall","src":"15805:14:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15782:6:16"},"nodeType":"YulFunctionCall","src":"15782:38:16"},"nodeType":"YulExpressionStatement","src":"15782:38:16"},{"nodeType":"YulAssignment","src":"15833:81:16","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15895:12:16"},{"name":"tail","nodeType":"YulIdentifier","src":"15909:4:16"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"15841:53:16"},"nodeType":"YulFunctionCall","src":"15841:73:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15833:4:16"}]}]},{"nodeType":"YulBlock","src":"15935:236:16","statements":[{"nodeType":"YulVariableDeclaration","src":"15971:43:16","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16001:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"16008:4:16","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15997:3:16"},"nodeType":"YulFunctionCall","src":"15997:16:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15991:5:16"},"nodeType":"YulFunctionCall","src":"15991:23:16"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15975:12:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16039:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"16044:4:16","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16035:3:16"},"nodeType":"YulFunctionCall","src":"16035:14:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16055:4:16"},{"name":"pos","nodeType":"YulIdentifier","src":"16061:3:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16051:3:16"},"nodeType":"YulFunctionCall","src":"16051:14:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16028:6:16"},"nodeType":"YulFunctionCall","src":"16028:38:16"},"nodeType":"YulExpressionStatement","src":"16028:38:16"},{"nodeType":"YulAssignment","src":"16079:81:16","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16141:12:16"},{"name":"tail","nodeType":"YulIdentifier","src":"16155:4:16"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16087:53:16"},"nodeType":"YulFunctionCall","src":"16087:73:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16079:4:16"}]}]},{"nodeType":"YulBlock","src":"16181:235:16","statements":[{"nodeType":"YulVariableDeclaration","src":"16216:43:16","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16246:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"16253:4:16","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16242:3:16"},"nodeType":"YulFunctionCall","src":"16242:16:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16236:5:16"},"nodeType":"YulFunctionCall","src":"16236:23:16"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16220:12:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16284:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"16289:4:16","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16280:3:16"},"nodeType":"YulFunctionCall","src":"16280:14:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16300:4:16"},{"name":"pos","nodeType":"YulIdentifier","src":"16306:3:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16296:3:16"},"nodeType":"YulFunctionCall","src":"16296:14:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16273:6:16"},"nodeType":"YulFunctionCall","src":"16273:38:16"},"nodeType":"YulExpressionStatement","src":"16273:38:16"},{"nodeType":"YulAssignment","src":"16324:81:16","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16386:12:16"},{"name":"tail","nodeType":"YulIdentifier","src":"16400:4:16"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16332:53:16"},"nodeType":"YulFunctionCall","src":"16332:73:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16324:4:16"}]}]},{"nodeType":"YulAssignment","src":"16426:11:16","value":{"name":"tail","nodeType":"YulIdentifier","src":"16433:4:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16426:3:16"}]}]},"name":"abi_encode_t_struct$_User_$2872_memory_ptr_to_t_struct$_User_$2872_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15274:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15281:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15290:3:16","type":""}],"src":"15177:1266:16"},{"body":{"nodeType":"YulBlock","src":"16591:219:16","statements":[{"nodeType":"YulAssignment","src":"16601:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16613:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"16624:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16609:3:16"},"nodeType":"YulFunctionCall","src":"16609:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16601:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16648:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"16659:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16644:3:16"},"nodeType":"YulFunctionCall","src":"16644:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16667:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"16673:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16663:3:16"},"nodeType":"YulFunctionCall","src":"16663:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16637:6:16"},"nodeType":"YulFunctionCall","src":"16637:47:16"},"nodeType":"YulExpressionStatement","src":"16637:47:16"},{"nodeType":"YulAssignment","src":"16693:110:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16789:6:16"},{"name":"tail","nodeType":"YulIdentifier","src":"16798:4:16"}],"functionName":{"name":"abi_encode_t_struct$_User_$2872_memory_ptr_to_t_struct$_User_$2872_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16701:87:16"},"nodeType":"YulFunctionCall","src":"16701:102:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16693:4:16"}]}]},"name":"abi_encode_tuple_t_struct$_User_$2872_memory_ptr__to_t_struct$_User_$2872_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16563:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16575:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16586:4:16","type":""}],"src":"16449:361:16"},{"body":{"nodeType":"YulBlock","src":"16844:152:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16861:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16864:77:16","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16854:6:16"},"nodeType":"YulFunctionCall","src":"16854:88:16"},"nodeType":"YulExpressionStatement","src":"16854:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16958:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16961:4:16","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16951:6:16"},"nodeType":"YulFunctionCall","src":"16951:15:16"},"nodeType":"YulExpressionStatement","src":"16951:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16982:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16985:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16975:6:16"},"nodeType":"YulFunctionCall","src":"16975:15:16"},"nodeType":"YulExpressionStatement","src":"16975:15:16"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"16816:180:16"},{"body":{"nodeType":"YulBlock","src":"17053:269:16","statements":[{"nodeType":"YulAssignment","src":"17063:22:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17077:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"17083:1:16","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17073:3:16"},"nodeType":"YulFunctionCall","src":"17073:12:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17063:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"17094:38:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17124:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"17130:1:16","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17120:3:16"},"nodeType":"YulFunctionCall","src":"17120:12:16"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"17098:18:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"17171:51:16","statements":[{"nodeType":"YulAssignment","src":"17185:27:16","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17199:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"17207:4:16","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17195:3:16"},"nodeType":"YulFunctionCall","src":"17195:17:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17185:6:16"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"17151:18:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17144:6:16"},"nodeType":"YulFunctionCall","src":"17144:26:16"},"nodeType":"YulIf","src":"17141:81:16"},{"body":{"nodeType":"YulBlock","src":"17274:42:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"17288:16:16"},"nodeType":"YulFunctionCall","src":"17288:18:16"},"nodeType":"YulExpressionStatement","src":"17288:18:16"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"17238:18:16"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17261:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"17269:2:16","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17258:2:16"},"nodeType":"YulFunctionCall","src":"17258:14:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17235:2:16"},"nodeType":"YulFunctionCall","src":"17235:38:16"},"nodeType":"YulIf","src":"17232:84:16"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"17037:4:16","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17046:6:16","type":""}],"src":"17002:320:16"},{"body":{"nodeType":"YulBlock","src":"17434:125:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17456:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"17464:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17452:3:16"},"nodeType":"YulFunctionCall","src":"17452:14:16"},{"hexValue":"4552433732313a20617070726f76656420717565727920666f72206e6f6e6578","kind":"string","nodeType":"YulLiteral","src":"17468:34:16","type":"","value":"ERC721: approved query for nonex"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17445:6:16"},"nodeType":"YulFunctionCall","src":"17445:58:16"},"nodeType":"YulExpressionStatement","src":"17445:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17524:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"17532:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17520:3:16"},"nodeType":"YulFunctionCall","src":"17520:15:16"},{"hexValue":"697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"17537:14:16","type":"","value":"istent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17513:6:16"},"nodeType":"YulFunctionCall","src":"17513:39:16"},"nodeType":"YulExpressionStatement","src":"17513:39:16"}]},"name":"store_literal_in_memory_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17426:6:16","type":""}],"src":"17328:231:16"},{"body":{"nodeType":"YulBlock","src":"17711:220:16","statements":[{"nodeType":"YulAssignment","src":"17721:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17787:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"17792:2:16","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17728:58:16"},"nodeType":"YulFunctionCall","src":"17728:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17721:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17893:3:16"}],"functionName":{"name":"store_literal_in_memory_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d","nodeType":"YulIdentifier","src":"17804:88:16"},"nodeType":"YulFunctionCall","src":"17804:93:16"},"nodeType":"YulExpressionStatement","src":"17804:93:16"},{"nodeType":"YulAssignment","src":"17906:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17917:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"17922:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17913:3:16"},"nodeType":"YulFunctionCall","src":"17913:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17906:3:16"}]}]},"name":"abi_encode_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17699:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17707:3:16","type":""}],"src":"17565:366:16"},{"body":{"nodeType":"YulBlock","src":"18108:248:16","statements":[{"nodeType":"YulAssignment","src":"18118:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18130:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18141:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18126:3:16"},"nodeType":"YulFunctionCall","src":"18126:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18118:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18165:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18176:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18161:3:16"},"nodeType":"YulFunctionCall","src":"18161:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18184:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"18190:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18180:3:16"},"nodeType":"YulFunctionCall","src":"18180:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18154:6:16"},"nodeType":"YulFunctionCall","src":"18154:47:16"},"nodeType":"YulExpressionStatement","src":"18154:47:16"},{"nodeType":"YulAssignment","src":"18210:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18344:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18218:124:16"},"nodeType":"YulFunctionCall","src":"18218:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18210:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18088:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18103:4:16","type":""}],"src":"17937:419:16"},{"body":{"nodeType":"YulBlock","src":"18468:114:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18490:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"18498:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18486:3:16"},"nodeType":"YulFunctionCall","src":"18486:14:16"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"18502:34:16","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18479:6:16"},"nodeType":"YulFunctionCall","src":"18479:58:16"},"nodeType":"YulExpressionStatement","src":"18479:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18558:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"18566:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18554:3:16"},"nodeType":"YulFunctionCall","src":"18554:15:16"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"18571:3:16","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18547:6:16"},"nodeType":"YulFunctionCall","src":"18547:28:16"},"nodeType":"YulExpressionStatement","src":"18547:28:16"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18460:6:16","type":""}],"src":"18362:220:16"},{"body":{"nodeType":"YulBlock","src":"18734:220:16","statements":[{"nodeType":"YulAssignment","src":"18744:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18810:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"18815:2:16","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18751:58:16"},"nodeType":"YulFunctionCall","src":"18751:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18744:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18916:3:16"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"18827:88:16"},"nodeType":"YulFunctionCall","src":"18827:93:16"},"nodeType":"YulExpressionStatement","src":"18827:93:16"},{"nodeType":"YulAssignment","src":"18929:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18940:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"18945:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18936:3:16"},"nodeType":"YulFunctionCall","src":"18936:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18929:3:16"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18722:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18730:3:16","type":""}],"src":"18588:366:16"},{"body":{"nodeType":"YulBlock","src":"19131:248:16","statements":[{"nodeType":"YulAssignment","src":"19141:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19153:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19164:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19149:3:16"},"nodeType":"YulFunctionCall","src":"19149:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19141:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19188:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19199:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19184:3:16"},"nodeType":"YulFunctionCall","src":"19184:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19207:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"19213:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19203:3:16"},"nodeType":"YulFunctionCall","src":"19203:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19177:6:16"},"nodeType":"YulFunctionCall","src":"19177:47:16"},"nodeType":"YulExpressionStatement","src":"19177:47:16"},{"nodeType":"YulAssignment","src":"19233:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19367:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19241:124:16"},"nodeType":"YulFunctionCall","src":"19241:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19233:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19111:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19126:4:16","type":""}],"src":"18960:419:16"},{"body":{"nodeType":"YulBlock","src":"19491:137:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19513:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"19521:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19509:3:16"},"nodeType":"YulFunctionCall","src":"19509:14:16"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77","kind":"string","nodeType":"YulLiteral","src":"19525:34:16","type":"","value":"ERC721: approve caller is not ow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19502:6:16"},"nodeType":"YulFunctionCall","src":"19502:58:16"},"nodeType":"YulExpressionStatement","src":"19502:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19581:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"19589:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19577:3:16"},"nodeType":"YulFunctionCall","src":"19577:15:16"},{"hexValue":"6e6572206e6f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"19594:26:16","type":"","value":"ner nor approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19570:6:16"},"nodeType":"YulFunctionCall","src":"19570:51:16"},"nodeType":"YulExpressionStatement","src":"19570:51:16"}]},"name":"store_literal_in_memory_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19483:6:16","type":""}],"src":"19385:243:16"},{"body":{"nodeType":"YulBlock","src":"19780:220:16","statements":[{"nodeType":"YulAssignment","src":"19790:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19856:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"19861:2:16","type":"","value":"56"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19797:58:16"},"nodeType":"YulFunctionCall","src":"19797:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19790:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19962:3:16"}],"functionName":{"name":"store_literal_in_memory_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d","nodeType":"YulIdentifier","src":"19873:88:16"},"nodeType":"YulFunctionCall","src":"19873:93:16"},"nodeType":"YulExpressionStatement","src":"19873:93:16"},{"nodeType":"YulAssignment","src":"19975:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19986:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"19991:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19982:3:16"},"nodeType":"YulFunctionCall","src":"19982:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19975:3:16"}]}]},"name":"abi_encode_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19768:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19776:3:16","type":""}],"src":"19634:366:16"},{"body":{"nodeType":"YulBlock","src":"20177:248:16","statements":[{"nodeType":"YulAssignment","src":"20187:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20199:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20210:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20195:3:16"},"nodeType":"YulFunctionCall","src":"20195:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20187:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20234:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20245:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20230:3:16"},"nodeType":"YulFunctionCall","src":"20230:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20253:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"20259:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20249:3:16"},"nodeType":"YulFunctionCall","src":"20249:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20223:6:16"},"nodeType":"YulFunctionCall","src":"20223:47:16"},"nodeType":"YulExpressionStatement","src":"20223:47:16"},{"nodeType":"YulAssignment","src":"20279:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20413:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20287:124:16"},"nodeType":"YulFunctionCall","src":"20287:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20279:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20157:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20172:4:16","type":""}],"src":"20006:419:16"},{"body":{"nodeType":"YulBlock","src":"20537:130:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20559:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"20567:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20555:3:16"},"nodeType":"YulFunctionCall","src":"20555:14:16"},{"hexValue":"4552433732313a207472616e736665722063616c6c6572206973206e6f74206f","kind":"string","nodeType":"YulLiteral","src":"20571:34:16","type":"","value":"ERC721: transfer caller is not o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20548:6:16"},"nodeType":"YulFunctionCall","src":"20548:58:16"},"nodeType":"YulExpressionStatement","src":"20548:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20627:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"20635:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20623:3:16"},"nodeType":"YulFunctionCall","src":"20623:15:16"},{"hexValue":"776e6572206e6f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"20640:19:16","type":"","value":"wner nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20616:6:16"},"nodeType":"YulFunctionCall","src":"20616:44:16"},"nodeType":"YulExpressionStatement","src":"20616:44:16"}]},"name":"store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20529:6:16","type":""}],"src":"20431:236:16"},{"body":{"nodeType":"YulBlock","src":"20819:220:16","statements":[{"nodeType":"YulAssignment","src":"20829:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20895:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"20900:2:16","type":"","value":"49"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20836:58:16"},"nodeType":"YulFunctionCall","src":"20836:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20829:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21001:3:16"}],"functionName":{"name":"store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","nodeType":"YulIdentifier","src":"20912:88:16"},"nodeType":"YulFunctionCall","src":"20912:93:16"},"nodeType":"YulExpressionStatement","src":"20912:93:16"},{"nodeType":"YulAssignment","src":"21014:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21025:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"21030:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21021:3:16"},"nodeType":"YulFunctionCall","src":"21021:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21014:3:16"}]}]},"name":"abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20807:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20815:3:16","type":""}],"src":"20673:366:16"},{"body":{"nodeType":"YulBlock","src":"21216:248:16","statements":[{"nodeType":"YulAssignment","src":"21226:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21238:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21249:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21234:3:16"},"nodeType":"YulFunctionCall","src":"21234:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21226:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21273:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21284:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21269:3:16"},"nodeType":"YulFunctionCall","src":"21269:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21292:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"21298:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21288:3:16"},"nodeType":"YulFunctionCall","src":"21288:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21262:6:16"},"nodeType":"YulFunctionCall","src":"21262:47:16"},"nodeType":"YulExpressionStatement","src":"21262:47:16"},{"nodeType":"YulAssignment","src":"21318:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21452:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21326:124:16"},"nodeType":"YulFunctionCall","src":"21326:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21318:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21196:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21211:4:16","type":""}],"src":"21045:419:16"},{"body":{"nodeType":"YulBlock","src":"21498:152:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21515:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21518:77:16","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21508:6:16"},"nodeType":"YulFunctionCall","src":"21508:88:16"},"nodeType":"YulExpressionStatement","src":"21508:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21612:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21615:4:16","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21605:6:16"},"nodeType":"YulFunctionCall","src":"21605:15:16"},"nodeType":"YulExpressionStatement","src":"21605:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21636:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21639:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21629:6:16"},"nodeType":"YulFunctionCall","src":"21629:15:16"},"nodeType":"YulExpressionStatement","src":"21629:15:16"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"21470:180:16"},{"body":{"nodeType":"YulBlock","src":"21700:261:16","statements":[{"nodeType":"YulAssignment","src":"21710:25:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21733:1:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21715:17:16"},"nodeType":"YulFunctionCall","src":"21715:20:16"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21710:1:16"}]},{"nodeType":"YulAssignment","src":"21744:25:16","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21767:1:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21749:17:16"},"nodeType":"YulFunctionCall","src":"21749:20:16"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21744:1:16"}]},{"body":{"nodeType":"YulBlock","src":"21907:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21909:16:16"},"nodeType":"YulFunctionCall","src":"21909:18:16"},"nodeType":"YulExpressionStatement","src":"21909:18:16"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21828:1:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21835:66:16","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"21903:1:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21831:3:16"},"nodeType":"YulFunctionCall","src":"21831:74:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21825:2:16"},"nodeType":"YulFunctionCall","src":"21825:81:16"},"nodeType":"YulIf","src":"21822:107:16"},{"nodeType":"YulAssignment","src":"21939:16:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21950:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"21953:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21946:3:16"},"nodeType":"YulFunctionCall","src":"21946:9:16"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"21939:3:16"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21687:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"21690:1:16","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"21696:3:16","type":""}],"src":"21656:305:16"},{"body":{"nodeType":"YulBlock","src":"22073:122:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22095:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"22103:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22091:3:16"},"nodeType":"YulFunctionCall","src":"22091:14:16"},{"hexValue":"4552433732313a206f776e657220717565727920666f72206e6f6e6578697374","kind":"string","nodeType":"YulLiteral","src":"22107:34:16","type":"","value":"ERC721: owner query for nonexist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22084:6:16"},"nodeType":"YulFunctionCall","src":"22084:58:16"},"nodeType":"YulExpressionStatement","src":"22084:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22163:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"22171:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22159:3:16"},"nodeType":"YulFunctionCall","src":"22159:15:16"},{"hexValue":"656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"22176:11:16","type":"","value":"ent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22152:6:16"},"nodeType":"YulFunctionCall","src":"22152:36:16"},"nodeType":"YulExpressionStatement","src":"22152:36:16"}]},"name":"store_literal_in_memory_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22065:6:16","type":""}],"src":"21967:228:16"},{"body":{"nodeType":"YulBlock","src":"22347:220:16","statements":[{"nodeType":"YulAssignment","src":"22357:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22423:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"22428:2:16","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22364:58:16"},"nodeType":"YulFunctionCall","src":"22364:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22357:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22529:3:16"}],"functionName":{"name":"store_literal_in_memory_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397","nodeType":"YulIdentifier","src":"22440:88:16"},"nodeType":"YulFunctionCall","src":"22440:93:16"},"nodeType":"YulExpressionStatement","src":"22440:93:16"},{"nodeType":"YulAssignment","src":"22542:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22553:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"22558:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22549:3:16"},"nodeType":"YulFunctionCall","src":"22549:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22542:3:16"}]}]},"name":"abi_encode_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22335:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22343:3:16","type":""}],"src":"22201:366:16"},{"body":{"nodeType":"YulBlock","src":"22744:248:16","statements":[{"nodeType":"YulAssignment","src":"22754:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22766:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"22777:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22762:3:16"},"nodeType":"YulFunctionCall","src":"22762:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22754:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22801:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"22812:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22797:3:16"},"nodeType":"YulFunctionCall","src":"22797:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22820:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"22826:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22816:3:16"},"nodeType":"YulFunctionCall","src":"22816:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22790:6:16"},"nodeType":"YulFunctionCall","src":"22790:47:16"},"nodeType":"YulExpressionStatement","src":"22790:47:16"},{"nodeType":"YulAssignment","src":"22846:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22980:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22854:124:16"},"nodeType":"YulFunctionCall","src":"22854:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22846:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22724:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22739:4:16","type":""}],"src":"22573:419:16"},{"body":{"nodeType":"YulBlock","src":"23104:123:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23126:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"23134:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23122:3:16"},"nodeType":"YulFunctionCall","src":"23122:14:16"},{"hexValue":"4552433732313a2062616c616e636520717565727920666f7220746865207a65","kind":"string","nodeType":"YulLiteral","src":"23138:34:16","type":"","value":"ERC721: balance query for the ze"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23115:6:16"},"nodeType":"YulFunctionCall","src":"23115:58:16"},"nodeType":"YulExpressionStatement","src":"23115:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23194:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"23202:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23190:3:16"},"nodeType":"YulFunctionCall","src":"23190:15:16"},{"hexValue":"726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"23207:12:16","type":"","value":"ro address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23183:6:16"},"nodeType":"YulFunctionCall","src":"23183:37:16"},"nodeType":"YulExpressionStatement","src":"23183:37:16"}]},"name":"store_literal_in_memory_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23096:6:16","type":""}],"src":"22998:229:16"},{"body":{"nodeType":"YulBlock","src":"23379:220:16","statements":[{"nodeType":"YulAssignment","src":"23389:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23455:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"23460:2:16","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23396:58:16"},"nodeType":"YulFunctionCall","src":"23396:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23389:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23561:3:16"}],"functionName":{"name":"store_literal_in_memory_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba","nodeType":"YulIdentifier","src":"23472:88:16"},"nodeType":"YulFunctionCall","src":"23472:93:16"},"nodeType":"YulExpressionStatement","src":"23472:93:16"},{"nodeType":"YulAssignment","src":"23574:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23585:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"23590:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23581:3:16"},"nodeType":"YulFunctionCall","src":"23581:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23574:3:16"}]}]},"name":"abi_encode_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23367:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23375:3:16","type":""}],"src":"23233:366:16"},{"body":{"nodeType":"YulBlock","src":"23776:248:16","statements":[{"nodeType":"YulAssignment","src":"23786:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23798:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23809:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23794:3:16"},"nodeType":"YulFunctionCall","src":"23794:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23786:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23833:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23844:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23829:3:16"},"nodeType":"YulFunctionCall","src":"23829:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23852:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"23858:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23848:3:16"},"nodeType":"YulFunctionCall","src":"23848:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23822:6:16"},"nodeType":"YulFunctionCall","src":"23822:47:16"},"nodeType":"YulExpressionStatement","src":"23822:47:16"},{"nodeType":"YulAssignment","src":"23878:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24012:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23886:124:16"},"nodeType":"YulFunctionCall","src":"23886:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23878:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23756:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23771:4:16","type":""}],"src":"23605:419:16"},{"body":{"nodeType":"YulBlock","src":"24136:128:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24158:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"24166:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24154:3:16"},"nodeType":"YulFunctionCall","src":"24154:14:16"},{"hexValue":"4552433732314d657461646174613a2055524920717565727920666f72206e6f","kind":"string","nodeType":"YulLiteral","src":"24170:34:16","type":"","value":"ERC721Metadata: URI query for no"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24147:6:16"},"nodeType":"YulFunctionCall","src":"24147:58:16"},"nodeType":"YulExpressionStatement","src":"24147:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24226:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"24234:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24222:3:16"},"nodeType":"YulFunctionCall","src":"24222:15:16"},{"hexValue":"6e6578697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"24239:17:16","type":"","value":"nexistent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24215:6:16"},"nodeType":"YulFunctionCall","src":"24215:42:16"},"nodeType":"YulExpressionStatement","src":"24215:42:16"}]},"name":"store_literal_in_memory_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24128:6:16","type":""}],"src":"24030:234:16"},{"body":{"nodeType":"YulBlock","src":"24416:220:16","statements":[{"nodeType":"YulAssignment","src":"24426:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24492:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"24497:2:16","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24433:58:16"},"nodeType":"YulFunctionCall","src":"24433:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24426:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24598:3:16"}],"functionName":{"name":"store_literal_in_memory_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb","nodeType":"YulIdentifier","src":"24509:88:16"},"nodeType":"YulFunctionCall","src":"24509:93:16"},"nodeType":"YulExpressionStatement","src":"24509:93:16"},{"nodeType":"YulAssignment","src":"24611:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24622:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"24627:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24618:3:16"},"nodeType":"YulFunctionCall","src":"24618:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24611:3:16"}]}]},"name":"abi_encode_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24404:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24412:3:16","type":""}],"src":"24270:366:16"},{"body":{"nodeType":"YulBlock","src":"24813:248:16","statements":[{"nodeType":"YulAssignment","src":"24823:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24835:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"24846:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24831:3:16"},"nodeType":"YulFunctionCall","src":"24831:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24823:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24870:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"24881:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24866:3:16"},"nodeType":"YulFunctionCall","src":"24866:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24889:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"24895:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24885:3:16"},"nodeType":"YulFunctionCall","src":"24885:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24859:6:16"},"nodeType":"YulFunctionCall","src":"24859:47:16"},"nodeType":"YulExpressionStatement","src":"24859:47:16"},{"nodeType":"YulAssignment","src":"24915:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25049:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24923:124:16"},"nodeType":"YulFunctionCall","src":"24923:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24915:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24793:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24808:4:16","type":""}],"src":"24642:419:16"},{"body":{"nodeType":"YulBlock","src":"25181:34:16","statements":[{"nodeType":"YulAssignment","src":"25191:18:16","value":{"name":"pos","nodeType":"YulIdentifier","src":"25206:3:16"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"25191:11:16"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25153:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"25158:6:16","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"25169:11:16","type":""}],"src":"25067:148:16"},{"body":{"nodeType":"YulBlock","src":"25331:267:16","statements":[{"nodeType":"YulVariableDeclaration","src":"25341:53:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25388:5:16"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"25355:32:16"},"nodeType":"YulFunctionCall","src":"25355:39:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"25345:6:16","type":""}]},{"nodeType":"YulAssignment","src":"25403:96:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25487:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"25492:6:16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25410:76:16"},"nodeType":"YulFunctionCall","src":"25410:89:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25403:3:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25534:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"25541:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25530:3:16"},"nodeType":"YulFunctionCall","src":"25530:16:16"},{"name":"pos","nodeType":"YulIdentifier","src":"25548:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"25553:6:16"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"25508:21:16"},"nodeType":"YulFunctionCall","src":"25508:52:16"},"nodeType":"YulExpressionStatement","src":"25508:52:16"},{"nodeType":"YulAssignment","src":"25569:23:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25580:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"25585:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25576:3:16"},"nodeType":"YulFunctionCall","src":"25576:16:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25569:3:16"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25312:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"25319:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25327:3:16","type":""}],"src":"25221:377:16"},{"body":{"nodeType":"YulBlock","src":"25788:251:16","statements":[{"nodeType":"YulAssignment","src":"25799:102:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25888:6:16"},{"name":"pos","nodeType":"YulIdentifier","src":"25897:3:16"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25806:81:16"},"nodeType":"YulFunctionCall","src":"25806:95:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25799:3:16"}]},{"nodeType":"YulAssignment","src":"25911:102:16","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26000:6:16"},{"name":"pos","nodeType":"YulIdentifier","src":"26009:3:16"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25918:81:16"},"nodeType":"YulFunctionCall","src":"25918:95:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25911:3:16"}]},{"nodeType":"YulAssignment","src":"26023:10:16","value":{"name":"pos","nodeType":"YulIdentifier","src":"26030:3:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26023:3:16"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25759:3:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25765:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25773:6:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25784:3:16","type":""}],"src":"25604:435:16"},{"body":{"nodeType":"YulBlock","src":"26151:58:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26173:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"26181:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26169:3:16"},"nodeType":"YulFunctionCall","src":"26169:14:16"},{"hexValue":"6e6f7420656e6f75676820776569","kind":"string","nodeType":"YulLiteral","src":"26185:16:16","type":"","value":"not enough wei"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26162:6:16"},"nodeType":"YulFunctionCall","src":"26162:40:16"},"nodeType":"YulExpressionStatement","src":"26162:40:16"}]},"name":"store_literal_in_memory_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26143:6:16","type":""}],"src":"26045:164:16"},{"body":{"nodeType":"YulBlock","src":"26361:220:16","statements":[{"nodeType":"YulAssignment","src":"26371:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26437:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"26442:2:16","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26378:58:16"},"nodeType":"YulFunctionCall","src":"26378:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26371:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26543:3:16"}],"functionName":{"name":"store_literal_in_memory_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970","nodeType":"YulIdentifier","src":"26454:88:16"},"nodeType":"YulFunctionCall","src":"26454:93:16"},"nodeType":"YulExpressionStatement","src":"26454:93:16"},{"nodeType":"YulAssignment","src":"26556:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26567:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"26572:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26563:3:16"},"nodeType":"YulFunctionCall","src":"26563:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26556:3:16"}]}]},"name":"abi_encode_t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26349:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26357:3:16","type":""}],"src":"26215:366:16"},{"body":{"nodeType":"YulBlock","src":"26758:248:16","statements":[{"nodeType":"YulAssignment","src":"26768:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26780:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"26791:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26776:3:16"},"nodeType":"YulFunctionCall","src":"26776:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26768:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26815:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"26826:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26811:3:16"},"nodeType":"YulFunctionCall","src":"26811:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26834:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"26840:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26830:3:16"},"nodeType":"YulFunctionCall","src":"26830:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26804:6:16"},"nodeType":"YulFunctionCall","src":"26804:47:16"},"nodeType":"YulExpressionStatement","src":"26804:47:16"},{"nodeType":"YulAssignment","src":"26860:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26994:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26868:124:16"},"nodeType":"YulFunctionCall","src":"26868:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26860:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26738:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26753:4:16","type":""}],"src":"26587:419:16"},{"body":{"nodeType":"YulBlock","src":"27057:146:16","statements":[{"nodeType":"YulAssignment","src":"27067:25:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27090:1:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"27072:17:16"},"nodeType":"YulFunctionCall","src":"27072:20:16"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"27067:1:16"}]},{"nodeType":"YulAssignment","src":"27101:25:16","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"27124:1:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"27106:17:16"},"nodeType":"YulFunctionCall","src":"27106:20:16"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"27101:1:16"}]},{"body":{"nodeType":"YulBlock","src":"27148:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"27150:16:16"},"nodeType":"YulFunctionCall","src":"27150:18:16"},"nodeType":"YulExpressionStatement","src":"27150:18:16"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27142:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"27145:1:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27139:2:16"},"nodeType":"YulFunctionCall","src":"27139:8:16"},"nodeType":"YulIf","src":"27136:34:16"},{"nodeType":"YulAssignment","src":"27180:17:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27192:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"27195:1:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27188:3:16"},"nodeType":"YulFunctionCall","src":"27188:9:16"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"27180:4:16"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"27043:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"27046:1:16","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"27052:4:16","type":""}],"src":"27012:191:16"},{"body":{"nodeType":"YulBlock","src":"27237:152:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27254:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27257:77:16","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27247:6:16"},"nodeType":"YulFunctionCall","src":"27247:88:16"},"nodeType":"YulExpressionStatement","src":"27247:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27351:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"27354:4:16","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27344:6:16"},"nodeType":"YulFunctionCall","src":"27344:15:16"},"nodeType":"YulExpressionStatement","src":"27344:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27375:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27378:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27368:6:16"},"nodeType":"YulFunctionCall","src":"27368:15:16"},"nodeType":"YulExpressionStatement","src":"27368:15:16"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"27209:180:16"},{"body":{"nodeType":"YulBlock","src":"27501:125:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27523:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"27531:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27519:3:16"},"nodeType":"YulFunctionCall","src":"27519:14:16"},{"hexValue":"4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578","kind":"string","nodeType":"YulLiteral","src":"27535:34:16","type":"","value":"ERC721: operator query for nonex"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27512:6:16"},"nodeType":"YulFunctionCall","src":"27512:58:16"},"nodeType":"YulExpressionStatement","src":"27512:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27591:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"27599:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27587:3:16"},"nodeType":"YulFunctionCall","src":"27587:15:16"},{"hexValue":"697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"27604:14:16","type":"","value":"istent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27580:6:16"},"nodeType":"YulFunctionCall","src":"27580:39:16"},"nodeType":"YulExpressionStatement","src":"27580:39:16"}]},"name":"store_literal_in_memory_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27493:6:16","type":""}],"src":"27395:231:16"},{"body":{"nodeType":"YulBlock","src":"27778:220:16","statements":[{"nodeType":"YulAssignment","src":"27788:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27854:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"27859:2:16","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27795:58:16"},"nodeType":"YulFunctionCall","src":"27795:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27788:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27960:3:16"}],"functionName":{"name":"store_literal_in_memory_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c","nodeType":"YulIdentifier","src":"27871:88:16"},"nodeType":"YulFunctionCall","src":"27871:93:16"},"nodeType":"YulExpressionStatement","src":"27871:93:16"},{"nodeType":"YulAssignment","src":"27973:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27984:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"27989:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27980:3:16"},"nodeType":"YulFunctionCall","src":"27980:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27973:3:16"}]}]},"name":"abi_encode_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27766:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27774:3:16","type":""}],"src":"27632:366:16"},{"body":{"nodeType":"YulBlock","src":"28175:248:16","statements":[{"nodeType":"YulAssignment","src":"28185:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28197:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"28208:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28193:3:16"},"nodeType":"YulFunctionCall","src":"28193:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28185:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28232:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"28243:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28228:3:16"},"nodeType":"YulFunctionCall","src":"28228:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28251:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"28257:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28247:3:16"},"nodeType":"YulFunctionCall","src":"28247:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28221:6:16"},"nodeType":"YulFunctionCall","src":"28221:47:16"},"nodeType":"YulExpressionStatement","src":"28221:47:16"},{"nodeType":"YulAssignment","src":"28277:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28411:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28285:124:16"},"nodeType":"YulFunctionCall","src":"28285:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28277:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28155:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28170:4:16","type":""}],"src":"28004:419:16"},{"body":{"nodeType":"YulBlock","src":"28535:118:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28557:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"28565:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28553:3:16"},"nodeType":"YulFunctionCall","src":"28553:14:16"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"28569:34:16","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28546:6:16"},"nodeType":"YulFunctionCall","src":"28546:58:16"},"nodeType":"YulExpressionStatement","src":"28546:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28625:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"28633:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28621:3:16"},"nodeType":"YulFunctionCall","src":"28621:15:16"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"28638:7:16","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28614:6:16"},"nodeType":"YulFunctionCall","src":"28614:32:16"},"nodeType":"YulExpressionStatement","src":"28614:32:16"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28527:6:16","type":""}],"src":"28429:224:16"},{"body":{"nodeType":"YulBlock","src":"28805:220:16","statements":[{"nodeType":"YulAssignment","src":"28815:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28881:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"28886:2:16","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28822:58:16"},"nodeType":"YulFunctionCall","src":"28822:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28815:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28987:3:16"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"28898:88:16"},"nodeType":"YulFunctionCall","src":"28898:93:16"},"nodeType":"YulExpressionStatement","src":"28898:93:16"},{"nodeType":"YulAssignment","src":"29000:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29011:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"29016:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29007:3:16"},"nodeType":"YulFunctionCall","src":"29007:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29000:3:16"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28793:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28801:3:16","type":""}],"src":"28659:366:16"},{"body":{"nodeType":"YulBlock","src":"29202:248:16","statements":[{"nodeType":"YulAssignment","src":"29212:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29224:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"29235:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29220:3:16"},"nodeType":"YulFunctionCall","src":"29220:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29212:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29259:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"29270:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29255:3:16"},"nodeType":"YulFunctionCall","src":"29255:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29278:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"29284:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29274:3:16"},"nodeType":"YulFunctionCall","src":"29274:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29248:6:16"},"nodeType":"YulFunctionCall","src":"29248:47:16"},"nodeType":"YulExpressionStatement","src":"29248:47:16"},{"nodeType":"YulAssignment","src":"29304:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29438:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29312:124:16"},"nodeType":"YulFunctionCall","src":"29312:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29304:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29182:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29197:4:16","type":""}],"src":"29031:419:16"},{"body":{"nodeType":"YulBlock","src":"29562:117:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29584:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"29592:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29580:3:16"},"nodeType":"YulFunctionCall","src":"29580:14:16"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"29596:34:16","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29573:6:16"},"nodeType":"YulFunctionCall","src":"29573:58:16"},"nodeType":"YulExpressionStatement","src":"29573:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29652:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"29660:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29648:3:16"},"nodeType":"YulFunctionCall","src":"29648:15:16"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"29665:6:16","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29641:6:16"},"nodeType":"YulFunctionCall","src":"29641:31:16"},"nodeType":"YulExpressionStatement","src":"29641:31:16"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29554:6:16","type":""}],"src":"29456:223:16"},{"body":{"nodeType":"YulBlock","src":"29831:220:16","statements":[{"nodeType":"YulAssignment","src":"29841:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29907:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"29912:2:16","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29848:58:16"},"nodeType":"YulFunctionCall","src":"29848:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29841:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30013:3:16"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"29924:88:16"},"nodeType":"YulFunctionCall","src":"29924:93:16"},"nodeType":"YulExpressionStatement","src":"29924:93:16"},{"nodeType":"YulAssignment","src":"30026:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30037:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"30042:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30033:3:16"},"nodeType":"YulFunctionCall","src":"30033:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30026:3:16"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29819:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29827:3:16","type":""}],"src":"29685:366:16"},{"body":{"nodeType":"YulBlock","src":"30228:248:16","statements":[{"nodeType":"YulAssignment","src":"30238:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30250:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"30261:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30246:3:16"},"nodeType":"YulFunctionCall","src":"30246:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30238:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30285:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"30296:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30281:3:16"},"nodeType":"YulFunctionCall","src":"30281:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30304:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"30310:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30300:3:16"},"nodeType":"YulFunctionCall","src":"30300:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30274:6:16"},"nodeType":"YulFunctionCall","src":"30274:47:16"},"nodeType":"YulExpressionStatement","src":"30274:47:16"},{"nodeType":"YulAssignment","src":"30330:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30464:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30338:124:16"},"nodeType":"YulFunctionCall","src":"30338:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30330:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30208:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30223:4:16","type":""}],"src":"30057:419:16"},{"body":{"nodeType":"YulBlock","src":"30588:131:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30610:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"30618:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30606:3:16"},"nodeType":"YulFunctionCall","src":"30606:14:16"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"30622:34:16","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30599:6:16"},"nodeType":"YulFunctionCall","src":"30599:58:16"},"nodeType":"YulExpressionStatement","src":"30599:58:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30678:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"30686:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30674:3:16"},"nodeType":"YulFunctionCall","src":"30674:15:16"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"30691:20:16","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30667:6:16"},"nodeType":"YulFunctionCall","src":"30667:45:16"},"nodeType":"YulExpressionStatement","src":"30667:45:16"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30580:6:16","type":""}],"src":"30482:237:16"},{"body":{"nodeType":"YulBlock","src":"30871:220:16","statements":[{"nodeType":"YulAssignment","src":"30881:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30947:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"30952:2:16","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30888:58:16"},"nodeType":"YulFunctionCall","src":"30888:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30881:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31053:3:16"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"30964:88:16"},"nodeType":"YulFunctionCall","src":"30964:93:16"},"nodeType":"YulExpressionStatement","src":"30964:93:16"},{"nodeType":"YulAssignment","src":"31066:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31077:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"31082:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31073:3:16"},"nodeType":"YulFunctionCall","src":"31073:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31066:3:16"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30859:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30867:3:16","type":""}],"src":"30725:366:16"},{"body":{"nodeType":"YulBlock","src":"31268:248:16","statements":[{"nodeType":"YulAssignment","src":"31278:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31290:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"31301:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31286:3:16"},"nodeType":"YulFunctionCall","src":"31286:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31278:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31325:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"31336:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31321:3:16"},"nodeType":"YulFunctionCall","src":"31321:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31344:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"31350:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31340:3:16"},"nodeType":"YulFunctionCall","src":"31340:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31314:6:16"},"nodeType":"YulFunctionCall","src":"31314:47:16"},"nodeType":"YulExpressionStatement","src":"31314:47:16"},{"nodeType":"YulAssignment","src":"31370:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31504:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31378:124:16"},"nodeType":"YulFunctionCall","src":"31378:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31370:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31248:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31263:4:16","type":""}],"src":"31097:419:16"},{"body":{"nodeType":"YulBlock","src":"31628:69:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31650:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"31658:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31646:3:16"},"nodeType":"YulFunctionCall","src":"31646:14:16"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"31662:27:16","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31639:6:16"},"nodeType":"YulFunctionCall","src":"31639:51:16"},"nodeType":"YulExpressionStatement","src":"31639:51:16"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31620:6:16","type":""}],"src":"31522:175:16"},{"body":{"nodeType":"YulBlock","src":"31849:220:16","statements":[{"nodeType":"YulAssignment","src":"31859:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31925:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"31930:2:16","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31866:58:16"},"nodeType":"YulFunctionCall","src":"31866:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31859:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32031:3:16"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"31942:88:16"},"nodeType":"YulFunctionCall","src":"31942:93:16"},"nodeType":"YulExpressionStatement","src":"31942:93:16"},{"nodeType":"YulAssignment","src":"32044:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32055:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"32060:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32051:3:16"},"nodeType":"YulFunctionCall","src":"32051:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32044:3:16"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31837:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31845:3:16","type":""}],"src":"31703:366:16"},{"body":{"nodeType":"YulBlock","src":"32246:248:16","statements":[{"nodeType":"YulAssignment","src":"32256:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32268:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"32279:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32264:3:16"},"nodeType":"YulFunctionCall","src":"32264:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32256:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32303:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"32314:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32299:3:16"},"nodeType":"YulFunctionCall","src":"32299:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32322:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"32328:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32318:3:16"},"nodeType":"YulFunctionCall","src":"32318:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32292:6:16"},"nodeType":"YulFunctionCall","src":"32292:47:16"},"nodeType":"YulExpressionStatement","src":"32292:47:16"},{"nodeType":"YulAssignment","src":"32348:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32482:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32356:124:16"},"nodeType":"YulFunctionCall","src":"32356:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32348:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32226:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32241:4:16","type":""}],"src":"32075:419:16"},{"body":{"nodeType":"YulBlock","src":"32543:190:16","statements":[{"nodeType":"YulAssignment","src":"32553:33:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32580:5:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32562:17:16"},"nodeType":"YulFunctionCall","src":"32562:24:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"32553:5:16"}]},{"body":{"nodeType":"YulBlock","src":"32676:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"32678:16:16"},"nodeType":"YulFunctionCall","src":"32678:18:16"},"nodeType":"YulExpressionStatement","src":"32678:18:16"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32601:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"32608:66:16","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32598:2:16"},"nodeType":"YulFunctionCall","src":"32598:77:16"},"nodeType":"YulIf","src":"32595:103:16"},{"nodeType":"YulAssignment","src":"32707:20:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32718:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"32725:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32714:3:16"},"nodeType":"YulFunctionCall","src":"32714:13:16"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32707:3:16"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32529:5:16","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"32539:3:16","type":""}],"src":"32500:233:16"},{"body":{"nodeType":"YulBlock","src":"32767:152:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32784:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32787:77:16","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32777:6:16"},"nodeType":"YulFunctionCall","src":"32777:88:16"},"nodeType":"YulExpressionStatement","src":"32777:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32881:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"32884:4:16","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32874:6:16"},"nodeType":"YulFunctionCall","src":"32874:15:16"},"nodeType":"YulExpressionStatement","src":"32874:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32905:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32908:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32898:6:16"},"nodeType":"YulFunctionCall","src":"32898:15:16"},"nodeType":"YulExpressionStatement","src":"32898:15:16"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"32739:180:16"},{"body":{"nodeType":"YulBlock","src":"32967:143:16","statements":[{"nodeType":"YulAssignment","src":"32977:25:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"33000:1:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32982:17:16"},"nodeType":"YulFunctionCall","src":"32982:20:16"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"32977:1:16"}]},{"nodeType":"YulAssignment","src":"33011:25:16","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"33034:1:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33016:17:16"},"nodeType":"YulFunctionCall","src":"33016:20:16"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"33011:1:16"}]},{"body":{"nodeType":"YulBlock","src":"33058:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"33060:16:16"},"nodeType":"YulFunctionCall","src":"33060:18:16"},"nodeType":"YulExpressionStatement","src":"33060:18:16"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"33055:1:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33048:6:16"},"nodeType":"YulFunctionCall","src":"33048:9:16"},"nodeType":"YulIf","src":"33045:35:16"},{"nodeType":"YulAssignment","src":"33090:14:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"33099:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"33102:1:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"33095:3:16"},"nodeType":"YulFunctionCall","src":"33095:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"33090:1:16"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"32956:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"32959:1:16","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"32965:1:16","type":""}],"src":"32925:185:16"},{"body":{"nodeType":"YulBlock","src":"33150:142:16","statements":[{"nodeType":"YulAssignment","src":"33160:25:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"33183:1:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33165:17:16"},"nodeType":"YulFunctionCall","src":"33165:20:16"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"33160:1:16"}]},{"nodeType":"YulAssignment","src":"33194:25:16","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"33217:1:16"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33199:17:16"},"nodeType":"YulFunctionCall","src":"33199:20:16"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"33194:1:16"}]},{"body":{"nodeType":"YulBlock","src":"33241:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"33243:16:16"},"nodeType":"YulFunctionCall","src":"33243:18:16"},"nodeType":"YulExpressionStatement","src":"33243:18:16"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"33238:1:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33231:6:16"},"nodeType":"YulFunctionCall","src":"33231:9:16"},"nodeType":"YulIf","src":"33228:35:16"},{"nodeType":"YulAssignment","src":"33272:14:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"33281:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"33284:1:16"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"33277:3:16"},"nodeType":"YulFunctionCall","src":"33277:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"33272:1:16"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"33139:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"33142:1:16","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"33148:1:16","type":""}],"src":"33116:176:16"},{"body":{"nodeType":"YulBlock","src":"33404:76:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33426:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"33434:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33422:3:16"},"nodeType":"YulFunctionCall","src":"33422:14:16"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"33438:34:16","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33415:6:16"},"nodeType":"YulFunctionCall","src":"33415:58:16"},"nodeType":"YulExpressionStatement","src":"33415:58:16"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33396:6:16","type":""}],"src":"33298:182:16"},{"body":{"nodeType":"YulBlock","src":"33632:220:16","statements":[{"nodeType":"YulAssignment","src":"33642:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33708:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"33713:2:16","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33649:58:16"},"nodeType":"YulFunctionCall","src":"33649:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33642:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33814:3:16"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"33725:88:16"},"nodeType":"YulFunctionCall","src":"33725:93:16"},"nodeType":"YulExpressionStatement","src":"33725:93:16"},{"nodeType":"YulAssignment","src":"33827:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33838:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"33843:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33834:3:16"},"nodeType":"YulFunctionCall","src":"33834:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33827:3:16"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33620:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33628:3:16","type":""}],"src":"33486:366:16"},{"body":{"nodeType":"YulBlock","src":"34029:248:16","statements":[{"nodeType":"YulAssignment","src":"34039:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34051:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"34062:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34047:3:16"},"nodeType":"YulFunctionCall","src":"34047:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34039:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34086:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"34097:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34082:3:16"},"nodeType":"YulFunctionCall","src":"34082:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34105:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"34111:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34101:3:16"},"nodeType":"YulFunctionCall","src":"34101:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34075:6:16"},"nodeType":"YulFunctionCall","src":"34075:47:16"},"nodeType":"YulExpressionStatement","src":"34075:47:16"},{"nodeType":"YulAssignment","src":"34131:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34265:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34139:124:16"},"nodeType":"YulFunctionCall","src":"34139:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34131:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34009:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34024:4:16","type":""}],"src":"33858:419:16"},{"body":{"nodeType":"YulBlock","src":"34389:72:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34411:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"34419:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34407:3:16"},"nodeType":"YulFunctionCall","src":"34407:14:16"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"34423:30:16","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34400:6:16"},"nodeType":"YulFunctionCall","src":"34400:54:16"},"nodeType":"YulExpressionStatement","src":"34400:54:16"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34381:6:16","type":""}],"src":"34283:178:16"},{"body":{"nodeType":"YulBlock","src":"34613:220:16","statements":[{"nodeType":"YulAssignment","src":"34623:74:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34689:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"34694:2:16","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34630:58:16"},"nodeType":"YulFunctionCall","src":"34630:67:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"34623:3:16"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34795:3:16"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"34706:88:16"},"nodeType":"YulFunctionCall","src":"34706:93:16"},"nodeType":"YulExpressionStatement","src":"34706:93:16"},{"nodeType":"YulAssignment","src":"34808:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34819:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"34824:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34815:3:16"},"nodeType":"YulFunctionCall","src":"34815:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"34808:3:16"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"34601:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"34609:3:16","type":""}],"src":"34467:366:16"},{"body":{"nodeType":"YulBlock","src":"35010:248:16","statements":[{"nodeType":"YulAssignment","src":"35020:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35032:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"35043:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35028:3:16"},"nodeType":"YulFunctionCall","src":"35028:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35020:4:16"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35067:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"35078:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35063:3:16"},"nodeType":"YulFunctionCall","src":"35063:17:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35086:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"35092:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35082:3:16"},"nodeType":"YulFunctionCall","src":"35082:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35056:6:16"},"nodeType":"YulFunctionCall","src":"35056:47:16"},"nodeType":"YulExpressionStatement","src":"35056:47:16"},{"nodeType":"YulAssignment","src":"35112:139:16","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35246:4:16"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35120:124:16"},"nodeType":"YulFunctionCall","src":"35120:131:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35112:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34990:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35005:4:16","type":""}],"src":"34839:419:16"},{"body":{"nodeType":"YulBlock","src":"35464:440:16","statements":[{"nodeType":"YulAssignment","src":"35474:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35486:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"35497:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35482:3:16"},"nodeType":"YulFunctionCall","src":"35482:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35474:4:16"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35555:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35568:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"35579:1:16","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35564:3:16"},"nodeType":"YulFunctionCall","src":"35564:17:16"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"35511:43:16"},"nodeType":"YulFunctionCall","src":"35511:71:16"},"nodeType":"YulExpressionStatement","src":"35511:71:16"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"35636:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35649:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"35660:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35645:3:16"},"nodeType":"YulFunctionCall","src":"35645:18:16"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"35592:43:16"},"nodeType":"YulFunctionCall","src":"35592:72:16"},"nodeType":"YulExpressionStatement","src":"35592:72:16"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"35718:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35731:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"35742:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35727:3:16"},"nodeType":"YulFunctionCall","src":"35727:18:16"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"35674:43:16"},"nodeType":"YulFunctionCall","src":"35674:72:16"},"nodeType":"YulExpressionStatement","src":"35674:72:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35767:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"35778:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35763:3:16"},"nodeType":"YulFunctionCall","src":"35763:18:16"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35787:4:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"35793:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35783:3:16"},"nodeType":"YulFunctionCall","src":"35783:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35756:6:16"},"nodeType":"YulFunctionCall","src":"35756:48:16"},"nodeType":"YulExpressionStatement","src":"35756:48:16"},{"nodeType":"YulAssignment","src":"35813:84:16","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"35883:6:16"},{"name":"tail","nodeType":"YulIdentifier","src":"35892:4:16"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35821:61:16"},"nodeType":"YulFunctionCall","src":"35821:76:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35813:4:16"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35412:9:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"35424:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"35432:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"35440:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35448:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35459:4:16","type":""}],"src":"35264:640:16"},{"body":{"nodeType":"YulBlock","src":"35972:79:16","statements":[{"nodeType":"YulAssignment","src":"35982:22:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"35997:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35991:5:16"},"nodeType":"YulFunctionCall","src":"35991:13:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"35982:5:16"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36039:5:16"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"36013:25:16"},"nodeType":"YulFunctionCall","src":"36013:32:16"},"nodeType":"YulExpressionStatement","src":"36013:32:16"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"35950:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"35958:3:16","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"35966:5:16","type":""}],"src":"35910:141:16"},{"body":{"nodeType":"YulBlock","src":"36133:273:16","statements":[{"body":{"nodeType":"YulBlock","src":"36179:83:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"36181:77:16"},"nodeType":"YulFunctionCall","src":"36181:79:16"},"nodeType":"YulExpressionStatement","src":"36181:79:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"36154:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"36163:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36150:3:16"},"nodeType":"YulFunctionCall","src":"36150:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"36175:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"36146:3:16"},"nodeType":"YulFunctionCall","src":"36146:32:16"},"nodeType":"YulIf","src":"36143:119:16"},{"nodeType":"YulBlock","src":"36272:127:16","statements":[{"nodeType":"YulVariableDeclaration","src":"36287:15:16","value":{"kind":"number","nodeType":"YulLiteral","src":"36301:1:16","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"36291:6:16","type":""}]},{"nodeType":"YulAssignment","src":"36316:73:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36361:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"36372:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36357:3:16"},"nodeType":"YulFunctionCall","src":"36357:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"36381:7:16"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"36326:30:16"},"nodeType":"YulFunctionCall","src":"36326:63:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"36316:6:16"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36103:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"36114:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"36126:6:16","type":""}],"src":"36057:349:16"}]},"contents":"{\\n\\n    function allocate_unbounded() -> memPtr {\\n        memPtr := mload(64)\\n    }\\n\\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\\n        revert(0, 0)\\n    }\\n\\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\\n        revert(0, 0)\\n    }\\n\\n    function cleanup_t_bytes4(value) -> cleaned {\\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n    }\\n\\n    function validator_revert_t_bytes4(value) {\\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\\n    }\\n\\n    function abi_decode_t_bytes4(offset, end) -> value {\\n        value := calldataload(offset)\\n        validator_revert_t_bytes4(value)\\n    }\\n\\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function cleanup_t_bool(value) -> cleaned {\\n        cleaned := iszero(iszero(value))\\n    }\\n\\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\\n        mstore(pos, cleanup_t_bool(value))\\n    }\\n\\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\\n        tail := add(headStart, 32)\\n\\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\\n\\n    }\\n\\n    function array_length_t_string_memory_ptr(value) -> length {\\n\\n        length := mload(value)\\n\\n    }\\n\\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\\n        mstore(pos, length)\\n        updated_pos := add(pos, 0x20)\\n    }\\n\\n    function copy_memory_to_memory(src, dst, length) {\\n        let i := 0\\n        for { } lt(i, length) { i := add(i, 32) }\\n        {\\n            mstore(add(dst, i), mload(add(src, i)))\\n        }\\n        if gt(i, length)\\n        {\\n            // clear end\\n            mstore(add(dst, length), 0)\\n        }\\n    }\\n\\n    function round_up_to_mul_of_32(value) -> result {\\n        result := and(add(value, 31), not(31))\\n    }\\n\\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\\n        let length := array_length_t_string_memory_ptr(value)\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\\n        copy_memory_to_memory(add(value, 0x20), pos, length)\\n        end := add(pos, round_up_to_mul_of_32(length))\\n    }\\n\\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\\n\\n    }\\n\\n    function cleanup_t_uint256(value) -> cleaned {\\n        cleaned := value\\n    }\\n\\n    function validator_revert_t_uint256(value) {\\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\\n    }\\n\\n    function abi_decode_t_uint256(offset, end) -> value {\\n        value := calldataload(offset)\\n        validator_revert_t_uint256(value)\\n    }\\n\\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function cleanup_t_uint160(value) -> cleaned {\\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\\n    }\\n\\n    function cleanup_t_address(value) -> cleaned {\\n        cleaned := cleanup_t_uint160(value)\\n    }\\n\\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\\n        mstore(pos, cleanup_t_address(value))\\n    }\\n\\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\\n        tail := add(headStart, 32)\\n\\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\\n\\n    }\\n\\n    function validator_revert_t_address(value) {\\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\\n    }\\n\\n    function abi_decode_t_address(offset, end) -> value {\\n        value := calldataload(offset)\\n        validator_revert_t_address(value)\\n    }\\n\\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := 32\\n\\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := 32\\n\\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := 64\\n\\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\\n        revert(0, 0)\\n    }\\n\\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\\n        revert(0, 0)\\n    }\\n\\n    function panic_error_0x41() {\\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\\n        mstore(4, 0x41)\\n        revert(0, 0x24)\\n    }\\n\\n    function finalize_allocation(memPtr, size) {\\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\\n        // protect against overflow\\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\\n        mstore(64, newFreePtr)\\n    }\\n\\n    function allocate_memory(size) -> memPtr {\\n        memPtr := allocate_unbounded()\\n        finalize_allocation(memPtr, size)\\n    }\\n\\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\\n        // Make sure we can allocate memory without overflow\\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\\n\\n        size := round_up_to_mul_of_32(length)\\n\\n        // add length slot\\n        size := add(size, 0x20)\\n\\n    }\\n\\n    function copy_calldata_to_memory(src, dst, length) {\\n        calldatacopy(dst, src, length)\\n        // clear end\\n        mstore(add(dst, length), 0)\\n    }\\n\\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\\n        mstore(array, length)\\n        let dst := add(array, 0x20)\\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\\n        copy_calldata_to_memory(src, dst, length)\\n    }\\n\\n    // string\\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\\n        let length := calldataload(offset)\\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\\n    }\\n\\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := calldataload(add(headStart, 0))\\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\\n\\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := calldataload(add(headStart, 32))\\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\\n\\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := calldataload(add(headStart, 64))\\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\\n\\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function array_length_t_bytes_memory_ptr(value) -> length {\\n\\n        length := mload(value)\\n\\n    }\\n\\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\\n        mstore(pos, length)\\n        updated_pos := add(pos, 0x20)\\n    }\\n\\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\\n        let length := array_length_t_bytes_memory_ptr(value)\\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\\n        copy_memory_to_memory(add(value, 0x20), pos, length)\\n        end := add(pos, round_up_to_mul_of_32(length))\\n    }\\n\\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\\n\\n    }\\n\\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\\n        mstore(pos, cleanup_t_uint256(value))\\n    }\\n\\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\\n        tail := add(headStart, 32)\\n\\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\\n\\n    }\\n\\n    function abi_decode_tuple_t_addresst_string_memory_ptr(headStart, dataEnd) -> value0, value1 {\\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := calldataload(add(headStart, 32))\\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\\n\\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function validator_revert_t_bool(value) {\\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\\n    }\\n\\n    function abi_decode_t_bool(offset, end) -> value {\\n        value := calldataload(offset)\\n        validator_revert_t_bool(value)\\n    }\\n\\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := 32\\n\\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\\n        // Make sure we can allocate memory without overflow\\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\\n\\n        size := round_up_to_mul_of_32(length)\\n\\n        // add length slot\\n        size := add(size, 0x20)\\n\\n    }\\n\\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\\n        mstore(array, length)\\n        let dst := add(array, 0x20)\\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\\n        copy_calldata_to_memory(src, dst, length)\\n    }\\n\\n    // bytes\\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\\n        let length := calldataload(offset)\\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\\n    }\\n\\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := 32\\n\\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := 64\\n\\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := calldataload(add(headStart, 96))\\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\\n\\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n        {\\n\\n            let offset := 32\\n\\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\\n        mstore(pos, cleanup_t_uint256(value))\\n    }\\n\\n    function abi_encode_t_address_to_t_address(value, pos) {\\n        mstore(pos, cleanup_t_address(value))\\n    }\\n\\n    function array_storeLengthForEncoding_t_string_memory_ptr(pos, length) -> updated_pos {\\n        mstore(pos, length)\\n        updated_pos := add(pos, 0x20)\\n    }\\n\\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value, pos) -> end {\\n        let length := array_length_t_string_memory_ptr(value)\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\\n        copy_memory_to_memory(add(value, 0x20), pos, length)\\n        end := add(pos, round_up_to_mul_of_32(length))\\n    }\\n\\n    // struct List.User -> struct List.User\\n    function abi_encode_t_struct$_User_$2872_memory_ptr_to_t_struct$_User_$2872_memory_ptr_fromStack(value, pos)  -> end  {\\n        let tail := add(pos, 0xa0)\\n\\n        {\\n            // id\\n\\n            let memberValue0 := mload(add(value, 0x00))\\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\\n        }\\n\\n        {\\n            // userAdr\\n\\n            let memberValue0 := mload(add(value, 0x20))\\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\\n        }\\n\\n        {\\n            // name\\n\\n            let memberValue0 := mload(add(value, 0x40))\\n\\n            mstore(add(pos, 0x40), sub(tail, pos))\\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\\n\\n        }\\n\\n        {\\n            // email\\n\\n            let memberValue0 := mload(add(value, 0x60))\\n\\n            mstore(add(pos, 0x60), sub(tail, pos))\\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\\n\\n        }\\n\\n        {\\n            // data\\n\\n            let memberValue0 := mload(add(value, 0x80))\\n\\n            mstore(add(pos, 0x80), sub(tail, pos))\\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\\n\\n        }\\n\\n        end := tail\\n    }\\n\\n    function abi_encode_tuple_t_struct$_User_$2872_memory_ptr__to_t_struct$_User_$2872_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_struct$_User_$2872_memory_ptr_to_t_struct$_User_$2872_memory_ptr_fromStack(value0,  tail)\\n\\n    }\\n\\n    function panic_error_0x22() {\\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\\n        mstore(4, 0x22)\\n        revert(0, 0x24)\\n    }\\n\\n    function extract_byte_array_length(data) -> length {\\n        length := div(data, 2)\\n        let outOfPlaceEncoding := and(data, 1)\\n        if iszero(outOfPlaceEncoding) {\\n            length := and(length, 0x7f)\\n        }\\n\\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\\n            panic_error_0x22()\\n        }\\n    }\\n\\n    function store_literal_in_memory_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: approved query for nonex\\")\\n\\n        mstore(add(memPtr, 32), \\"istent token\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\\n        store_literal_in_memory_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: approval to current owne\\")\\n\\n        mstore(add(memPtr, 32), \\"r\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: approve caller is not ow\\")\\n\\n        mstore(add(memPtr, 32), \\"ner nor approved for all\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)\\n        store_literal_in_memory_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: transfer caller is not o\\")\\n\\n        mstore(add(memPtr, 32), \\"wner nor approved\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 49)\\n        store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function panic_error_0x11() {\\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\\n        mstore(4, 0x11)\\n        revert(0, 0x24)\\n    }\\n\\n    function checked_add_t_uint256(x, y) -> sum {\\n        x := cleanup_t_uint256(x)\\n        y := cleanup_t_uint256(y)\\n\\n        // overflow, if x > (maxValue - y)\\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\\n\\n        sum := add(x, y)\\n    }\\n\\n    function store_literal_in_memory_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: owner query for nonexist\\")\\n\\n        mstore(add(memPtr, 32), \\"ent token\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\\n        store_literal_in_memory_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: balance query for the ze\\")\\n\\n        mstore(add(memPtr, 32), \\"ro address\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\\n        store_literal_in_memory_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721Metadata: URI query for no\\")\\n\\n        mstore(add(memPtr, 32), \\"nexistent token\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\\n        store_literal_in_memory_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\\n        updated_pos := pos\\n    }\\n\\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\\n        let length := array_length_t_string_memory_ptr(value)\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\\n        copy_memory_to_memory(add(value, 0x20), pos, length)\\n        end := add(pos, length)\\n    }\\n\\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\\n\\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\\n\\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\\n\\n        end := pos\\n    }\\n\\n    function store_literal_in_memory_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"not enough wei\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\\n        store_literal_in_memory_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970(pos)\\n        end := add(pos, 32)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function checked_sub_t_uint256(x, y) -> diff {\\n        x := cleanup_t_uint256(x)\\n        y := cleanup_t_uint256(y)\\n\\n        if lt(x, y) { panic_error_0x11() }\\n\\n        diff := sub(x, y)\\n    }\\n\\n    function panic_error_0x32() {\\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\\n        mstore(4, 0x32)\\n        revert(0, 0x24)\\n    }\\n\\n    function store_literal_in_memory_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: operator query for nonex\\")\\n\\n        mstore(add(memPtr, 32), \\"istent token\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\\n        store_literal_in_memory_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: transfer from incorrect \\")\\n\\n        mstore(add(memPtr, 32), \\"owner\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: transfer to the zero add\\")\\n\\n        mstore(add(memPtr, 32), \\"ress\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: transfer to non ERC721Re\\")\\n\\n        mstore(add(memPtr, 32), \\"ceiver implementer\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\\n        end := add(pos, 64)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: approve to caller\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\\n        end := add(pos, 32)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function increment_t_uint256(value) -> ret {\\n        value := cleanup_t_uint256(value)\\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\\n        ret := add(value, 1)\\n    }\\n\\n    function panic_error_0x12() {\\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\\n        mstore(4, 0x12)\\n        revert(0, 0x24)\\n    }\\n\\n    function checked_div_t_uint256(x, y) -> r {\\n        x := cleanup_t_uint256(x)\\n        y := cleanup_t_uint256(y)\\n        if iszero(y) { panic_error_0x12() }\\n\\n        r := div(x, y)\\n    }\\n\\n    function mod_t_uint256(x, y) -> r {\\n        x := cleanup_t_uint256(x)\\n        y := cleanup_t_uint256(y)\\n        if iszero(y) { panic_error_0x12() }\\n        r := mod(x, y)\\n    }\\n\\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: mint to the zero address\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\\n        end := add(pos, 32)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\\n\\n        mstore(add(memPtr, 0), \\"ERC721: token already minted\\")\\n\\n    }\\n\\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\\n        end := add(pos, 32)\\n    }\\n\\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\\n        tail := add(headStart, 32)\\n\\n        mstore(add(headStart, 0), sub(tail, headStart))\\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\\n\\n    }\\n\\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\\n        tail := add(headStart, 128)\\n\\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\\n\\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\\n\\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\\n\\n        mstore(add(headStart, 96), sub(tail, headStart))\\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\\n\\n    }\\n\\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\\n        value := mload(offset)\\n        validator_revert_t_bytes4(value)\\n    }\\n\\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n}\\n","id":16,"language":"Yul","name":"#utility.yul"}],"sourceMap":"6716:1945:13:-:0;;;7318:144;;;;;;;;;;1390:113:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;7397:4:13::1;7374;;:29;;;;;;;;;;;;;;;;;;7429:10;7413:5;;:27;;;;;;;;;;;;;;;;;;7454:1;7450;:5;;;;6716:1945:::0;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:180:16:-;55:77;52:1;45:88;152:4;149:1;142:15;176:4;173:1;166:15;193:320;237:6;274:1;268:4;264:12;254:22;;321:1;315:4;311:12;342:18;332:81;;398:4;390:6;386:17;376:27;;332:81;460:2;452:6;449:14;429:18;426:38;423:84;;479:18;;:::i;:::-;423:84;244:269;193:320;;;:::o;6716:1945:13:-;;;;;;;","deployedSourceMap":"6716:1945:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2488:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3999:217;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3537:401;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4726:330;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7467:394:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5122:179:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7273:39:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2191:235:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:205;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7223:44:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6927:16;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2650:102:4;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8388:232:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4283:153:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7974:111:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5367:320:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2818:329;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7123:43:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4502:162:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8090:293:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7866:103;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7173:44;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300:4;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2488:98::-;2542:13;2574:5;2567:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2488:98;:::o;3999:217::-;4075:7;4102:16;4110:7;4102;:16::i;:::-;4094:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;4185:15;:24;4201:7;4185:24;;;;;;;;;;;;;;;;;;;;;4178:31;;3999:217;;;:::o;3537:401::-;3617:13;3633:23;3648:7;3633:14;:23::i;:::-;3617:39;;3680:5;3674:11;;:2;:11;;;3666:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3771:5;3755:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3780:37;3797:5;3804:12;:10;:12::i;:::-;3780:16;:37::i;:::-;3755:62;3734:165;;;;;;;;;;;;:::i;:::-;;;;;;;;;3910:21;3919:2;3923:7;3910:8;:21::i;:::-;3607:331;3537:401;;:::o;4726:330::-;4915:41;4934:12;:10;:12::i;:::-;4948:7;4915:18;:41::i;:::-;4907:103;;;;;;;;;;;;:::i;:::-;;;;;;;;;5021:28;5031:4;5037:2;5041:7;5021:9;:28::i;:::-;4726:330;;;:::o;7467:394:13:-;7565:4;7589:10;7602:4;7589:17;;7616:5;7627:37;;;;;;;;7632:1;;7627:37;;;;7634:10;7627:37;;;;;;7645:5;7627:37;;;;7651:6;7627:37;;;;7658:5;7627:37;;;7616:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;7694:1;;7675:4;:16;7680:10;7675:16;;;;;;;;;;;;;;;:20;;;;7719:1;;7705:8;:11;7714:1;;7705:11;;;;;;;;;;;:15;;;;7735:1;7730;;:6;;;;;;;:::i;:::-;;;;;;;;7746:36;7756:10;7767:1;;7775:5;7746:9;:36::i;:::-;7810:5;7792:6;:9;7799:1;;7792:9;;;;;;;;;;;:24;;;;;;;;;;;;:::i;:::-;;7831:1;7826;;:6;;;;;;;:::i;:::-;;;;;;;;7849:5;7842:12;;;7467:394;;;;;:::o;5122:179:4:-;5255:39;5272:4;5278:2;5282:7;5255:39;;;;;;;;;;;;:16;:39::i;:::-;5122:179;;;:::o;7273:39:13:-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2191:235:4:-;2263:7;2282:13;2298:7;:16;2306:7;2298:16;;;;;;;;;;;;;;;;;;;;;2282:32;;2349:1;2332:19;;:5;:19;;;2324:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2414:5;2407:12;;;2191:235;;;:::o;1929:205::-;2001:7;2045:1;2028:19;;:5;:19;;;2020:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;2111:9;:16;2121:5;2111:16;;;;;;;;;;;;;;;;2104:23;;1929:205;;;:::o;7223:44:13:-;;;;;;;;;;;;;;;;;:::o;6927:16::-;;;;:::o;2650:102:4:-;2706:13;2738:7;2731:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2650:102;:::o;8388:232:13:-;8457:4;8472:28;8482:2;8485:1;;8493:5;8472:9;:28::i;:::-;8528:5;8510:6;:9;8517:1;;8510:9;;;;;;;;;;;:24;;;;;;;;;;;;:::i;:::-;;8559:1;;8544:9;:12;8554:1;;8544:12;;;;;;;;;;;:16;;;;8575:1;8570;;:6;;;;;;;:::i;:::-;;;;;;;;8591:1;8586;;:6;;;;;;;:::i;:::-;;;;;;;;8609:4;8602:11;;8388:232;;;;:::o;4283:153:4:-;4377:52;4396:12;:10;:12::i;:::-;4410:8;4420;4377:18;:52::i;:::-;4283:153;;:::o;7974:111:13:-;8028:13;8066:6;:11;8073:3;8066:11;;;;;;;;;;;8052:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7974:111;;;:::o;5367:320:4:-;5536:41;5555:12;:10;:12::i;:::-;5569:7;5536:18;:41::i;:::-;5528:103;;;;;;;;;;;;:::i;:::-;;;;;;;;;5641:39;5655:4;5661:2;5665:7;5674:5;5641:13;:39::i;:::-;5367:320;;;;:::o;2818:329::-;2891:13;2924:16;2932:7;2924;:16::i;:::-;2916:76;;;;;;;;;;;;:::i;:::-;;;;;;;;;3003:21;3027:10;:8;:10::i;:::-;3003:34;;3078:1;3060:7;3054:21;:25;:86;;;;;;;;;;;;;;;;;3106:7;3115:18;:7;:16;:18::i;:::-;3089:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3054:86;3047:93;;;2818:329;;;:::o;7123:43:13:-;;;;;;;;;;;;;;;;;:::o;4502:162:4:-;4599:4;4622:18;:25;4641:5;4622:25;;;;;;;;;;;;;;;:35;4648:8;4622:35;;;;;;;;;;;;;;;;;;;;;;;;;4615:42;;4502:162;;;;:::o;8090:293:13:-;8133:4;8178:8;8165:9;:21;;8157:48;;;;;;;;;;;;:::i;:::-;;;;;;;;;8215:42;8225:10;8236:1;;8238:18;;;;;;;;;;;;;;;;;8215:9;:42::i;:::-;8279:18;;;;;;;;;;;;;;;;;8267:6;:9;8274:1;;8267:9;;;;;;;;;;;:30;;;;;;;;;;;;:::i;:::-;;8322:1;;8307:9;:12;8317:1;;8307:12;;;;;;;;;;;:16;;;;8338:1;8333;;:6;;;;;;;:::i;:::-;;;;;;;;8354:1;8349;;:6;;;;;;;:::i;:::-;;;;;;;;8372:4;8365:11;;8090:293;:::o;7866:103::-;7908:11;;:::i;:::-;7937:5;7960:1;7943:4;:16;7948:10;7943:16;;;;;;;;;;;;;;;;:18;;;;:::i;:::-;7937:25;;;;;;;;:::i;:::-;;;;;;;;;;;;7930:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7866:103;:::o;7173:44::-;;;;;;;;;;;;;;;;;:::o;829:155:11:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;7159:125:4:-;7224:4;7275:1;7247:30;;:7;:16;7255:7;7247:16;;;;;;;;;;;;;;;;;;;;;:30;;;;7240:37;;7159:125;;;:::o;640:96:9:-;693:7;719:10;712:17;;640:96;:::o;11168:171:4:-;11269:2;11242:15;:24;11258:7;11242:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;11324:7;11320:2;11286:46;;11295:23;11310:7;11295:14;:23::i;:::-;11286:46;;;;;;;;;;;;11168:171;;:::o;7442:344::-;7535:4;7559:16;7567:7;7559;:16::i;:::-;7551:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;7634:13;7650:23;7665:7;7650:14;:23::i;:::-;7634:39;;7702:5;7691:16;;:7;:16;;;:51;;;;7735:7;7711:31;;:20;7723:7;7711:11;:20::i;:::-;:31;;;7691:51;:87;;;;7746:32;7763:5;7770:7;7746:16;:32::i;:::-;7691:87;7683:96;;;7442:344;;;;:::o;10452:605::-;10606:4;10579:31;;:23;10594:7;10579:14;:23::i;:::-;:31;;;10571:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;10684:1;10670:16;;:2;:16;;;10662:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;10738:39;10759:4;10765:2;10769:7;10738:20;:39::i;:::-;10839:29;10856:1;10860:7;10839:8;:29::i;:::-;10898:1;10879:9;:15;10889:4;10879:15;;;;;;;;;;;;;;;;:20;;;;;;;:::i;:::-;;;;;;;;10926:1;10909:9;:13;10919:2;10909:13;;;;;;;;;;;;;;;;:18;;;;;;;:::i;:::-;;;;;;;;10956:2;10937:7;:16;10945:7;10937:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;10993:7;10989:2;10974:27;;10983:4;10974:27;;;;;;;;;;;;11012:38;11032:4;11038:2;11042:7;11012:19;:38::i;:::-;10452:605;;;:::o;8445:311::-;8570:18;8576:2;8580:7;8570:5;:18::i;:::-;8619:54;8650:1;8654:2;8658:7;8667:5;8619:22;:54::i;:::-;8598:151;;;;;;;;;;;;:::i;:::-;;;;;;;;;8445:311;;;:::o;11474:307::-;11624:8;11615:17;;:5;:17;;;11607:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;11710:8;11672:18;:25;11691:5;11672:25;;;;;;;;;;;;;;;:35;11698:8;11672:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;11755:8;11733:41;;11748:5;11733:41;;;11765:8;11733:41;;;;;;:::i;:::-;;;;;;;;11474:307;;;:::o;6549:::-;6700:28;6710:4;6716:2;6720:7;6700:9;:28::i;:::-;6746:48;6769:4;6775:2;6779:7;6788:5;6746:22;:48::i;:::-;6738:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;6549:307;;;;:::o;3388:92::-;3439:13;3464:9;;;;;;;;;;;;;;3388:92;:::o;328:703:10:-;384:13;610:1;601:5;:10;597:51;;627:10;;;;;;;;;;;;;;;;;;;;;597:51;657:12;672:5;657:20;;687:14;711:75;726:1;718:4;:9;711:75;;743:8;;;;;:::i;:::-;;;;773:2;765:10;;;;;:::i;:::-;;;711:75;;;795:19;827:6;817:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;795:39;;844:150;860:1;851:5;:10;844:150;;887:1;877:11;;;;;:::i;:::-;;;953:2;945:5;:10;;;;:::i;:::-;932:2;:24;;;;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;;:56;;;;;;;;;;;981:2;972:11;;;;;:::i;:::-;;;844:150;;;1017:6;1003:21;;;;;328:703;;;;:::o;13668:122:4:-;;;;:::o;14162:121::-;;;;:::o;9078:427::-;9171:1;9157:16;;:2;:16;;;9149:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9229:16;9237:7;9229;:16::i;:::-;9228:17;9220:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9289:45;9318:1;9322:2;9326:7;9289:20;:45::i;:::-;9362:1;9345:9;:13;9355:2;9345:13;;;;;;;;;;;;;;;;:18;;;;;;;:::i;:::-;;;;;;;;9392:2;9373:7;:16;9381:7;9373:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9435:7;9431:2;9410:33;;9427:1;9410:33;;;;;;;;;;;;9454:44;9482:1;9486:2;9490:7;9454:19;:44::i;:::-;9078:427;;:::o;12334:778::-;12484:4;12504:15;:2;:13;;;:15::i;:::-;12500:606;;;12555:2;12539:36;;;12576:12;:10;:12::i;:::-;12590:4;12596:7;12605:5;12539:72;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;12535:519;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12795:1;12778:6;:13;:18;12774:266;;12820:60;;;;;;;;;;:::i;:::-;;;;;;;;12774:266;12992:6;12986:13;12977:6;12973:2;12969:15;12962:38;12535:519;12671:41;;;12661:51;;;:6;:51;;;;12654:58;;;;;12500:606;13091:4;13084:11;;12334:778;;;;;;;:::o;1175:320:8:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:16:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:307::-;1866:1;1876:113;1890:6;1887:1;1884:13;1876:113;;;1975:1;1970:3;1966:11;1960:18;1956:1;1951:3;1947:11;1940:39;1912:2;1909:1;1905:10;1900:15;;1876:113;;;2007:6;2004:1;2001:13;1998:101;;;2087:1;2078:6;2073:3;2069:16;2062:27;1998:101;1847:258;1798:307;;;:::o;2111:102::-;2152:6;2203:2;2199:7;2194:2;2187:5;2183:14;2179:28;2169:38;;2111:102;;;:::o;2219:364::-;2307:3;2335:39;2368:5;2335:39;:::i;:::-;2390:71;2454:6;2449:3;2390:71;:::i;:::-;2383:78;;2470:52;2515:6;2510:3;2503:4;2496:5;2492:16;2470:52;:::i;:::-;2547:29;2569:6;2547:29;:::i;:::-;2542:3;2538:39;2531:46;;2311:272;2219:364;;;;:::o;2589:313::-;2702:4;2740:2;2729:9;2725:18;2717:26;;2789:9;2783:4;2779:20;2775:1;2764:9;2760:17;2753:47;2817:78;2890:4;2881:6;2817:78;:::i;:::-;2809:86;;2589:313;;;;:::o;2908:77::-;2945:7;2974:5;2963:16;;2908:77;;;:::o;2991:122::-;3064:24;3082:5;3064:24;:::i;:::-;3057:5;3054:35;3044:63;;3103:1;3100;3093:12;3044:63;2991:122;:::o;3119:139::-;3165:5;3203:6;3190:20;3181:29;;3219:33;3246:5;3219:33;:::i;:::-;3119:139;;;;:::o;3264:329::-;3323:6;3372:2;3360:9;3351:7;3347:23;3343:32;3340:119;;;3378:79;;:::i;:::-;3340:119;3498:1;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3469:117;3264:329;;;;:::o;3599:126::-;3636:7;3676:42;3669:5;3665:54;3654:65;;3599:126;;;:::o;3731:96::-;3768:7;3797:24;3815:5;3797:24;:::i;:::-;3786:35;;3731:96;;;:::o;3833:118::-;3920:24;3938:5;3920:24;:::i;:::-;3915:3;3908:37;3833:118;;:::o;3957:222::-;4050:4;4088:2;4077:9;4073:18;4065:26;;4101:71;4169:1;4158:9;4154:17;4145:6;4101:71;:::i;:::-;3957:222;;;;:::o;4185:122::-;4258:24;4276:5;4258:24;:::i;:::-;4251:5;4248:35;4238:63;;4297:1;4294;4287:12;4238:63;4185:122;:::o;4313:139::-;4359:5;4397:6;4384:20;4375:29;;4413:33;4440:5;4413:33;:::i;:::-;4313:139;;;;:::o;4458:474::-;4526:6;4534;4583:2;4571:9;4562:7;4558:23;4554:32;4551:119;;;4589:79;;:::i;:::-;4551:119;4709:1;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4680:117;4836:2;4862:53;4907:7;4898:6;4887:9;4883:22;4862:53;:::i;:::-;4852:63;;4807:118;4458:474;;;;;:::o;4938:619::-;5015:6;5023;5031;5080:2;5068:9;5059:7;5055:23;5051:32;5048:119;;;5086:79;;:::i;:::-;5048:119;5206:1;5231:53;5276:7;5267:6;5256:9;5252:22;5231:53;:::i;:::-;5221:63;;5177:117;5333:2;5359:53;5404:7;5395:6;5384:9;5380:22;5359:53;:::i;:::-;5349:63;;5304:118;5461:2;5487:53;5532:7;5523:6;5512:9;5508:22;5487:53;:::i;:::-;5477:63;;5432:118;4938:619;;;;;:::o;5563:117::-;5672:1;5669;5662:12;5686:117;5795:1;5792;5785:12;5809:180;5857:77;5854:1;5847:88;5954:4;5951:1;5944:15;5978:4;5975:1;5968:15;5995:281;6078:27;6100:4;6078:27;:::i;:::-;6070:6;6066:40;6208:6;6196:10;6193:22;6172:18;6160:10;6157:34;6154:62;6151:88;;;6219:18;;:::i;:::-;6151:88;6259:10;6255:2;6248:22;6038:238;5995:281;;:::o;6282:129::-;6316:6;6343:20;;:::i;:::-;6333:30;;6372:33;6400:4;6392:6;6372:33;:::i;:::-;6282:129;;;:::o;6417:308::-;6479:4;6569:18;6561:6;6558:30;6555:56;;;6591:18;;:::i;:::-;6555:56;6629:29;6651:6;6629:29;:::i;:::-;6621:37;;6713:4;6707;6703:15;6695:23;;6417:308;;;:::o;6731:154::-;6815:6;6810:3;6805;6792:30;6877:1;6868:6;6863:3;6859:16;6852:27;6731:154;;;:::o;6891:412::-;6969:5;6994:66;7010:49;7052:6;7010:49;:::i;:::-;6994:66;:::i;:::-;6985:75;;7083:6;7076:5;7069:21;7121:4;7114:5;7110:16;7159:3;7150:6;7145:3;7141:16;7138:25;7135:112;;;7166:79;;:::i;:::-;7135:112;7256:41;7290:6;7285:3;7280;7256:41;:::i;:::-;6975:328;6891:412;;;;;:::o;7323:340::-;7379:5;7428:3;7421:4;7413:6;7409:17;7405:27;7395:122;;7436:79;;:::i;:::-;7395:122;7553:6;7540:20;7578:79;7653:3;7645:6;7638:4;7630:6;7626:17;7578:79;:::i;:::-;7569:88;;7385:278;7323:340;;;;:::o;7669:1159::-;7776:6;7784;7792;7841:2;7829:9;7820:7;7816:23;7812:32;7809:119;;;7847:79;;:::i;:::-;7809:119;7995:1;7984:9;7980:17;7967:31;8025:18;8017:6;8014:30;8011:117;;;8047:79;;:::i;:::-;8011:117;8152:63;8207:7;8198:6;8187:9;8183:22;8152:63;:::i;:::-;8142:73;;7938:287;8292:2;8281:9;8277:18;8264:32;8323:18;8315:6;8312:30;8309:117;;;8345:79;;:::i;:::-;8309:117;8450:63;8505:7;8496:6;8485:9;8481:22;8450:63;:::i;:::-;8440:73;;8235:288;8590:2;8579:9;8575:18;8562:32;8621:18;8613:6;8610:30;8607:117;;;8643:79;;:::i;:::-;8607:117;8748:63;8803:7;8794:6;8783:9;8779:22;8748:63;:::i;:::-;8738:73;;8533:288;7669:1159;;;;;:::o;8834:98::-;8885:6;8919:5;8913:12;8903:22;;8834:98;;;:::o;8938:168::-;9021:11;9055:6;9050:3;9043:19;9095:4;9090:3;9086:14;9071:29;;8938:168;;;;:::o;9112:360::-;9198:3;9226:38;9258:5;9226:38;:::i;:::-;9280:70;9343:6;9338:3;9280:70;:::i;:::-;9273:77;;9359:52;9404:6;9399:3;9392:4;9385:5;9381:16;9359:52;:::i;:::-;9436:29;9458:6;9436:29;:::i;:::-;9431:3;9427:39;9420:46;;9202:270;9112:360;;;;:::o;9478:309::-;9589:4;9627:2;9616:9;9612:18;9604:26;;9676:9;9670:4;9666:20;9662:1;9651:9;9647:17;9640:47;9704:76;9775:4;9766:6;9704:76;:::i;:::-;9696:84;;9478:309;;;;:::o;9793:329::-;9852:6;9901:2;9889:9;9880:7;9876:23;9872:32;9869:119;;;9907:79;;:::i;:::-;9869:119;10027:1;10052:53;10097:7;10088:6;10077:9;10073:22;10052:53;:::i;:::-;10042:63;;9998:117;9793:329;;;;:::o;10128:118::-;10215:24;10233:5;10215:24;:::i;:::-;10210:3;10203:37;10128:118;;:::o;10252:222::-;10345:4;10383:2;10372:9;10368:18;10360:26;;10396:71;10464:1;10453:9;10449:17;10440:6;10396:71;:::i;:::-;10252:222;;;;:::o;10480:654::-;10558:6;10566;10615:2;10603:9;10594:7;10590:23;10586:32;10583:119;;;10621:79;;:::i;:::-;10583:119;10741:1;10766:53;10811:7;10802:6;10791:9;10787:22;10766:53;:::i;:::-;10756:63;;10712:117;10896:2;10885:9;10881:18;10868:32;10927:18;10919:6;10916:30;10913:117;;;10949:79;;:::i;:::-;10913:117;11054:63;11109:7;11100:6;11089:9;11085:22;11054:63;:::i;:::-;11044:73;;10839:288;10480:654;;;;;:::o;11140:116::-;11210:21;11225:5;11210:21;:::i;:::-;11203:5;11200:32;11190:60;;11246:1;11243;11236:12;11190:60;11140:116;:::o;11262:133::-;11305:5;11343:6;11330:20;11321:29;;11359:30;11383:5;11359:30;:::i;:::-;11262:133;;;;:::o;11401:468::-;11466:6;11474;11523:2;11511:9;11502:7;11498:23;11494:32;11491:119;;;11529:79;;:::i;:::-;11491:119;11649:1;11674:53;11719:7;11710:6;11699:9;11695:22;11674:53;:::i;:::-;11664:63;;11620:117;11776:2;11802:50;11844:7;11835:6;11824:9;11820:22;11802:50;:::i;:::-;11792:60;;11747:115;11401:468;;;;;:::o;11875:307::-;11936:4;12026:18;12018:6;12015:30;12012:56;;;12048:18;;:::i;:::-;12012:56;12086:29;12108:6;12086:29;:::i;:::-;12078:37;;12170:4;12164;12160:15;12152:23;;11875:307;;;:::o;12188:410::-;12265:5;12290:65;12306:48;12347:6;12306:48;:::i;:::-;12290:65;:::i;:::-;12281:74;;12378:6;12371:5;12364:21;12416:4;12409:5;12405:16;12454:3;12445:6;12440:3;12436:16;12433:25;12430:112;;;12461:79;;:::i;:::-;12430:112;12551:41;12585:6;12580:3;12575;12551:41;:::i;:::-;12271:327;12188:410;;;;;:::o;12617:338::-;12672:5;12721:3;12714:4;12706:6;12702:17;12698:27;12688:122;;12729:79;;:::i;:::-;12688:122;12846:6;12833:20;12871:78;12945:3;12937:6;12930:4;12922:6;12918:17;12871:78;:::i;:::-;12862:87;;12678:277;12617:338;;;;:::o;12961:943::-;13056:6;13064;13072;13080;13129:3;13117:9;13108:7;13104:23;13100:33;13097:120;;;13136:79;;:::i;:::-;13097:120;13256:1;13281:53;13326:7;13317:6;13306:9;13302:22;13281:53;:::i;:::-;13271:63;;13227:117;13383:2;13409:53;13454:7;13445:6;13434:9;13430:22;13409:53;:::i;:::-;13399:63;;13354:118;13511:2;13537:53;13582:7;13573:6;13562:9;13558:22;13537:53;:::i;:::-;13527:63;;13482:118;13667:2;13656:9;13652:18;13639:32;13698:18;13690:6;13687:30;13684:117;;;13720:79;;:::i;:::-;13684:117;13825:62;13879:7;13870:6;13859:9;13855:22;13825:62;:::i;:::-;13815:72;;13610:287;12961:943;;;;;;;:::o;13910:474::-;13978:6;13986;14035:2;14023:9;14014:7;14010:23;14006:32;14003:119;;;14041:79;;:::i;:::-;14003:119;14161:1;14186:53;14231:7;14222:6;14211:9;14207:22;14186:53;:::i;:::-;14176:63;;14132:117;14288:2;14314:53;14359:7;14350:6;14339:9;14335:22;14314:53;:::i;:::-;14304:63;;14259:118;13910:474;;;;;:::o;14390:108::-;14467:24;14485:5;14467:24;:::i;:::-;14462:3;14455:37;14390:108;;:::o;14504:::-;14581:24;14599:5;14581:24;:::i;:::-;14576:3;14569:37;14504:108;;:::o;14618:159::-;14692:11;14726:6;14721:3;14714:19;14766:4;14761:3;14757:14;14742:29;;14618:159;;;;:::o;14783:344::-;14861:3;14889:39;14922:5;14889:39;:::i;:::-;14944:61;14998:6;14993:3;14944:61;:::i;:::-;14937:68;;15014:52;15059:6;15054:3;15047:4;15040:5;15036:16;15014:52;:::i;:::-;15091:29;15113:6;15091:29;:::i;:::-;15086:3;15082:39;15075:46;;14865:262;14783:344;;;;:::o;15177:1266::-;15290:3;15326:4;15321:3;15317:14;15411:4;15404:5;15400:16;15394:23;15430:63;15487:4;15482:3;15478:14;15464:12;15430:63;:::i;:::-;15341:162;15588:4;15581:5;15577:16;15571:23;15607:63;15664:4;15659:3;15655:14;15641:12;15607:63;:::i;:::-;15513:167;15762:4;15755:5;15751:16;15745:23;15815:3;15809:4;15805:14;15798:4;15793:3;15789:14;15782:38;15841:73;15909:4;15895:12;15841:73;:::i;:::-;15833:81;;15690:235;16008:4;16001:5;15997:16;15991:23;16061:3;16055:4;16051:14;16044:4;16039:3;16035:14;16028:38;16087:73;16155:4;16141:12;16087:73;:::i;:::-;16079:81;;15935:236;16253:4;16246:5;16242:16;16236:23;16306:3;16300:4;16296:14;16289:4;16284:3;16280:14;16273:38;16332:73;16400:4;16386:12;16332:73;:::i;:::-;16324:81;;16181:235;16433:4;16426:11;;15295:1148;15177:1266;;;;:::o;16449:361::-;16586:4;16624:2;16613:9;16609:18;16601:26;;16673:9;16667:4;16663:20;16659:1;16648:9;16644:17;16637:47;16701:102;16798:4;16789:6;16701:102;:::i;:::-;16693:110;;16449:361;;;;:::o;16816:180::-;16864:77;16861:1;16854:88;16961:4;16958:1;16951:15;16985:4;16982:1;16975:15;17002:320;17046:6;17083:1;17077:4;17073:12;17063:22;;17130:1;17124:4;17120:12;17151:18;17141:81;;17207:4;17199:6;17195:17;17185:27;;17141:81;17269:2;17261:6;17258:14;17238:18;17235:38;17232:84;;17288:18;;:::i;:::-;17232:84;17053:269;17002:320;;;:::o;17328:231::-;17468:34;17464:1;17456:6;17452:14;17445:58;17537:14;17532:2;17524:6;17520:15;17513:39;17328:231;:::o;17565:366::-;17707:3;17728:67;17792:2;17787:3;17728:67;:::i;:::-;17721:74;;17804:93;17893:3;17804:93;:::i;:::-;17922:2;17917:3;17913:12;17906:19;;17565:366;;;:::o;17937:419::-;18103:4;18141:2;18130:9;18126:18;18118:26;;18190:9;18184:4;18180:20;18176:1;18165:9;18161:17;18154:47;18218:131;18344:4;18218:131;:::i;:::-;18210:139;;17937:419;;;:::o;18362:220::-;18502:34;18498:1;18490:6;18486:14;18479:58;18571:3;18566:2;18558:6;18554:15;18547:28;18362:220;:::o;18588:366::-;18730:3;18751:67;18815:2;18810:3;18751:67;:::i;:::-;18744:74;;18827:93;18916:3;18827:93;:::i;:::-;18945:2;18940:3;18936:12;18929:19;;18588:366;;;:::o;18960:419::-;19126:4;19164:2;19153:9;19149:18;19141:26;;19213:9;19207:4;19203:20;19199:1;19188:9;19184:17;19177:47;19241:131;19367:4;19241:131;:::i;:::-;19233:139;;18960:419;;;:::o;19385:243::-;19525:34;19521:1;19513:6;19509:14;19502:58;19594:26;19589:2;19581:6;19577:15;19570:51;19385:243;:::o;19634:366::-;19776:3;19797:67;19861:2;19856:3;19797:67;:::i;:::-;19790:74;;19873:93;19962:3;19873:93;:::i;:::-;19991:2;19986:3;19982:12;19975:19;;19634:366;;;:::o;20006:419::-;20172:4;20210:2;20199:9;20195:18;20187:26;;20259:9;20253:4;20249:20;20245:1;20234:9;20230:17;20223:47;20287:131;20413:4;20287:131;:::i;:::-;20279:139;;20006:419;;;:::o;20431:236::-;20571:34;20567:1;20559:6;20555:14;20548:58;20640:19;20635:2;20627:6;20623:15;20616:44;20431:236;:::o;20673:366::-;20815:3;20836:67;20900:2;20895:3;20836:67;:::i;:::-;20829:74;;20912:93;21001:3;20912:93;:::i;:::-;21030:2;21025:3;21021:12;21014:19;;20673:366;;;:::o;21045:419::-;21211:4;21249:2;21238:9;21234:18;21226:26;;21298:9;21292:4;21288:20;21284:1;21273:9;21269:17;21262:47;21326:131;21452:4;21326:131;:::i;:::-;21318:139;;21045:419;;;:::o;21470:180::-;21518:77;21515:1;21508:88;21615:4;21612:1;21605:15;21639:4;21636:1;21629:15;21656:305;21696:3;21715:20;21733:1;21715:20;:::i;:::-;21710:25;;21749:20;21767:1;21749:20;:::i;:::-;21744:25;;21903:1;21835:66;21831:74;21828:1;21825:81;21822:107;;;21909:18;;:::i;:::-;21822:107;21953:1;21950;21946:9;21939:16;;21656:305;;;;:::o;21967:228::-;22107:34;22103:1;22095:6;22091:14;22084:58;22176:11;22171:2;22163:6;22159:15;22152:36;21967:228;:::o;22201:366::-;22343:3;22364:67;22428:2;22423:3;22364:67;:::i;:::-;22357:74;;22440:93;22529:3;22440:93;:::i;:::-;22558:2;22553:3;22549:12;22542:19;;22201:366;;;:::o;22573:419::-;22739:4;22777:2;22766:9;22762:18;22754:26;;22826:9;22820:4;22816:20;22812:1;22801:9;22797:17;22790:47;22854:131;22980:4;22854:131;:::i;:::-;22846:139;;22573:419;;;:::o;22998:229::-;23138:34;23134:1;23126:6;23122:14;23115:58;23207:12;23202:2;23194:6;23190:15;23183:37;22998:229;:::o;23233:366::-;23375:3;23396:67;23460:2;23455:3;23396:67;:::i;:::-;23389:74;;23472:93;23561:3;23472:93;:::i;:::-;23590:2;23585:3;23581:12;23574:19;;23233:366;;;:::o;23605:419::-;23771:4;23809:2;23798:9;23794:18;23786:26;;23858:9;23852:4;23848:20;23844:1;23833:9;23829:17;23822:47;23886:131;24012:4;23886:131;:::i;:::-;23878:139;;23605:419;;;:::o;24030:234::-;24170:34;24166:1;24158:6;24154:14;24147:58;24239:17;24234:2;24226:6;24222:15;24215:42;24030:234;:::o;24270:366::-;24412:3;24433:67;24497:2;24492:3;24433:67;:::i;:::-;24426:74;;24509:93;24598:3;24509:93;:::i;:::-;24627:2;24622:3;24618:12;24611:19;;24270:366;;;:::o;24642:419::-;24808:4;24846:2;24835:9;24831:18;24823:26;;24895:9;24889:4;24885:20;24881:1;24870:9;24866:17;24859:47;24923:131;25049:4;24923:131;:::i;:::-;24915:139;;24642:419;;;:::o;25067:148::-;25169:11;25206:3;25191:18;;25067:148;;;;:::o;25221:377::-;25327:3;25355:39;25388:5;25355:39;:::i;:::-;25410:89;25492:6;25487:3;25410:89;:::i;:::-;25403:96;;25508:52;25553:6;25548:3;25541:4;25534:5;25530:16;25508:52;:::i;:::-;25585:6;25580:3;25576:16;25569:23;;25331:267;25221:377;;;;:::o;25604:435::-;25784:3;25806:95;25897:3;25888:6;25806:95;:::i;:::-;25799:102;;25918:95;26009:3;26000:6;25918:95;:::i;:::-;25911:102;;26030:3;26023:10;;25604:435;;;;;:::o;26045:164::-;26185:16;26181:1;26173:6;26169:14;26162:40;26045:164;:::o;26215:366::-;26357:3;26378:67;26442:2;26437:3;26378:67;:::i;:::-;26371:74;;26454:93;26543:3;26454:93;:::i;:::-;26572:2;26567:3;26563:12;26556:19;;26215:366;;;:::o;26587:419::-;26753:4;26791:2;26780:9;26776:18;26768:26;;26840:9;26834:4;26830:20;26826:1;26815:9;26811:17;26804:47;26868:131;26994:4;26868:131;:::i;:::-;26860:139;;26587:419;;;:::o;27012:191::-;27052:4;27072:20;27090:1;27072:20;:::i;:::-;27067:25;;27106:20;27124:1;27106:20;:::i;:::-;27101:25;;27145:1;27142;27139:8;27136:34;;;27150:18;;:::i;:::-;27136:34;27195:1;27192;27188:9;27180:17;;27012:191;;;;:::o;27209:180::-;27257:77;27254:1;27247:88;27354:4;27351:1;27344:15;27378:4;27375:1;27368:15;27395:231;27535:34;27531:1;27523:6;27519:14;27512:58;27604:14;27599:2;27591:6;27587:15;27580:39;27395:231;:::o;27632:366::-;27774:3;27795:67;27859:2;27854:3;27795:67;:::i;:::-;27788:74;;27871:93;27960:3;27871:93;:::i;:::-;27989:2;27984:3;27980:12;27973:19;;27632:366;;;:::o;28004:419::-;28170:4;28208:2;28197:9;28193:18;28185:26;;28257:9;28251:4;28247:20;28243:1;28232:9;28228:17;28221:47;28285:131;28411:4;28285:131;:::i;:::-;28277:139;;28004:419;;;:::o;28429:224::-;28569:34;28565:1;28557:6;28553:14;28546:58;28638:7;28633:2;28625:6;28621:15;28614:32;28429:224;:::o;28659:366::-;28801:3;28822:67;28886:2;28881:3;28822:67;:::i;:::-;28815:74;;28898:93;28987:3;28898:93;:::i;:::-;29016:2;29011:3;29007:12;29000:19;;28659:366;;;:::o;29031:419::-;29197:4;29235:2;29224:9;29220:18;29212:26;;29284:9;29278:4;29274:20;29270:1;29259:9;29255:17;29248:47;29312:131;29438:4;29312:131;:::i;:::-;29304:139;;29031:419;;;:::o;29456:223::-;29596:34;29592:1;29584:6;29580:14;29573:58;29665:6;29660:2;29652:6;29648:15;29641:31;29456:223;:::o;29685:366::-;29827:3;29848:67;29912:2;29907:3;29848:67;:::i;:::-;29841:74;;29924:93;30013:3;29924:93;:::i;:::-;30042:2;30037:3;30033:12;30026:19;;29685:366;;;:::o;30057:419::-;30223:4;30261:2;30250:9;30246:18;30238:26;;30310:9;30304:4;30300:20;30296:1;30285:9;30281:17;30274:47;30338:131;30464:4;30338:131;:::i;:::-;30330:139;;30057:419;;;:::o;30482:237::-;30622:34;30618:1;30610:6;30606:14;30599:58;30691:20;30686:2;30678:6;30674:15;30667:45;30482:237;:::o;30725:366::-;30867:3;30888:67;30952:2;30947:3;30888:67;:::i;:::-;30881:74;;30964:93;31053:3;30964:93;:::i;:::-;31082:2;31077:3;31073:12;31066:19;;30725:366;;;:::o;31097:419::-;31263:4;31301:2;31290:9;31286:18;31278:26;;31350:9;31344:4;31340:20;31336:1;31325:9;31321:17;31314:47;31378:131;31504:4;31378:131;:::i;:::-;31370:139;;31097:419;;;:::o;31522:175::-;31662:27;31658:1;31650:6;31646:14;31639:51;31522:175;:::o;31703:366::-;31845:3;31866:67;31930:2;31925:3;31866:67;:::i;:::-;31859:74;;31942:93;32031:3;31942:93;:::i;:::-;32060:2;32055:3;32051:12;32044:19;;31703:366;;;:::o;32075:419::-;32241:4;32279:2;32268:9;32264:18;32256:26;;32328:9;32322:4;32318:20;32314:1;32303:9;32299:17;32292:47;32356:131;32482:4;32356:131;:::i;:::-;32348:139;;32075:419;;;:::o;32500:233::-;32539:3;32562:24;32580:5;32562:24;:::i;:::-;32553:33;;32608:66;32601:5;32598:77;32595:103;;32678:18;;:::i;:::-;32595:103;32725:1;32718:5;32714:13;32707:20;;32500:233;;;:::o;32739:180::-;32787:77;32784:1;32777:88;32884:4;32881:1;32874:15;32908:4;32905:1;32898:15;32925:185;32965:1;32982:20;33000:1;32982:20;:::i;:::-;32977:25;;33016:20;33034:1;33016:20;:::i;:::-;33011:25;;33055:1;33045:35;;33060:18;;:::i;:::-;33045:35;33102:1;33099;33095:9;33090:14;;32925:185;;;;:::o;33116:176::-;33148:1;33165:20;33183:1;33165:20;:::i;:::-;33160:25;;33199:20;33217:1;33199:20;:::i;:::-;33194:25;;33238:1;33228:35;;33243:18;;:::i;:::-;33228:35;33284:1;33281;33277:9;33272:14;;33116:176;;;;:::o;33298:182::-;33438:34;33434:1;33426:6;33422:14;33415:58;33298:182;:::o;33486:366::-;33628:3;33649:67;33713:2;33708:3;33649:67;:::i;:::-;33642:74;;33725:93;33814:3;33725:93;:::i;:::-;33843:2;33838:3;33834:12;33827:19;;33486:366;;;:::o;33858:419::-;34024:4;34062:2;34051:9;34047:18;34039:26;;34111:9;34105:4;34101:20;34097:1;34086:9;34082:17;34075:47;34139:131;34265:4;34139:131;:::i;:::-;34131:139;;33858:419;;;:::o;34283:178::-;34423:30;34419:1;34411:6;34407:14;34400:54;34283:178;:::o;34467:366::-;34609:3;34630:67;34694:2;34689:3;34630:67;:::i;:::-;34623:74;;34706:93;34795:3;34706:93;:::i;:::-;34824:2;34819:3;34815:12;34808:19;;34467:366;;;:::o;34839:419::-;35005:4;35043:2;35032:9;35028:18;35020:26;;35092:9;35086:4;35082:20;35078:1;35067:9;35063:17;35056:47;35120:131;35246:4;35120:131;:::i;:::-;35112:139;;34839:419;;;:::o;35264:640::-;35459:4;35497:3;35486:9;35482:19;35474:27;;35511:71;35579:1;35568:9;35564:17;35555:6;35511:71;:::i;:::-;35592:72;35660:2;35649:9;35645:18;35636:6;35592:72;:::i;:::-;35674;35742:2;35731:9;35727:18;35718:6;35674:72;:::i;:::-;35793:9;35787:4;35783:20;35778:2;35767:9;35763:18;35756:48;35821:76;35892:4;35883:6;35821:76;:::i;:::-;35813:84;;35264:640;;;;;;;:::o;35910:141::-;35966:5;35997:6;35991:13;35982:22;;36013:32;36039:5;36013:32;:::i;:::-;35910:141;;;;:::o;36057:349::-;36126:6;36175:2;36163:9;36154:7;36150:23;36146:32;36143:119;;;36181:79;;:::i;:::-;36143:119;36301:1;36326:63;36381:7;36372:6;36361:9;36357:22;36326:63;:::i;:::-;36316:73;;36272:127;36057:349;;;;:::o","source":"// SPDX-License-Identifier: GPL-3.0\\n// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //\\n//   \\n//\\n// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n//      @artist ::          stereoIII6.eth                                                                                                                                          //\\n//      @msg ::             stereoIII6.eth.chat                                                                                                                                     //\\n//      @github ::          stereoIII6                                                                                                                                              //\\n//                                                                                                                                                                                  //\\n//      @dev ::             stereoIII6.eth                                                                                                                                          //\\n//      @msg ::             stereoIII6.eth.chat                                                                                                                                     //\\n//      @github ::          stereoIII6                                                                                                                                              //\\n//                                                                                                                                                                                  //\\n//      @author ::          stereoIII6.eth                                                                                                                                          //\\n//      @msg ::             stereoIII6.eth.chat                                                                                                                                     //\\n//      @github ::          stereoIII6                                                                                                                                              //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //\\n//                                                                                                                                                                                  //\\n// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n//      @title ::                                                                                                                                                                   //\\n//      @description ::                                                                                                                                                             //\\n//      @version ::         0.0.1                                                                                                                                                   //\\n//      @purpose ::                                                                                                                                                                 //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n//                                                                                                                                                                                  //\\n// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //\\n\\npragma solidity ^0.8.7;\\nimport \\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\";\\ncontract List is ERC721 {\\n    struct User {\\n        uint256 id;\\n        address userAdr;\\n        string name;\\n        string email;\\n        string data;\\n    }\\n    uint256 internal u;\\n    uint256 internal d;\\n    uint256 public t;\\n    uint256 internal n;\\n    \\n    User[] internal users;\\n    mapping(address => uint256) internal uNum;\\n    address payable internal safe;\\n    address payable internal owner;\\n    mapping(uint256 => uint256) public userlist; \\n    mapping(uint256 => uint256) public donations;\\n    mapping(uint256 => uint256) public nftletter;\\n    mapping(uint256 => bytes) public tokens;\\n    constructor() ERC721(\\"Impact Market\\",\\"IMPCT\\") {\\n        safe = payable(address(this));\\n        owner = payable(msg.sender);\\n        u = 1;\\n    }\\n    function makeUser(string memory _name,string memory _email, string memory _data) external returns(bool){\\n        \\n        bool check = true;\\n        users.push(User(u,msg.sender,_name,_email,_data));\\n        uNum[msg.sender] = u;\\n        userlist[u] = t;\\n        u += 1;\\n        _safeMint(msg.sender,t,bytes(_data));\\n        tokens[t] = bytes(_data);\\n        t += 1;\\n        return check;\\n    }\\n    function readUser() external view returns(User memory){\\n        return users[uNum[msg.sender]-1];\\n    }\\n    function readToken(uint256 _id) external view returns(string memory){\\n        return string(tokens[_id]);\\n    }\\n    function donate() external payable returns(bool){\\n        \\n        require(msg.value >= 1*10**15, \\"not enough wei\\");\\n        _safeMint(msg.sender,t,bytes(\\"i donated\\"));\\n        tokens[t] = bytes(\\"i donated\\");\\n        donations[d] = t;\\n        d += 1;\\n        t += 1;\\n        return true;\\n    }\\n    function nftLetter(address _a, string memory _data) external returns(bool){\\n        _safeMint(_a,t,bytes(_data));\\n        tokens[t] = bytes(_data);\\n        nftletter[n] = t;\\n        n += 1;\\n        t += 1;\\n        return true;\\n    }\\n\\n    fallback() external \\n    {\\n\\n    }\\n}","sourcePath":"/Users/jediswag/Documents/web3/goldmansucks/impactMarketList/contracts/List.sol","ast":{"absolutePath":"project:/contracts/List.sol","exportedSymbols":{"Address":[2595],"Context":[2617],"ERC165":[2844],"ERC721":[2139],"IERC165":[2856],"IERC721":[2255],"IERC721Metadata":[2300],"IERC721Receiver":[2273],"List":[3142],"Strings":[2820]},"id":3143,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":2858,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"6634:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":2859,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3143,"sourceUnit":2140,"src":"6658:57:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2860,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2139,"src":"6733:6:13"},"id":2861,"nodeType":"InheritanceSpecifier","src":"6733:6:13"}],"canonicalName":"List","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3142,"linearizedBaseContracts":[3142,2139,2300,2255,2844,2856,2617],"name":"List","nameLocation":"6725:4:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"List.User","id":2872,"members":[{"constant":false,"id":2863,"mutability":"mutable","name":"id","nameLocation":"6776:2:13","nodeType":"VariableDeclaration","scope":2872,"src":"6768:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2862,"name":"uint256","nodeType":"ElementaryTypeName","src":"6768:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"userAdr","nameLocation":"6796:7:13","nodeType":"VariableDeclaration","scope":2872,"src":"6788:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2864,"name":"address","nodeType":"ElementaryTypeName","src":"6788:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2867,"mutability":"mutable","name":"name","nameLocation":"6820:4:13","nodeType":"VariableDeclaration","scope":2872,"src":"6813:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2866,"name":"string","nodeType":"ElementaryTypeName","src":"6813:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2869,"mutability":"mutable","name":"email","nameLocation":"6841:5:13","nodeType":"VariableDeclaration","scope":2872,"src":"6834:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2868,"name":"string","nodeType":"ElementaryTypeName","src":"6834:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"data","nameLocation":"6863:4:13","nodeType":"VariableDeclaration","scope":2872,"src":"6856:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2870,"name":"string","nodeType":"ElementaryTypeName","src":"6856:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"User","nameLocation":"6753:4:13","nodeType":"StructDefinition","scope":3142,"src":"6746:128:13","visibility":"public"},{"constant":false,"id":2874,"mutability":"mutable","name":"u","nameLocation":"6896:1:13","nodeType":"VariableDeclaration","scope":3142,"src":"6879:18:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2873,"name":"uint256","nodeType":"ElementaryTypeName","src":"6879:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2876,"mutability":"mutable","name":"d","nameLocation":"6920:1:13","nodeType":"VariableDeclaration","scope":3142,"src":"6903:18:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2875,"name":"uint256","nodeType":"ElementaryTypeName","src":"6903:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"functionSelector":"92d0d153","id":2878,"mutability":"mutable","name":"t","nameLocation":"6942:1:13","nodeType":"VariableDeclaration","scope":3142,"src":"6927:16:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2877,"name":"uint256","nodeType":"ElementaryTypeName","src":"6927:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":2880,"mutability":"mutable","name":"n","nameLocation":"6966:1:13","nodeType":"VariableDeclaration","scope":3142,"src":"6949:18:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2879,"name":"uint256","nodeType":"ElementaryTypeName","src":"6949:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2884,"mutability":"mutable","name":"users","nameLocation":"6994:5:13","nodeType":"VariableDeclaration","scope":3142,"src":"6978:21:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_User_$2872_storage_$dyn_storage","typeString":"struct List.User[]"},"typeName":{"baseType":{"id":2882,"nodeType":"UserDefinedTypeName","pathNode":{"id":2881,"name":"User","nodeType":"IdentifierPath","referencedDeclaration":2872,"src":"6978:4:13"},"referencedDeclaration":2872,"src":"6978:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_storage_ptr","typeString":"struct List.User"}},"id":2883,"nodeType":"ArrayTypeName","src":"6978:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_User_$2872_storage_$dyn_storage_ptr","typeString":"struct List.User[]"}},"visibility":"internal"},{"constant":false,"id":2888,"mutability":"mutable","name":"uNum","nameLocation":"7042:4:13","nodeType":"VariableDeclaration","scope":3142,"src":"7005:41:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2887,"keyType":{"id":2885,"name":"address","nodeType":"ElementaryTypeName","src":"7013:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"7005:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2886,"name":"uint256","nodeType":"ElementaryTypeName","src":"7024:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2890,"mutability":"mutable","name":"safe","nameLocation":"7077:4:13","nodeType":"VariableDeclaration","scope":3142,"src":"7052:29:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2889,"name":"address","nodeType":"ElementaryTypeName","src":"7052:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2892,"mutability":"mutable","name":"owner","nameLocation":"7112:5:13","nodeType":"VariableDeclaration","scope":3142,"src":"7087:30:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2891,"name":"address","nodeType":"ElementaryTypeName","src":"7087:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"functionSelector":"d8e136e2","id":2896,"mutability":"mutable","name":"userlist","nameLocation":"7158:8:13","nodeType":"VariableDeclaration","scope":3142,"src":"7123:43:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2895,"keyType":{"id":2893,"name":"uint256","nodeType":"ElementaryTypeName","src":"7131:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"7123:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2894,"name":"uint256","nodeType":"ElementaryTypeName","src":"7142:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"f8626af8","id":2900,"mutability":"mutable","name":"donations","nameLocation":"7208:9:13","nodeType":"VariableDeclaration","scope":3142,"src":"7173:44:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2899,"keyType":{"id":2897,"name":"uint256","nodeType":"ElementaryTypeName","src":"7181:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"7173:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2898,"name":"uint256","nodeType":"ElementaryTypeName","src":"7192:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"8ef61264","id":2904,"mutability":"mutable","name":"nftletter","nameLocation":"7258:9:13","nodeType":"VariableDeclaration","scope":3142,"src":"7223:44:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2903,"keyType":{"id":2901,"name":"uint256","nodeType":"ElementaryTypeName","src":"7231:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"7223:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2902,"name":"uint256","nodeType":"ElementaryTypeName","src":"7242:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"4f64b2be","id":2908,"mutability":"mutable","name":"tokens","nameLocation":"7306:6:13","nodeType":"VariableDeclaration","scope":3142,"src":"7273:39:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes)"},"typeName":{"id":2907,"keyType":{"id":2905,"name":"uint256","nodeType":"ElementaryTypeName","src":"7281:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"7273:25:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes)"},"valueType":{"id":2906,"name":"bytes","nodeType":"ElementaryTypeName","src":"7292:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"public"},{"body":{"id":2937,"nodeType":"Block","src":"7364:98:13","statements":[{"expression":{"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2915,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"7374:4:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2920,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"7397:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_List_$3142","typeString":"contract List"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_List_$3142","typeString":"contract List"}],"id":2919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7389:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2918,"name":"address","nodeType":"ElementaryTypeName","src":"7389:7:13","typeDescriptions":{}}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7389:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7381:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2916,"name":"address","nodeType":"ElementaryTypeName","src":"7381:8:13","stateMutability":"payable","typeDescriptions":{}}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7381:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"7374:29:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2924,"nodeType":"ExpressionStatement","src":"7374:29:13"},{"expression":{"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2925,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7413:5:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2928,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7429:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7429:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7421:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2926,"name":"address","nodeType":"ElementaryTypeName","src":"7421:8:13","stateMutability":"payable","typeDescriptions":{}}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7421:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"7413:27:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2932,"nodeType":"ExpressionStatement","src":"7413:27:13"},{"expression":{"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2933,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7450:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":2934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7454:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7450:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2936,"nodeType":"ExpressionStatement","src":"7450:5:13"}]},"id":2938,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"496d70616374204d61726b6574","id":2911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7339:15:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_77ece4977a8d689508b238dfc9194490eeb80ab58ea36aaf5bdccb7701d91964","typeString":"literal_string \\"Impact Market\\""},"value":"Impact Market"},{"hexValue":"494d504354","id":2912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7355:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_f6637e8b32520525e9cfbf76ed6c75edb0e02bf3765c594a625ac1b4da847ef3","typeString":"literal_string \\"IMPCT\\""},"value":"IMPCT"}],"id":2913,"kind":"baseConstructorSpecifier","modifierName":{"id":2910,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2139,"src":"7332:6:13"},"nodeType":"ModifierInvocation","src":"7332:31:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2909,"nodeType":"ParameterList","parameters":[],"src":"7329:2:13"},"returnParameters":{"id":2914,"nodeType":"ParameterList","parameters":[],"src":"7364:0:13"},"scope":3142,"src":"7318:144:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3008,"nodeType":"Block","src":"7570:291:13","statements":[{"assignments":[2950],"declarations":[{"constant":false,"id":2950,"mutability":"mutable","name":"check","nameLocation":"7594:5:13","nodeType":"VariableDeclaration","scope":3008,"src":"7589:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2949,"name":"bool","nodeType":"ElementaryTypeName","src":"7589:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2952,"initialValue":{"hexValue":"74727565","id":2951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7602:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"7589:17:13"},{"expression":{"arguments":[{"arguments":[{"id":2957,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7632:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2958,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7634:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7634:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2960,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"7645:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2961,"name":"_email","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"7651:6:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2962,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"7658:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2956,"name":"User","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"7627:4:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_User_$2872_storage_ptr_$","typeString":"type(struct List.User storage pointer)"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7627:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_memory_ptr","typeString":"struct List.User memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_User_$2872_memory_ptr","typeString":"struct List.User memory"}],"expression":{"id":2953,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"7616:5:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_User_$2872_storage_$dyn_storage","typeString":"struct List.User storage ref[] storage ref"}},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"7616:10:13","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_User_$2872_storage_$dyn_storage_ptr_$_t_struct$_User_$2872_storage_$returns$__$bound_to$_t_array$_t_struct$_User_$2872_storage_$dyn_storage_ptr_$","typeString":"function (struct List.User storage ref[] storage pointer,struct List.User storage ref)"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7616:49:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2965,"nodeType":"ExpressionStatement","src":"7616:49:13"},{"expression":{"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2966,"name":"uNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"7675:4:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2969,"indexExpression":{"expression":{"id":2967,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7680:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7680:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7675:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2970,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7694:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7675:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2972,"nodeType":"ExpressionStatement","src":"7675:20:13"},{"expression":{"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2973,"name":"userlist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"7705:8:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2975,"indexExpression":{"id":2974,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7714:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7705:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2976,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"7719:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7705:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2978,"nodeType":"ExpressionStatement","src":"7705:15:13"},{"expression":{"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2979,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7730:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7735:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7730:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2982,"nodeType":"ExpressionStatement","src":"7730:6:13"},{"expression":{"arguments":[{"expression":{"id":2984,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7756:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7756:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2986,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"7767:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2989,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"7775:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7769:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2987,"name":"bytes","nodeType":"ElementaryTypeName","src":"7769:5:13","typeDescriptions":{}}},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7769:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2983,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1768,1797],"referencedDeclaration":1797,"src":"7746:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7746:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2992,"nodeType":"ExpressionStatement","src":"7746:36:13"},{"expression":{"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2993,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"7792:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":2995,"indexExpression":{"id":2994,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"7799:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7792:9:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2998,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"7810:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7804:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2996,"name":"bytes","nodeType":"ElementaryTypeName","src":"7804:5:13","typeDescriptions":{}}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7804:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"7792:24:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3001,"nodeType":"ExpressionStatement","src":"7792:24:13"},{"expression":{"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3002,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"7826:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7831:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7826:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3005,"nodeType":"ExpressionStatement","src":"7826:6:13"},{"expression":{"id":3006,"name":"check","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"7849:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2948,"id":3007,"nodeType":"Return","src":"7842:12:13"}]},"functionSelector":"2629aecf","id":3009,"implemented":true,"kind":"function","modifiers":[],"name":"makeUser","nameLocation":"7476:8:13","nodeType":"FunctionDefinition","parameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2940,"mutability":"mutable","name":"_name","nameLocation":"7499:5:13","nodeType":"VariableDeclaration","scope":3009,"src":"7485:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2939,"name":"string","nodeType":"ElementaryTypeName","src":"7485:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2942,"mutability":"mutable","name":"_email","nameLocation":"7519:6:13","nodeType":"VariableDeclaration","scope":3009,"src":"7505:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2941,"name":"string","nodeType":"ElementaryTypeName","src":"7505:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2944,"mutability":"mutable","name":"_data","nameLocation":"7541:5:13","nodeType":"VariableDeclaration","scope":3009,"src":"7527:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2943,"name":"string","nodeType":"ElementaryTypeName","src":"7527:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7484:63:13"},"returnParameters":{"id":2948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3009,"src":"7565:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2946,"name":"bool","nodeType":"ElementaryTypeName","src":"7565:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7564:6:13"},"scope":3142,"src":"7467:394:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3024,"nodeType":"Block","src":"7920:49:13","statements":[{"expression":{"baseExpression":{"id":3015,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"7937:5:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_User_$2872_storage_$dyn_storage","typeString":"struct List.User storage ref[] storage ref"}},"id":3022,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3016,"name":"uNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"7943:4:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3019,"indexExpression":{"expression":{"id":3017,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7948:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7948:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7943:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7960:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7943:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7937:25:13","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_storage","typeString":"struct List.User storage ref"}},"functionReturnParameters":3014,"id":3023,"nodeType":"Return","src":"7930:32:13"}]},"functionSelector":"f61f90c1","id":3025,"implemented":true,"kind":"function","modifiers":[],"name":"readUser","nameLocation":"7875:8:13","nodeType":"FunctionDefinition","parameters":{"id":3010,"nodeType":"ParameterList","parameters":[],"src":"7883:2:13"},"returnParameters":{"id":3014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3025,"src":"7908:11:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_memory_ptr","typeString":"struct List.User"},"typeName":{"id":3012,"nodeType":"UserDefinedTypeName","pathNode":{"id":3011,"name":"User","nodeType":"IdentifierPath","referencedDeclaration":2872,"src":"7908:4:13"},"referencedDeclaration":2872,"src":"7908:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_storage_ptr","typeString":"struct List.User"}},"visibility":"internal"}],"src":"7907:13:13"},"scope":3142,"src":"7866:103:13","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3039,"nodeType":"Block","src":"8042:43:13","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3034,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"8066:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":3036,"indexExpression":{"id":3035,"name":"_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"8073:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8066:11:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":3033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8059:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3032,"name":"string","nodeType":"ElementaryTypeName","src":"8059:6:13","typeDescriptions":{}}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8059:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}},"functionReturnParameters":3031,"id":3038,"nodeType":"Return","src":"8052:26:13"}]},"functionSelector":"a9320688","id":3040,"implemented":true,"kind":"function","modifiers":[],"name":"readToken","nameLocation":"7983:9:13","nodeType":"FunctionDefinition","parameters":{"id":3028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3027,"mutability":"mutable","name":"_id","nameLocation":"8001:3:13","nodeType":"VariableDeclaration","scope":3040,"src":"7993:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3026,"name":"uint256","nodeType":"ElementaryTypeName","src":"7993:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7992:13:13"},"returnParameters":{"id":3031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3040,"src":"8028:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3029,"name":"string","nodeType":"ElementaryTypeName","src":"8028:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8027:15:13"},"scope":3142,"src":"7974:111:13","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3092,"nodeType":"Block","src":"8138:245:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3046,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"8165:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"8165:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"},"id":3052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8178:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"},"id":3051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8180:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3135","id":3050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8184:2:13","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"src":"8180:6:13","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"}},"src":"8178:8:13","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"}},"src":"8165:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f7420656e6f75676820776569","id":3054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8188:16:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970","typeString":"literal_string \\"not enough wei\\""},"value":"not enough wei"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970","typeString":"literal_string \\"not enough wei\\""}],"id":3045,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"8157:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8157:48:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3056,"nodeType":"ExpressionStatement","src":"8157:48:13"},{"expression":{"arguments":[{"expression":{"id":3058,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"8225:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8225:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3060,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8236:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"6920646f6e61746564","id":3063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8244:11:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_759f350849f822676287bd7d4ec9afa4a4336d5e3dda376413ba153e887f1435","typeString":"literal_string \\"i donated\\""},"value":"i donated"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_759f350849f822676287bd7d4ec9afa4a4336d5e3dda376413ba153e887f1435","typeString":"literal_string \\"i donated\\""}],"id":3062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8238:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3061,"name":"bytes","nodeType":"ElementaryTypeName","src":"8238:5:13","typeDescriptions":{}}},"id":3064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8238:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3057,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1768,1797],"referencedDeclaration":1797,"src":"8215:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8215:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3066,"nodeType":"ExpressionStatement","src":"8215:42:13"},{"expression":{"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3067,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"8267:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":3069,"indexExpression":{"id":3068,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8274:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8267:9:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"6920646f6e61746564","id":3072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8285:11:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_759f350849f822676287bd7d4ec9afa4a4336d5e3dda376413ba153e887f1435","typeString":"literal_string \\"i donated\\""},"value":"i donated"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_759f350849f822676287bd7d4ec9afa4a4336d5e3dda376413ba153e887f1435","typeString":"literal_string \\"i donated\\""}],"id":3071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8279:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3070,"name":"bytes","nodeType":"ElementaryTypeName","src":"8279:5:13","typeDescriptions":{}}},"id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8279:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"8267:30:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3075,"nodeType":"ExpressionStatement","src":"8267:30:13"},{"expression":{"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3076,"name":"donations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"8307:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3078,"indexExpression":{"id":3077,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"8317:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8307:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3079,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8322:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8307:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3081,"nodeType":"ExpressionStatement","src":"8307:16:13"},{"expression":{"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3082,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"8333:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8338:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8333:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3085,"nodeType":"ExpressionStatement","src":"8333:6:13"},{"expression":{"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3086,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8349:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8354:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8349:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3089,"nodeType":"ExpressionStatement","src":"8349:6:13"},{"expression":{"hexValue":"74727565","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8372:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3044,"id":3091,"nodeType":"Return","src":"8365:11:13"}]},"functionSelector":"ed88c68e","id":3093,"implemented":true,"kind":"function","modifiers":[],"name":"donate","nameLocation":"8099:6:13","nodeType":"FunctionDefinition","parameters":{"id":3041,"nodeType":"ParameterList","parameters":[],"src":"8105:2:13"},"returnParameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3093,"src":"8133:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3042,"name":"bool","nodeType":"ElementaryTypeName","src":"8133:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8132:6:13"},"scope":3142,"src":"8090:293:13","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3136,"nodeType":"Block","src":"8462:158:13","statements":[{"expression":{"arguments":[{"id":3103,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"8482:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3104,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8485:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3107,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"8493:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8487:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3105,"name":"bytes","nodeType":"ElementaryTypeName","src":"8487:5:13","typeDescriptions":{}}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8487:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3102,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1768,1797],"referencedDeclaration":1797,"src":"8472:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8472:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3110,"nodeType":"ExpressionStatement","src":"8472:28:13"},{"expression":{"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3111,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"8510:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":3113,"indexExpression":{"id":3112,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8517:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8510:9:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3116,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"8528:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8522:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3114,"name":"bytes","nodeType":"ElementaryTypeName","src":"8522:5:13","typeDescriptions":{}}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8522:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"8510:24:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3119,"nodeType":"ExpressionStatement","src":"8510:24:13"},{"expression":{"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3120,"name":"nftletter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"8544:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3122,"indexExpression":{"id":3121,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"8554:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8544:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3123,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8559:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8544:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3125,"nodeType":"ExpressionStatement","src":"8544:16:13"},{"expression":{"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3126,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"8570:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8575:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8570:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3129,"nodeType":"ExpressionStatement","src":"8570:6:13"},{"expression":{"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3130,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8586:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8591:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8586:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3133,"nodeType":"ExpressionStatement","src":"8586:6:13"},{"expression":{"hexValue":"74727565","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8609:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3101,"id":3135,"nodeType":"Return","src":"8602:11:13"}]},"functionSelector":"9cb87798","id":3137,"implemented":true,"kind":"function","modifiers":[],"name":"nftLetter","nameLocation":"8397:9:13","nodeType":"FunctionDefinition","parameters":{"id":3098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3095,"mutability":"mutable","name":"_a","nameLocation":"8415:2:13","nodeType":"VariableDeclaration","scope":3137,"src":"8407:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3094,"name":"address","nodeType":"ElementaryTypeName","src":"8407:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3097,"mutability":"mutable","name":"_data","nameLocation":"8433:5:13","nodeType":"VariableDeclaration","scope":3137,"src":"8419:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3096,"name":"string","nodeType":"ElementaryTypeName","src":"8419:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8406:33:13"},"returnParameters":{"id":3101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3100,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3137,"src":"8457:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3099,"name":"bool","nodeType":"ElementaryTypeName","src":"8457:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8456:6:13"},"scope":3142,"src":"8388:232:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3140,"nodeType":"Block","src":"8651:8:13","statements":[]},"id":3141,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3138,"nodeType":"ParameterList","parameters":[],"src":"8634:2:13"},"returnParameters":{"id":3139,"nodeType":"ParameterList","parameters":[],"src":"8651:0:13"},"scope":3142,"src":"8626:33:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3143,"src":"6716:1945:13","usedErrors":[]}],"src":"6634:2027:13"},"legacyAST":{"absolutePath":"project:/contracts/List.sol","exportedSymbols":{"Address":[2595],"Context":[2617],"ERC165":[2844],"ERC721":[2139],"IERC165":[2856],"IERC721":[2255],"IERC721Metadata":[2300],"IERC721Receiver":[2273],"List":[3142],"Strings":[2820]},"id":3143,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":2858,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"6634:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":2859,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3143,"sourceUnit":2140,"src":"6658:57:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2860,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2139,"src":"6733:6:13"},"id":2861,"nodeType":"InheritanceSpecifier","src":"6733:6:13"}],"canonicalName":"List","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3142,"linearizedBaseContracts":[3142,2139,2300,2255,2844,2856,2617],"name":"List","nameLocation":"6725:4:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"List.User","id":2872,"members":[{"constant":false,"id":2863,"mutability":"mutable","name":"id","nameLocation":"6776:2:13","nodeType":"VariableDeclaration","scope":2872,"src":"6768:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2862,"name":"uint256","nodeType":"ElementaryTypeName","src":"6768:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"userAdr","nameLocation":"6796:7:13","nodeType":"VariableDeclaration","scope":2872,"src":"6788:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2864,"name":"address","nodeType":"ElementaryTypeName","src":"6788:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2867,"mutability":"mutable","name":"name","nameLocation":"6820:4:13","nodeType":"VariableDeclaration","scope":2872,"src":"6813:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2866,"name":"string","nodeType":"ElementaryTypeName","src":"6813:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2869,"mutability":"mutable","name":"email","nameLocation":"6841:5:13","nodeType":"VariableDeclaration","scope":2872,"src":"6834:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2868,"name":"string","nodeType":"ElementaryTypeName","src":"6834:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"data","nameLocation":"6863:4:13","nodeType":"VariableDeclaration","scope":2872,"src":"6856:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2870,"name":"string","nodeType":"ElementaryTypeName","src":"6856:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"User","nameLocation":"6753:4:13","nodeType":"StructDefinition","scope":3142,"src":"6746:128:13","visibility":"public"},{"constant":false,"id":2874,"mutability":"mutable","name":"u","nameLocation":"6896:1:13","nodeType":"VariableDeclaration","scope":3142,"src":"6879:18:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2873,"name":"uint256","nodeType":"ElementaryTypeName","src":"6879:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2876,"mutability":"mutable","name":"d","nameLocation":"6920:1:13","nodeType":"VariableDeclaration","scope":3142,"src":"6903:18:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2875,"name":"uint256","nodeType":"ElementaryTypeName","src":"6903:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"functionSelector":"92d0d153","id":2878,"mutability":"mutable","name":"t","nameLocation":"6942:1:13","nodeType":"VariableDeclaration","scope":3142,"src":"6927:16:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2877,"name":"uint256","nodeType":"ElementaryTypeName","src":"6927:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":2880,"mutability":"mutable","name":"n","nameLocation":"6966:1:13","nodeType":"VariableDeclaration","scope":3142,"src":"6949:18:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2879,"name":"uint256","nodeType":"ElementaryTypeName","src":"6949:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2884,"mutability":"mutable","name":"users","nameLocation":"6994:5:13","nodeType":"VariableDeclaration","scope":3142,"src":"6978:21:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_User_$2872_storage_$dyn_storage","typeString":"struct List.User[]"},"typeName":{"baseType":{"id":2882,"nodeType":"UserDefinedTypeName","pathNode":{"id":2881,"name":"User","nodeType":"IdentifierPath","referencedDeclaration":2872,"src":"6978:4:13"},"referencedDeclaration":2872,"src":"6978:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_storage_ptr","typeString":"struct List.User"}},"id":2883,"nodeType":"ArrayTypeName","src":"6978:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_User_$2872_storage_$dyn_storage_ptr","typeString":"struct List.User[]"}},"visibility":"internal"},{"constant":false,"id":2888,"mutability":"mutable","name":"uNum","nameLocation":"7042:4:13","nodeType":"VariableDeclaration","scope":3142,"src":"7005:41:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2887,"keyType":{"id":2885,"name":"address","nodeType":"ElementaryTypeName","src":"7013:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"7005:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2886,"name":"uint256","nodeType":"ElementaryTypeName","src":"7024:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2890,"mutability":"mutable","name":"safe","nameLocation":"7077:4:13","nodeType":"VariableDeclaration","scope":3142,"src":"7052:29:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2889,"name":"address","nodeType":"ElementaryTypeName","src":"7052:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2892,"mutability":"mutable","name":"owner","nameLocation":"7112:5:13","nodeType":"VariableDeclaration","scope":3142,"src":"7087:30:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2891,"name":"address","nodeType":"ElementaryTypeName","src":"7087:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"functionSelector":"d8e136e2","id":2896,"mutability":"mutable","name":"userlist","nameLocation":"7158:8:13","nodeType":"VariableDeclaration","scope":3142,"src":"7123:43:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2895,"keyType":{"id":2893,"name":"uint256","nodeType":"ElementaryTypeName","src":"7131:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"7123:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2894,"name":"uint256","nodeType":"ElementaryTypeName","src":"7142:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"f8626af8","id":2900,"mutability":"mutable","name":"donations","nameLocation":"7208:9:13","nodeType":"VariableDeclaration","scope":3142,"src":"7173:44:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2899,"keyType":{"id":2897,"name":"uint256","nodeType":"ElementaryTypeName","src":"7181:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"7173:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2898,"name":"uint256","nodeType":"ElementaryTypeName","src":"7192:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"8ef61264","id":2904,"mutability":"mutable","name":"nftletter","nameLocation":"7258:9:13","nodeType":"VariableDeclaration","scope":3142,"src":"7223:44:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2903,"keyType":{"id":2901,"name":"uint256","nodeType":"ElementaryTypeName","src":"7231:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"7223:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2902,"name":"uint256","nodeType":"ElementaryTypeName","src":"7242:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"4f64b2be","id":2908,"mutability":"mutable","name":"tokens","nameLocation":"7306:6:13","nodeType":"VariableDeclaration","scope":3142,"src":"7273:39:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes)"},"typeName":{"id":2907,"keyType":{"id":2905,"name":"uint256","nodeType":"ElementaryTypeName","src":"7281:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"7273:25:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes)"},"valueType":{"id":2906,"name":"bytes","nodeType":"ElementaryTypeName","src":"7292:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"public"},{"body":{"id":2937,"nodeType":"Block","src":"7364:98:13","statements":[{"expression":{"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2915,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"7374:4:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2920,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"7397:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_List_$3142","typeString":"contract List"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_List_$3142","typeString":"contract List"}],"id":2919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7389:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2918,"name":"address","nodeType":"ElementaryTypeName","src":"7389:7:13","typeDescriptions":{}}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7389:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7381:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2916,"name":"address","nodeType":"ElementaryTypeName","src":"7381:8:13","stateMutability":"payable","typeDescriptions":{}}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7381:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"7374:29:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2924,"nodeType":"ExpressionStatement","src":"7374:29:13"},{"expression":{"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2925,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7413:5:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2928,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7429:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7429:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7421:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2926,"name":"address","nodeType":"ElementaryTypeName","src":"7421:8:13","stateMutability":"payable","typeDescriptions":{}}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7421:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"7413:27:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2932,"nodeType":"ExpressionStatement","src":"7413:27:13"},{"expression":{"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2933,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7450:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":2934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7454:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7450:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2936,"nodeType":"ExpressionStatement","src":"7450:5:13"}]},"id":2938,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"496d70616374204d61726b6574","id":2911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7339:15:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_77ece4977a8d689508b238dfc9194490eeb80ab58ea36aaf5bdccb7701d91964","typeString":"literal_string \\"Impact Market\\""},"value":"Impact Market"},{"hexValue":"494d504354","id":2912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7355:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_f6637e8b32520525e9cfbf76ed6c75edb0e02bf3765c594a625ac1b4da847ef3","typeString":"literal_string \\"IMPCT\\""},"value":"IMPCT"}],"id":2913,"kind":"baseConstructorSpecifier","modifierName":{"id":2910,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2139,"src":"7332:6:13"},"nodeType":"ModifierInvocation","src":"7332:31:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2909,"nodeType":"ParameterList","parameters":[],"src":"7329:2:13"},"returnParameters":{"id":2914,"nodeType":"ParameterList","parameters":[],"src":"7364:0:13"},"scope":3142,"src":"7318:144:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3008,"nodeType":"Block","src":"7570:291:13","statements":[{"assignments":[2950],"declarations":[{"constant":false,"id":2950,"mutability":"mutable","name":"check","nameLocation":"7594:5:13","nodeType":"VariableDeclaration","scope":3008,"src":"7589:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2949,"name":"bool","nodeType":"ElementaryTypeName","src":"7589:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2952,"initialValue":{"hexValue":"74727565","id":2951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7602:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"7589:17:13"},{"expression":{"arguments":[{"arguments":[{"id":2957,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7632:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2958,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7634:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7634:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2960,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"7645:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2961,"name":"_email","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"7651:6:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2962,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"7658:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2956,"name":"User","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"7627:4:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_User_$2872_storage_ptr_$","typeString":"type(struct List.User storage pointer)"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7627:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_memory_ptr","typeString":"struct List.User memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_User_$2872_memory_ptr","typeString":"struct List.User memory"}],"expression":{"id":2953,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"7616:5:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_User_$2872_storage_$dyn_storage","typeString":"struct List.User storage ref[] storage ref"}},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"7616:10:13","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_User_$2872_storage_$dyn_storage_ptr_$_t_struct$_User_$2872_storage_$returns$__$bound_to$_t_array$_t_struct$_User_$2872_storage_$dyn_storage_ptr_$","typeString":"function (struct List.User storage ref[] storage pointer,struct List.User storage ref)"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7616:49:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2965,"nodeType":"ExpressionStatement","src":"7616:49:13"},{"expression":{"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2966,"name":"uNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"7675:4:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2969,"indexExpression":{"expression":{"id":2967,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7680:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7680:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7675:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2970,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7694:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7675:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2972,"nodeType":"ExpressionStatement","src":"7675:20:13"},{"expression":{"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2973,"name":"userlist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"7705:8:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2975,"indexExpression":{"id":2974,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7714:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7705:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2976,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"7719:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7705:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2978,"nodeType":"ExpressionStatement","src":"7705:15:13"},{"expression":{"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2979,"name":"u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"7730:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7735:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7730:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2982,"nodeType":"ExpressionStatement","src":"7730:6:13"},{"expression":{"arguments":[{"expression":{"id":2984,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7756:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7756:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2986,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"7767:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2989,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"7775:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7769:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2987,"name":"bytes","nodeType":"ElementaryTypeName","src":"7769:5:13","typeDescriptions":{}}},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7769:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2983,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1768,1797],"referencedDeclaration":1797,"src":"7746:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7746:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2992,"nodeType":"ExpressionStatement","src":"7746:36:13"},{"expression":{"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2993,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"7792:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":2995,"indexExpression":{"id":2994,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"7799:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7792:9:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2998,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"7810:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7804:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2996,"name":"bytes","nodeType":"ElementaryTypeName","src":"7804:5:13","typeDescriptions":{}}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7804:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"7792:24:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3001,"nodeType":"ExpressionStatement","src":"7792:24:13"},{"expression":{"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3002,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"7826:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7831:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7826:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3005,"nodeType":"ExpressionStatement","src":"7826:6:13"},{"expression":{"id":3006,"name":"check","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"7849:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2948,"id":3007,"nodeType":"Return","src":"7842:12:13"}]},"functionSelector":"2629aecf","id":3009,"implemented":true,"kind":"function","modifiers":[],"name":"makeUser","nameLocation":"7476:8:13","nodeType":"FunctionDefinition","parameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2940,"mutability":"mutable","name":"_name","nameLocation":"7499:5:13","nodeType":"VariableDeclaration","scope":3009,"src":"7485:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2939,"name":"string","nodeType":"ElementaryTypeName","src":"7485:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2942,"mutability":"mutable","name":"_email","nameLocation":"7519:6:13","nodeType":"VariableDeclaration","scope":3009,"src":"7505:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2941,"name":"string","nodeType":"ElementaryTypeName","src":"7505:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2944,"mutability":"mutable","name":"_data","nameLocation":"7541:5:13","nodeType":"VariableDeclaration","scope":3009,"src":"7527:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2943,"name":"string","nodeType":"ElementaryTypeName","src":"7527:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7484:63:13"},"returnParameters":{"id":2948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3009,"src":"7565:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2946,"name":"bool","nodeType":"ElementaryTypeName","src":"7565:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7564:6:13"},"scope":3142,"src":"7467:394:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3024,"nodeType":"Block","src":"7920:49:13","statements":[{"expression":{"baseExpression":{"id":3015,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"7937:5:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_User_$2872_storage_$dyn_storage","typeString":"struct List.User storage ref[] storage ref"}},"id":3022,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3016,"name":"uNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"7943:4:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3019,"indexExpression":{"expression":{"id":3017,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7948:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7948:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7943:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7960:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7943:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7937:25:13","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_storage","typeString":"struct List.User storage ref"}},"functionReturnParameters":3014,"id":3023,"nodeType":"Return","src":"7930:32:13"}]},"functionSelector":"f61f90c1","id":3025,"implemented":true,"kind":"function","modifiers":[],"name":"readUser","nameLocation":"7875:8:13","nodeType":"FunctionDefinition","parameters":{"id":3010,"nodeType":"ParameterList","parameters":[],"src":"7883:2:13"},"returnParameters":{"id":3014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3025,"src":"7908:11:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_memory_ptr","typeString":"struct List.User"},"typeName":{"id":3012,"nodeType":"UserDefinedTypeName","pathNode":{"id":3011,"name":"User","nodeType":"IdentifierPath","referencedDeclaration":2872,"src":"7908:4:13"},"referencedDeclaration":2872,"src":"7908:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2872_storage_ptr","typeString":"struct List.User"}},"visibility":"internal"}],"src":"7907:13:13"},"scope":3142,"src":"7866:103:13","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3039,"nodeType":"Block","src":"8042:43:13","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3034,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"8066:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":3036,"indexExpression":{"id":3035,"name":"_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"8073:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8066:11:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":3033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8059:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3032,"name":"string","nodeType":"ElementaryTypeName","src":"8059:6:13","typeDescriptions":{}}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8059:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}},"functionReturnParameters":3031,"id":3038,"nodeType":"Return","src":"8052:26:13"}]},"functionSelector":"a9320688","id":3040,"implemented":true,"kind":"function","modifiers":[],"name":"readToken","nameLocation":"7983:9:13","nodeType":"FunctionDefinition","parameters":{"id":3028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3027,"mutability":"mutable","name":"_id","nameLocation":"8001:3:13","nodeType":"VariableDeclaration","scope":3040,"src":"7993:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3026,"name":"uint256","nodeType":"ElementaryTypeName","src":"7993:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7992:13:13"},"returnParameters":{"id":3031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3040,"src":"8028:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3029,"name":"string","nodeType":"ElementaryTypeName","src":"8028:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8027:15:13"},"scope":3142,"src":"7974:111:13","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3092,"nodeType":"Block","src":"8138:245:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3046,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"8165:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"8165:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"},"id":3052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8178:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"},"id":3051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8180:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3135","id":3050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8184:2:13","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"src":"8180:6:13","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"}},"src":"8178:8:13","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"}},"src":"8165:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f7420656e6f75676820776569","id":3054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8188:16:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970","typeString":"literal_string \\"not enough wei\\""},"value":"not enough wei"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1f339e1fbc7dedb9137fd15875e8ad10e73e5a5be0cea74c4edeb0cbe55e4970","typeString":"literal_string \\"not enough wei\\""}],"id":3045,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"8157:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8157:48:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3056,"nodeType":"ExpressionStatement","src":"8157:48:13"},{"expression":{"arguments":[{"expression":{"id":3058,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"8225:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8225:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3060,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8236:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"6920646f6e61746564","id":3063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8244:11:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_759f350849f822676287bd7d4ec9afa4a4336d5e3dda376413ba153e887f1435","typeString":"literal_string \\"i donated\\""},"value":"i donated"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_759f350849f822676287bd7d4ec9afa4a4336d5e3dda376413ba153e887f1435","typeString":"literal_string \\"i donated\\""}],"id":3062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8238:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3061,"name":"bytes","nodeType":"ElementaryTypeName","src":"8238:5:13","typeDescriptions":{}}},"id":3064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8238:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3057,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1768,1797],"referencedDeclaration":1797,"src":"8215:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8215:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3066,"nodeType":"ExpressionStatement","src":"8215:42:13"},{"expression":{"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3067,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"8267:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":3069,"indexExpression":{"id":3068,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8274:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8267:9:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"6920646f6e61746564","id":3072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8285:11:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_759f350849f822676287bd7d4ec9afa4a4336d5e3dda376413ba153e887f1435","typeString":"literal_string \\"i donated\\""},"value":"i donated"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_759f350849f822676287bd7d4ec9afa4a4336d5e3dda376413ba153e887f1435","typeString":"literal_string \\"i donated\\""}],"id":3071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8279:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3070,"name":"bytes","nodeType":"ElementaryTypeName","src":"8279:5:13","typeDescriptions":{}}},"id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8279:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"8267:30:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3075,"nodeType":"ExpressionStatement","src":"8267:30:13"},{"expression":{"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3076,"name":"donations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"8307:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3078,"indexExpression":{"id":3077,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"8317:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8307:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3079,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8322:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8307:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3081,"nodeType":"ExpressionStatement","src":"8307:16:13"},{"expression":{"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3082,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"8333:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8338:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8333:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3085,"nodeType":"ExpressionStatement","src":"8333:6:13"},{"expression":{"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3086,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8349:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8354:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8349:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3089,"nodeType":"ExpressionStatement","src":"8349:6:13"},{"expression":{"hexValue":"74727565","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8372:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3044,"id":3091,"nodeType":"Return","src":"8365:11:13"}]},"functionSelector":"ed88c68e","id":3093,"implemented":true,"kind":"function","modifiers":[],"name":"donate","nameLocation":"8099:6:13","nodeType":"FunctionDefinition","parameters":{"id":3041,"nodeType":"ParameterList","parameters":[],"src":"8105:2:13"},"returnParameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3093,"src":"8133:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3042,"name":"bool","nodeType":"ElementaryTypeName","src":"8133:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8132:6:13"},"scope":3142,"src":"8090:293:13","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3136,"nodeType":"Block","src":"8462:158:13","statements":[{"expression":{"arguments":[{"id":3103,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"8482:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3104,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8485:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3107,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"8493:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8487:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3105,"name":"bytes","nodeType":"ElementaryTypeName","src":"8487:5:13","typeDescriptions":{}}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8487:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3102,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1768,1797],"referencedDeclaration":1797,"src":"8472:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8472:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3110,"nodeType":"ExpressionStatement","src":"8472:28:13"},{"expression":{"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3111,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"8510:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes_storage_$","typeString":"mapping(uint256 => bytes storage ref)"}},"id":3113,"indexExpression":{"id":3112,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8517:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8510:9:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3116,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"8528:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8522:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3114,"name":"bytes","nodeType":"ElementaryTypeName","src":"8522:5:13","typeDescriptions":{}}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8522:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"8510:24:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3119,"nodeType":"ExpressionStatement","src":"8510:24:13"},{"expression":{"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3120,"name":"nftletter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"8544:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3122,"indexExpression":{"id":3121,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"8554:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8544:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3123,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8559:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8544:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3125,"nodeType":"ExpressionStatement","src":"8544:16:13"},{"expression":{"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3126,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"8570:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8575:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8570:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3129,"nodeType":"ExpressionStatement","src":"8570:6:13"},{"expression":{"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3130,"name":"t","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"8586:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8591:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8586:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3133,"nodeType":"ExpressionStatement","src":"8586:6:13"},{"expression":{"hexValue":"74727565","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8609:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3101,"id":3135,"nodeType":"Return","src":"8602:11:13"}]},"functionSelector":"9cb87798","id":3137,"implemented":true,"kind":"function","modifiers":[],"name":"nftLetter","nameLocation":"8397:9:13","nodeType":"FunctionDefinition","parameters":{"id":3098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3095,"mutability":"mutable","name":"_a","nameLocation":"8415:2:13","nodeType":"VariableDeclaration","scope":3137,"src":"8407:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3094,"name":"address","nodeType":"ElementaryTypeName","src":"8407:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3097,"mutability":"mutable","name":"_data","nameLocation":"8433:5:13","nodeType":"VariableDeclaration","scope":3137,"src":"8419:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3096,"name":"string","nodeType":"ElementaryTypeName","src":"8419:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8406:33:13"},"returnParameters":{"id":3101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3100,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3137,"src":"8457:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3099,"name":"bool","nodeType":"ElementaryTypeName","src":"8457:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8456:6:13"},"scope":3142,"src":"8388:232:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3140,"nodeType":"Block","src":"8651:8:13","statements":[]},"id":3141,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3138,"nodeType":"ParameterList","parameters":[],"src":"8634:2:13"},"returnParameters":{"id":3139,"nodeType":"ParameterList","parameters":[],"src":"8651:0:13"},"scope":3142,"src":"8626:33:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3143,"src":"6716:1945:13","usedErrors":[]}],"src":"6634:2027:13"},"compiler":{"name":"solc","version":"0.8.13+commit.abaa5c0e.Emscripten.clang"},"networks":{"80001":{"events":{},"links":{},"address":"0x539B41e1F053ad7BCB17D7790f49dfADFc55a66F","transactionHash":"0x56e1c7040259b103c7f1909b1803d99363787df895fdb84f68f34abace602225"}},"schemaVersion":"3.4.4","updatedAt":"2022-03-31T12:45:15.899Z","networkType":"ethereum","devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}}')}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={id:e,loaded:!1,exports:{}};return __webpack_modules__[e].call(n.exports,n,n.exports,__webpack_require__),n.loaded=!0,n.exports}__webpack_require__.amdO={},__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var __webpack_exports__={};(()=>{"use strict";let e=!1,t=!1;const n={debug:1,default:2,info:2,warning:3,error:4,off:5};let r=n.default,i=null;const a=function(){try{const e=[];if(["NFD","NFC","NFKD","NFKC"].forEach((t=>{try{if("test"!=="test".normalize(t))throw new Error("bad normalize")}catch(n){e.push(t)}})),e.length)throw new Error("missing "+e.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(e){return e.message}return null}();var s,o;!function(e){e.DEBUG="DEBUG",e.INFO="INFO",e.WARNING="WARNING",e.ERROR="ERROR",e.OFF="OFF"}(s||(s={})),function(e){e.UNKNOWN_ERROR="UNKNOWN_ERROR",e.NOT_IMPLEMENTED="NOT_IMPLEMENTED",e.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",e.NETWORK_ERROR="NETWORK_ERROR",e.SERVER_ERROR="SERVER_ERROR",e.TIMEOUT="TIMEOUT",e.BUFFER_OVERRUN="BUFFER_OVERRUN",e.NUMERIC_FAULT="NUMERIC_FAULT",e.MISSING_NEW="MISSING_NEW",e.INVALID_ARGUMENT="INVALID_ARGUMENT",e.MISSING_ARGUMENT="MISSING_ARGUMENT",e.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",e.CALL_EXCEPTION="CALL_EXCEPTION",e.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",e.NONCE_EXPIRED="NONCE_EXPIRED",e.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",e.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",e.TRANSACTION_REPLACED="TRANSACTION_REPLACED"}(o||(o={}));const f="0123456789abcdef";class d{constructor(e){Object.defineProperty(this,"version",{enumerable:!0,value:e,writable:!1})}_log(e,t){const i=e.toLowerCase();null==n[i]&&this.throwArgumentError("invalid log level name","logLevel",e),r>n[i]||console.log.apply(console,t)}debug(...e){this._log(d.levels.DEBUG,e)}info(...e){this._log(d.levels.INFO,e)}warn(...e){this._log(d.levels.WARNING,e)}makeError(e,n,r){if(t)return this.makeError("censored error",n,{});n||(n=d.errors.UNKNOWN_ERROR),r||(r={});const i=[];Object.keys(r).forEach((e=>{const t=r[e];try{if(t instanceof Uint8Array){let n="";for(let e=0;e<t.length;e++)n+=f[t[e]>>4],n+=f[15&t[e]];i.push(e+"=Uint8Array(0x"+n+")")}else i.push(e+"="+JSON.stringify(t))}catch(t){i.push(e+"="+JSON.stringify(r[e].toString()))}})),i.push(`code=${n}`),i.push(`version=${this.version}`);const a=e;let s="";switch(n){case o.NUMERIC_FAULT:{s="NUMERIC_FAULT";const t=e;switch(t){case"overflow":case"underflow":case"division-by-zero":s+="-"+t;break;case"negative-power":case"negative-width":s+="-unsupported";break;case"unbound-bitwise-result":s+="-unbound-result"}break}case o.CALL_EXCEPTION:case o.INSUFFICIENT_FUNDS:case o.MISSING_NEW:case o.NONCE_EXPIRED:case o.REPLACEMENT_UNDERPRICED:case o.TRANSACTION_REPLACED:case o.UNPREDICTABLE_GAS_LIMIT:s=n}s&&(e+=" [ See: https://links.ethers.org/v5-errors-"+s+" ]"),i.length&&(e+=" ("+i.join(", ")+")");const l=new Error(e);return l.reason=a,l.code=n,Object.keys(r).forEach((function(e){l[e]=r[e]})),l}throwError(e,t,n){throw this.makeError(e,t,n)}throwArgumentError(e,t,n){return this.throwError(e,d.errors.INVALID_ARGUMENT,{argument:t,value:n})}assert(e,t,n,r){e||this.throwError(t,n,r)}assertArgument(e,t,n,r){e||this.throwArgumentError(t,n,r)}checkNormalize(e){null==e&&(e="platform missing String.prototype.normalize"),a&&this.throwError("platform missing String.prototype.normalize",d.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:a})}checkSafeUint53(e,t){"number"==typeof e&&(null==t&&(t="value not safe"),(e<0||e>=9007199254740991)&&this.throwError(t,d.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:e}),e%1&&this.throwError(t,d.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:e}))}checkArgumentCount(e,t,n){n=n?": "+n:"",e<t&&this.throwError("missing argument"+n,d.errors.MISSING_ARGUMENT,{count:e,expectedCount:t}),e>t&&this.throwError("too many arguments"+n,d.errors.UNEXPECTED_ARGUMENT,{count:e,expectedCount:t})}checkNew(e,t){e!==Object&&null!=e||this.throwError("missing new",d.errors.MISSING_NEW,{name:t.name})}checkAbstract(e,t){e===t?this.throwError("cannot instantiate abstract class "+JSON.stringify(t.name)+" directly; use a sub-class",d.errors.UNSUPPORTED_OPERATION,{name:e.name,operation:"new"}):e!==Object&&null!=e||this.throwError("missing new",d.errors.MISSING_NEW,{name:t.name})}static globalLogger(){return i||(i=new d("logger/5.6.0")),i}static setCensorship(n,r){if(!n&&r&&this.globalLogger().throwError("cannot permanently disable censorship",d.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),e){if(!n)return;this.globalLogger().throwError("error censorship permanent",d.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}t=!!n,e=!!r}static setLogLevel(e){const t=n[e.toLowerCase()];null!=t?r=t:d.globalLogger().warn("invalid log level - "+e)}static from(e){return new d(e)}}d.errors=o,d.levels=s;const l=new d("bytes/5.6.0");function c(e){return!!e.toHexString}function u(e){return e.slice||(e.slice=function(){const t=Array.prototype.slice.call(arguments);return u(new Uint8Array(Array.prototype.slice.apply(e,t)))}),e}function p(e){return _(e)&&!(e.length%2)||y(e)}function m(e){return"number"==typeof e&&e==e&&e%1==0}function y(e){if(null==e)return!1;if(e.constructor===Uint8Array)return!0;if("string"==typeof e)return!1;if(!m(e.length)||e.length<0)return!1;for(let t=0;t<e.length;t++){const n=e[t];if(!m(n)||n<0||n>=256)return!1}return!0}function h(e,t){if(t||(t={}),"number"==typeof e){l.checkSafeUint53(e,"invalid arrayify value");const t=[];for(;e;)t.unshift(255&e),e=parseInt(String(e/256));return 0===t.length&&t.push(0),u(new Uint8Array(t))}if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),c(e)&&(e=e.toHexString()),_(e)){let n=e.substring(2);n.length%2&&("left"===t.hexPad?n="0x0"+n.substring(2):"right"===t.hexPad?n+="0":l.throwArgumentError("hex data is odd-length","value",e));const r=[];for(let e=0;e<n.length;e+=2)r.push(parseInt(n.substring(e,e+2),16));return u(new Uint8Array(r))}return y(e)?u(new Uint8Array(e)):l.throwArgumentError("invalid arrayify value","value",e)}function b(e){const t=e.map((e=>h(e))),n=t.reduce(((e,t)=>e+t.length),0),r=new Uint8Array(n);return t.reduce(((e,t)=>(r.set(t,e),e+t.length)),0),u(r)}function g(e){let t=h(e);if(0===t.length)return t;let n=0;for(;n<t.length&&0===t[n];)n++;return n&&(t=t.slice(n)),t}function _(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/)||t&&e.length!==2+2*t)}const T="0123456789abcdef";function v(e,t){if(t||(t={}),"number"==typeof e){l.checkSafeUint53(e,"invalid hexlify value");let t="";for(;e;)t=T[15&e]+t,e=Math.floor(e/16);return t.length?(t.length%2&&(t="0"+t),"0x"+t):"0x00"}if("bigint"==typeof e)return(e=e.toString(16)).length%2?"0x0"+e:"0x"+e;if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),c(e))return e.toHexString();if(_(e))return e.length%2&&("left"===t.hexPad?e="0x0"+e.substring(2):"right"===t.hexPad?e+="0":l.throwArgumentError("hex data is odd-length","value",e)),e.toLowerCase();if(y(e)){let t="0x";for(let n=0;n<e.length;n++){let r=e[n];t+=T[(240&r)>>4]+T[15&r]}return t}return l.throwArgumentError("invalid hexlify value","value",e)}function w(e){if("string"!=typeof e)e=v(e);else if(!_(e)||e.length%2)return null;return(e.length-2)/2}function Y(e,t,n){return"string"!=typeof e?e=v(e):(!_(e)||e.length%2)&&l.throwArgumentError("invalid hexData","value",e),t=2+2*t,null!=n?"0x"+e.substring(t,2+2*n):"0x"+e.substring(t)}function A(e){let t="0x";return e.forEach((e=>{t+=v(e).substring(2)})),t}function I(e){const t=function(e){"string"!=typeof e&&(e=v(e)),_(e)||l.throwArgumentError("invalid hex string","value",e),e=e.substring(2);let t=0;for(;t<e.length&&"0"===e[t];)t++;return"0x"+e.substring(t)}(v(e,{hexPad:"left"}));return"0x"===t?"0x0":t}function C(e,t){for("string"!=typeof e?e=v(e):_(e)||l.throwArgumentError("invalid hex string","value",e),e.length>2*t+2&&l.throwArgumentError("value out of range","value",arguments[1]);e.length<2*t+2;)e="0x0"+e.substring(2);return e}function E(e){const t={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0,yParityAndS:"0x",compact:"0x"};if(p(e)){let n=h(e);64===n.length?(t.v=27+(n[32]>>7),n[32]&=127,t.r=v(n.slice(0,32)),t.s=v(n.slice(32,64))):65===n.length?(t.r=v(n.slice(0,32)),t.s=v(n.slice(32,64)),t.v=n[64]):l.throwArgumentError("invalid signature string","signature",e),t.v<27&&(0===t.v||1===t.v?t.v+=27:l.throwArgumentError("signature invalid v byte","signature",e)),t.recoveryParam=1-t.v%2,t.recoveryParam&&(n[32]|=128),t._vs=v(n.slice(32,64))}else{if(t.r=e.r,t.s=e.s,t.v=e.v,t.recoveryParam=e.recoveryParam,t._vs=e._vs,null!=t._vs){const n=function(e,t){(e=h(e)).length>t&&l.throwArgumentError("value out of range","value",arguments[0]);const n=new Uint8Array(t);return n.set(e,t-e.length),u(n)}(h(t._vs),32);t._vs=v(n);const r=n[0]>=128?1:0;null==t.recoveryParam?t.recoveryParam=r:t.recoveryParam!==r&&l.throwArgumentError("signature recoveryParam mismatch _vs","signature",e),n[0]&=127;const i=v(n);null==t.s?t.s=i:t.s!==i&&l.throwArgumentError("signature v mismatch _vs","signature",e)}if(null==t.recoveryParam)null==t.v?l.throwArgumentError("signature missing v and recoveryParam","signature",e):0===t.v||1===t.v?t.recoveryParam=t.v:t.recoveryParam=1-t.v%2;else if(null==t.v)t.v=27+t.recoveryParam;else{const n=0===t.v||1===t.v?t.v:1-t.v%2;t.recoveryParam!==n&&l.throwArgumentError("signature recoveryParam mismatch v","signature",e)}null!=t.r&&_(t.r)?t.r=C(t.r,32):l.throwArgumentError("signature missing or invalid r","signature",e),null!=t.s&&_(t.s)?t.s=C(t.s,32):l.throwArgumentError("signature missing or invalid s","signature",e);const n=h(t.s);n[0]>=128&&l.throwArgumentError("signature s out of range","signature",e),t.recoveryParam&&(n[0]|=128);const r=v(n);t._vs&&(_(t._vs)||l.throwArgumentError("signature invalid _vs","signature",e),t._vs=C(t._vs,32)),null==t._vs?t._vs=r:t._vs!==r&&l.throwArgumentError("signature _vs mismatch v and s","signature",e)}return t.yParityAndS=t._vs,t.compact=t.r+t.yParityAndS.substring(2),t}var S=__webpack_require__(3550),N=__webpack_require__.n(S),k=N().BN;const x=new d("bignumber/5.6.0"),D={},F=9007199254740991;let P=!1;class L{constructor(e,t){x.checkNew(new.target,L),e!==D&&x.throwError("cannot call constructor directly; use BigNumber.from",d.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=t,this._isBigNumber=!0,Object.freeze(this)}fromTwos(e){return B(M(this).fromTwos(e))}toTwos(e){return B(M(this).toTwos(e))}abs(){return"-"===this._hex[0]?L.from(this._hex.substring(1)):this}add(e){return B(M(this).add(M(e)))}sub(e){return B(M(this).sub(M(e)))}div(e){return L.from(e).isZero()&&V("division-by-zero","div"),B(M(this).div(M(e)))}mul(e){return B(M(this).mul(M(e)))}mod(e){const t=M(e);return t.isNeg()&&V("division-by-zero","mod"),B(M(this).umod(t))}pow(e){const t=M(e);return t.isNeg()&&V("negative-power","pow"),B(M(this).pow(t))}and(e){const t=M(e);return(this.isNegative()||t.isNeg())&&V("unbound-bitwise-result","and"),B(M(this).and(t))}or(e){const t=M(e);return(this.isNegative()||t.isNeg())&&V("unbound-bitwise-result","or"),B(M(this).or(t))}xor(e){const t=M(e);return(this.isNegative()||t.isNeg())&&V("unbound-bitwise-result","xor"),B(M(this).xor(t))}mask(e){return(this.isNegative()||e<0)&&V("negative-width","mask"),B(M(this).maskn(e))}shl(e){return(this.isNegative()||e<0)&&V("negative-width","shl"),B(M(this).shln(e))}shr(e){return(this.isNegative()||e<0)&&V("negative-width","shr"),B(M(this).shrn(e))}eq(e){return M(this).eq(M(e))}lt(e){return M(this).lt(M(e))}lte(e){return M(this).lte(M(e))}gt(e){return M(this).gt(M(e))}gte(e){return M(this).gte(M(e))}isNegative(){return"-"===this._hex[0]}isZero(){return M(this).isZero()}toNumber(){try{return M(this).toNumber()}catch(e){V("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(e){}return x.throwError("this platform does not support BigInt",d.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?P||(P=!0,x.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?x.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",d.errors.UNEXPECTED_ARGUMENT,{}):x.throwError("BigNumber.toString does not accept parameters",d.errors.UNEXPECTED_ARGUMENT,{})),M(this).toString(10)}toHexString(){return this._hex}toJSON(e){return{type:"BigNumber",hex:this.toHexString()}}static from(e){if(e instanceof L)return e;if("string"==typeof e)return e.match(/^-?0x[0-9a-f]+$/i)?new L(D,R(e)):e.match(/^-?[0-9]+$/)?new L(D,R(new k(e))):x.throwArgumentError("invalid BigNumber string","value",e);if("number"==typeof e)return e%1&&V("underflow","BigNumber.from",e),(e>=F||e<=-F)&&V("overflow","BigNumber.from",e),L.from(String(e));const t=e;if("bigint"==typeof t)return L.from(t.toString());if(y(t))return L.from(v(t));if(t)if(t.toHexString){const e=t.toHexString();if("string"==typeof e)return L.from(e)}else{let e=t._hex;if(null==e&&"BigNumber"===t.type&&(e=t.hex),"string"==typeof e&&(_(e)||"-"===e[0]&&_(e.substring(1))))return L.from(e)}return x.throwArgumentError("invalid BigNumber value","value",e)}static isBigNumber(e){return!(!e||!e._isBigNumber)}}function R(e){if("string"!=typeof e)return R(e.toString(16));if("-"===e[0])return"-"===(e=e.substring(1))[0]&&x.throwArgumentError("invalid hex","value",e),"0x00"===(e=R(e))?e:"-"+e;if("0x"!==e.substring(0,2)&&(e="0x"+e),"0x"===e)return"0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&"0x00"===e.substring(0,4);)e="0x"+e.substring(4);return e}function B(e){return L.from(R(e))}function M(e){const t=L.from(e).toHexString();return"-"===t[0]?new k("-"+t.substring(3),16):new k(t.substring(2),16)}function V(e,t,n){const r={fault:e,operation:t};return null!=n&&(r.value=n),x.throwError(e,d.errors.NUMERIC_FAULT,r)}const O=new d("properties/5.6.0");function U(e,t,n){Object.defineProperty(e,t,{enumerable:!0,value:n,writable:!1})}function $(e,t){for(let n=0;n<32;n++){if(e[t])return e[t];if(!e.prototype||"object"!=typeof e.prototype)break;e=Object.getPrototypeOf(e.prototype).constructor}return null}function z(e){return t=this,n=void 0,i=function*(){const t=Object.keys(e).map((t=>{const n=e[t];return Promise.resolve(n).then((e=>({key:t,value:e})))}));return(yield Promise.all(t)).reduce(((e,t)=>(e[t.key]=t.value,e)),{})},new((r=void 0)||(r=Promise))((function(e,a){function s(e){try{f(i.next(e))}catch(e){a(e)}}function o(e){try{f(i.throw(e))}catch(e){a(e)}}function f(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(s,o)}f((i=i.apply(t,n||[])).next())}));var t,n,r,i}function j(e){const t={};for(const n in e)t[n]=e[n];return t}const q={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function H(e){if(null==e||q[typeof e])return!0;if(Array.isArray(e)||"object"==typeof e){if(!Object.isFrozen(e))return!1;const t=Object.keys(e);for(let n=0;n<t.length;n++){let r=null;try{r=e[t[n]]}catch(e){continue}if(!H(r))return!1}return!0}return O.throwArgumentError("Cannot deepCopy "+typeof e,"object",e)}function G(e){if(H(e))return e;if(Array.isArray(e))return Object.freeze(e.map((e=>W(e))));if("object"==typeof e){const t={};for(const n in e){const r=e[n];void 0!==r&&U(t,n,W(r))}return t}return O.throwArgumentError("Cannot deepCopy "+typeof e,"object",e)}function W(e){return G(e)}class J{constructor(e){for(const t in e)this[t]=W(e[t])}}const K="abi/5.6.0",X=new d(K);class Z{constructor(e,t,n,r){this.name=e,this.type=t,this.localName=n,this.dynamic=r}_throwError(e,t){X.throwArgumentError(e,this.localName,t)}}class Q{constructor(e){U(this,"wordSize",e||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(e)}get data(){return A(this._data)}get length(){return this._dataLength}_writeData(e){return this._data.push(e),this._dataLength+=e.length,e.length}appendWriter(e){return this._writeData(b(e._data))}writeBytes(e){let t=h(e);const n=t.length%this.wordSize;return n&&(t=b([t,this._padding.slice(n)])),this._writeData(t)}_getValue(e){let t=h(L.from(e));return t.length>this.wordSize&&X.throwError("value out-of-bounds",d.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:t.length}),t.length%this.wordSize&&(t=b([this._padding.slice(t.length%this.wordSize),t])),t}writeValue(e){return this._writeData(this._getValue(e))}writeUpdatableValue(){const e=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,t=>{this._data[e]=this._getValue(t)}}}class ee{constructor(e,t,n,r){U(this,"_data",h(e)),U(this,"wordSize",t||32),U(this,"_coerceFunc",n),U(this,"allowLoose",r),this._offset=0}get data(){return v(this._data)}get consumed(){return this._offset}static coerce(e,t){let n=e.match("^u?int([0-9]+)$");return n&&parseInt(n[1])<=48&&(t=t.toNumber()),t}coerce(e,t){return this._coerceFunc?this._coerceFunc(e,t):ee.coerce(e,t)}_peekBytes(e,t,n){let r=Math.ceil(t/this.wordSize)*this.wordSize;return this._offset+r>this._data.length&&(this.allowLoose&&n&&this._offset+t<=this._data.length?r=t:X.throwError("data out-of-bounds",d.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+r})),this._data.slice(this._offset,this._offset+r)}subReader(e){return new ee(this._data.slice(this._offset+e),this.wordSize,this._coerceFunc,this.allowLoose)}readBytes(e,t){let n=this._peekBytes(0,e,!!t);return this._offset+=n.length,n.slice(0,e)}readValue(){return L.from(this.readBytes(this.wordSize))}}var te=__webpack_require__(1094),ne=__webpack_require__.n(te);function re(e){return"0x"+ne().keccak_256(h(e))}const ie=new d("rlp/5.6.0");function ae(e){const t=[];for(;e;)t.unshift(255&e),e>>=8;return t}function se(e,t,n){let r=0;for(let i=0;i<n;i++)r=256*r+e[t+i];return r}function oe(e){if(Array.isArray(e)){let t=[];if(e.forEach((function(e){t=t.concat(oe(e))})),t.length<=55)return t.unshift(192+t.length),t;const n=ae(t.length);return n.unshift(247+n.length),n.concat(t)}p(e)||ie.throwArgumentError("RLP object must be BytesLike","object",e);const t=Array.prototype.slice.call(h(e));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const n=ae(t.length);return n.unshift(183+n.length),n.concat(t)}function fe(e){return v(oe(e))}function de(e,t,n,r){const i=[];for(;n<t+1+r;){const a=le(e,n);i.push(a.result),(n+=a.consumed)>t+1+r&&ie.throwError("child data too short",d.errors.BUFFER_OVERRUN,{})}return{consumed:1+r,result:i}}function le(e,t){if(0===e.length&&ie.throwError("data too short",d.errors.BUFFER_OVERRUN,{}),e[t]>=248){const n=e[t]-247;t+1+n>e.length&&ie.throwError("data short segment too short",d.errors.BUFFER_OVERRUN,{});const r=se(e,t+1,n);return t+1+n+r>e.length&&ie.throwError("data long segment too short",d.errors.BUFFER_OVERRUN,{}),de(e,t,t+1+n,n+r)}if(e[t]>=192){const n=e[t]-192;return t+1+n>e.length&&ie.throwError("data array too short",d.errors.BUFFER_OVERRUN,{}),de(e,t,t+1,n)}if(e[t]>=184){const n=e[t]-183;t+1+n>e.length&&ie.throwError("data array too short",d.errors.BUFFER_OVERRUN,{});const r=se(e,t+1,n);return t+1+n+r>e.length&&ie.throwError("data array too short",d.errors.BUFFER_OVERRUN,{}),{consumed:1+n+r,result:v(e.slice(t+1+n,t+1+n+r))}}if(e[t]>=128){const n=e[t]-128;return t+1+n>e.length&&ie.throwError("data too short",d.errors.BUFFER_OVERRUN,{}),{consumed:1+n,result:v(e.slice(t+1,t+1+n))}}return{consumed:1,result:v(e[t])}}function ce(e){const t=h(e),n=le(t,0);return n.consumed!==t.length&&ie.throwArgumentError("invalid rlp data","data",e),n.result}const ue=new d("address/5.6.0");function pe(e){_(e,20)||ue.throwArgumentError("invalid address","address",e);const t=(e=e.toLowerCase()).substring(2).split(""),n=new Uint8Array(40);for(let e=0;e<40;e++)n[e]=t[e].charCodeAt(0);const r=h(re(n));for(let e=0;e<40;e+=2)r[e>>1]>>4>=8&&(t[e]=t[e].toUpperCase()),(15&r[e>>1])>=8&&(t[e+1]=t[e+1].toUpperCase());return"0x"+t.join("")}const me={};for(let e=0;e<10;e++)me[String(e)]=String(e);for(let e=0;e<26;e++)me[String.fromCharCode(65+e)]=String(10+e);const ye=Math.floor((he=9007199254740991,Math.log10?Math.log10(he):Math.log(he)/Math.LN10));var he;function be(e){let t=null;if("string"!=typeof e&&ue.throwArgumentError("invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==e.substring(0,2)&&(e="0x"+e),t=pe(e),e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&t!==e&&ue.throwArgumentError("bad address checksum","address",e);else if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(e.substring(2,4)!==function(e){let t=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((e=>me[e])).join("");for(;t.length>=ye;){let e=t.substring(0,ye);t=parseInt(e,10)%97+t.substring(e.length)}let n=String(98-parseInt(t,10)%97);for(;n.length<2;)n="0"+n;return n}(e)&&ue.throwArgumentError("bad icap checksum","address",e),n=e.substring(4),t=new k(n,36).toString(16);t.length<40;)t="0"+t;t=pe("0x"+t)}else ue.throwArgumentError("invalid address","address",e);var n;return t}function ge(e){let t=null;try{t=be(e.from)}catch(t){ue.throwArgumentError("missing from address","transaction",e)}return be(Y(re(fe([t,g(h(L.from(e.nonce).toHexString()))])),12))}const _e=new d("strings/5.6.0");var Te,ve;function we(e,t,n,r,i){if(e===ve.BAD_PREFIX||e===ve.UNEXPECTED_CONTINUE){let e=0;for(let r=t+1;r<n.length&&n[r]>>6==2;r++)e++;return e}return e===ve.OVERRUN?n.length-t-1:0}!function(e){e.current="",e.NFC="NFC",e.NFD="NFD",e.NFKC="NFKC",e.NFKD="NFKD"}(Te||(Te={})),function(e){e.UNEXPECTED_CONTINUE="unexpected continuation byte",e.BAD_PREFIX="bad codepoint prefix",e.OVERRUN="string overrun",e.MISSING_CONTINUE="missing continuation byte",e.OUT_OF_RANGE="out of UTF-8 range",e.UTF16_SURROGATE="UTF-16 surrogate",e.OVERLONG="overlong representation"}(ve||(ve={}));const Ye=Object.freeze({error:function(e,t,n,r,i){return _e.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`,"bytes",n)},ignore:we,replace:function(e,t,n,r,i){return e===ve.OVERLONG?(r.push(i),0):(r.push(65533),we(e,t,n))}});function Ae(e,t){null==t&&(t=Ye.error),e=h(e);const n=[];let r=0;for(;r<e.length;){const i=e[r++];if(i>>7==0){n.push(i);continue}let a=null,s=null;if(192==(224&i))a=1,s=127;else if(224==(240&i))a=2,s=2047;else{if(240!=(248&i)){r+=t(128==(192&i)?ve.UNEXPECTED_CONTINUE:ve.BAD_PREFIX,r-1,e,n);continue}a=3,s=65535}if(r-1+a>=e.length){r+=t(ve.OVERRUN,r-1,e,n);continue}let o=i&(1<<8-a-1)-1;for(let i=0;i<a;i++){let i=e[r];if(128!=(192&i)){r+=t(ve.MISSING_CONTINUE,r,e,n),o=null;break}o=o<<6|63&i,r++}null!==o&&(o>1114111?r+=t(ve.OUT_OF_RANGE,r-1-a,e,n,o):o>=55296&&o<=57343?r+=t(ve.UTF16_SURROGATE,r-1-a,e,n,o):o<=s?r+=t(ve.OVERLONG,r-1-a,e,n,o):n.push(o))}return n}function Ie(e,t=Te.current){t!=Te.current&&(_e.checkNormalize(),e=e.normalize(t));let n=[];for(let t=0;t<e.length;t++){const r=e.charCodeAt(t);if(r<128)n.push(r);else if(r<2048)n.push(r>>6|192),n.push(63&r|128);else if(55296==(64512&r)){t++;const i=e.charCodeAt(t);if(t>=e.length||56320!=(64512&i))throw new Error("invalid utf-8 string");const a=65536+((1023&r)<<10)+(1023&i);n.push(a>>18|240),n.push(a>>12&63|128),n.push(a>>6&63|128),n.push(63&a|128)}else n.push(r>>12|224),n.push(r>>6&63|128),n.push(63&r|128)}return h(n)}function Ce(e){return e.map((e=>e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10&1023),56320+(1023&e))))).join("")}function Ee(e,t){return Ce(Ae(e,t))}function Se(e,t=Te.current){return Ae(Ie(e,t))}function Ne(e){return re(Ie(e))}class ke extends Z{constructor(e){super("address","address",e,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(e,t){try{t=be(t)}catch(e){this._throwError(e.message,t)}return e.writeValue(t)}decode(e){return be(C(e.readValue().toHexString(),20))}}class xe extends Z{constructor(e){super(e.name,e.type,void 0,e.dynamic),this.coder=e}defaultValue(){return this.coder.defaultValue()}encode(e,t){return this.coder.encode(e,t)}decode(e){return this.coder.decode(e)}}const De=new d(K);function Fe(e,t,n){let r=null;if(Array.isArray(n))r=n;else if(n&&"object"==typeof n){let e={};r=t.map((t=>{const r=t.localName;return r||De.throwError("cannot encode object for signature with missing names",d.errors.INVALID_ARGUMENT,{argument:"values",coder:t,value:n}),e[r]&&De.throwError("cannot encode object for signature with duplicate names",d.errors.INVALID_ARGUMENT,{argument:"values",coder:t,value:n}),e[r]=!0,n[r]}))}else De.throwArgumentError("invalid tuple value","tuple",n);t.length!==r.length&&De.throwArgumentError("types/value length mismatch","tuple",n);let i=new Q(e.wordSize),a=new Q(e.wordSize),s=[];t.forEach(((e,t)=>{let n=r[t];if(e.dynamic){let t=a.length;e.encode(a,n);let r=i.writeUpdatableValue();s.push((e=>{r(e+t)}))}else e.encode(i,n)})),s.forEach((e=>{e(i.length)}));let o=e.appendWriter(i);return o+=e.appendWriter(a),o}function Pe(e,t){let n=[],r=e.subReader(0);t.forEach((t=>{let i=null;if(t.dynamic){let n=e.readValue(),a=r.subReader(n.toNumber());try{i=t.decode(a)}catch(e){if(e.code===d.errors.BUFFER_OVERRUN)throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}}else try{i=t.decode(e)}catch(e){if(e.code===d.errors.BUFFER_OVERRUN)throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}null!=i&&n.push(i)}));const i=t.reduce(((e,t)=>{const n=t.localName;return n&&(e[n]||(e[n]=0),e[n]++),e}),{});t.forEach(((e,t)=>{let r=e.localName;if(!r||1!==i[r])return;if("length"===r&&(r="_length"),null!=n[r])return;const a=n[t];a instanceof Error?Object.defineProperty(n,r,{enumerable:!0,get:()=>{throw a}}):n[r]=a}));for(let e=0;e<n.length;e++){const t=n[e];t instanceof Error&&Object.defineProperty(n,e,{enumerable:!0,get:()=>{throw t}})}return Object.freeze(n)}class Le extends Z{constructor(e,t,n){super("array",e.type+"["+(t>=0?t:"")+"]",n,-1===t||e.dynamic),this.coder=e,this.length=t}defaultValue(){const e=this.coder.defaultValue(),t=[];for(let n=0;n<this.length;n++)t.push(e);return t}encode(e,t){Array.isArray(t)||this._throwError("expected array value",t);let n=this.length;-1===n&&(n=t.length,e.writeValue(t.length)),De.checkArgumentCount(t.length,n,"coder array"+(this.localName?" "+this.localName:""));let r=[];for(let e=0;e<t.length;e++)r.push(this.coder);return Fe(e,r,t)}decode(e){let t=this.length;-1===t&&(t=e.readValue().toNumber(),32*t>e._data.length&&De.throwError("insufficient data length",d.errors.BUFFER_OVERRUN,{length:e._data.length,count:t}));let n=[];for(let e=0;e<t;e++)n.push(new xe(this.coder));return e.coerce(this.name,Pe(e,n))}}class Re extends Z{constructor(e){super("bool","bool",e,!1)}defaultValue(){return!1}encode(e,t){return e.writeValue(t?1:0)}decode(e){return e.coerce(this.type,!e.readValue().isZero())}}class Be extends Z{constructor(e,t){super(e,e,t,!0)}defaultValue(){return"0x"}encode(e,t){t=h(t);let n=e.writeValue(t.length);return n+=e.writeBytes(t),n}decode(e){return e.readBytes(e.readValue().toNumber(),!0)}}class Me extends Be{constructor(e){super("bytes",e)}decode(e){return e.coerce(this.name,v(super.decode(e)))}}class Ve extends Z{constructor(e,t){let n="bytes"+String(e);super(n,n,t,!1),this.size=e}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(e,t){let n=h(t);return n.length!==this.size&&this._throwError("incorrect data length",t),e.writeBytes(n)}decode(e){return e.coerce(this.name,v(e.readBytes(this.size)))}}class Oe extends Z{constructor(e){super("null","",e,!1)}defaultValue(){return null}encode(e,t){return null!=t&&this._throwError("not null",t),e.writeBytes([])}decode(e){return e.readBytes(0),e.coerce(this.name,null)}}const Ue=L.from(-1),$e=L.from(0),ze=L.from(1),je=L.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");class qe extends Z{constructor(e,t,n){const r=(t?"int":"uint")+8*e;super(r,r,n,!1),this.size=e,this.signed=t}defaultValue(){return 0}encode(e,t){let n=L.from(t),r=je.mask(8*e.wordSize);if(this.signed){let e=r.mask(8*this.size-1);(n.gt(e)||n.lt(e.add(ze).mul(Ue)))&&this._throwError("value out-of-bounds",t)}else(n.lt($e)||n.gt(r.mask(8*this.size)))&&this._throwError("value out-of-bounds",t);return n=n.toTwos(8*this.size).mask(8*this.size),this.signed&&(n=n.fromTwos(8*this.size).toTwos(8*e.wordSize)),e.writeValue(n)}decode(e){let t=e.readValue().mask(8*this.size);return this.signed&&(t=t.fromTwos(8*this.size)),e.coerce(this.name,t)}}class He extends Be{constructor(e){super("string",e)}defaultValue(){return""}encode(e,t){return super.encode(e,Ie(t))}decode(e){return Ee(super.decode(e))}}class Ge extends Z{constructor(e,t){let n=!1;const r=[];e.forEach((e=>{e.dynamic&&(n=!0),r.push(e.type)})),super("tuple","tuple("+r.join(",")+")",t,n),this.coders=e}defaultValue(){const e=[];this.coders.forEach((t=>{e.push(t.defaultValue())}));const t=this.coders.reduce(((e,t)=>{const n=t.localName;return n&&(e[n]||(e[n]=0),e[n]++),e}),{});return this.coders.forEach(((n,r)=>{let i=n.localName;i&&1===t[i]&&("length"===i&&(i="_length"),null==e[i]&&(e[i]=e[r]))})),Object.freeze(e)}encode(e,t){return Fe(e,this.coders,t)}decode(e){return e.coerce(this.name,Pe(e,this.coders))}}const We=new d(K),Je={};let Ke={calldata:!0,memory:!0,storage:!0},Xe={calldata:!0,memory:!0};function Ze(e,t){if("bytes"===e||"string"===e){if(Ke[t])return!0}else if("address"===e){if("payable"===t)return!0}else if((e.indexOf("[")>=0||"tuple"===e)&&Xe[t])return!0;return(Ke[t]||"payable"===t)&&We.throwArgumentError("invalid modifier","name",t),!1}function Qe(e,t){for(let n in t)U(e,n,t[n])}const et=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"}),tt=new RegExp(/^(.*)\[([0-9]*)\]$/);class nt{constructor(e,t){e!==Je&&We.throwError("use fromString",d.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),Qe(this,t);let n=this.type.match(tt);Qe(this,n?{arrayLength:parseInt(n[2]||"-1"),arrayChildren:nt.fromObject({type:n[1],components:this.components}),baseType:"array"}:{arrayLength:null,arrayChildren:null,baseType:null!=this.components?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}format(e){if(e||(e=et.sighash),et[e]||We.throwArgumentError("invalid format type","format",e),e===et.json){let t={type:"tuple"===this.baseType?"tuple":this.type,name:this.name||void 0};return"boolean"==typeof this.indexed&&(t.indexed=this.indexed),this.components&&(t.components=this.components.map((t=>JSON.parse(t.format(e))))),JSON.stringify(t)}let t="";return"array"===this.baseType?(t+=this.arrayChildren.format(e),t+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):"tuple"===this.baseType?(e!==et.sighash&&(t+=this.type),t+="("+this.components.map((t=>t.format(e))).join(e===et.full?", ":",")+")"):t+=this.type,e!==et.sighash&&(!0===this.indexed&&(t+=" indexed"),e===et.full&&this.name&&(t+=" "+this.name)),t}static from(e,t){return"string"==typeof e?nt.fromString(e,t):nt.fromObject(e)}static fromObject(e){return nt.isParamType(e)?e:new nt(Je,{name:e.name||null,type:pt(e.type),indexed:null==e.indexed?null:!!e.indexed,components:e.components?e.components.map(nt.fromObject):null})}static fromString(e,t){return n=function(e,t){let n=e;function r(t){We.throwArgumentError(`unexpected character at position ${t}`,"param",e)}function i(e){let n={type:"",name:"",parent:e,state:{allowType:!0}};return t&&(n.indexed=!1),n}e=e.replace(/\s/g," ");let a={type:"",name:"",state:{allowType:!0}},s=a;for(let n=0;n<e.length;n++){let a=e[n];switch(a){case"(":s.state.allowType&&""===s.type?s.type="tuple":s.state.allowParams||r(n),s.state.allowType=!1,s.type=pt(s.type),s.components=[i(s)],s=s.components[0];break;case")":delete s.state,"indexed"===s.name&&(t||r(n),s.indexed=!0,s.name=""),Ze(s.type,s.name)&&(s.name=""),s.type=pt(s.type);let e=s;s=s.parent,s||r(n),delete e.parent,s.state.allowParams=!1,s.state.allowName=!0,s.state.allowArray=!0;break;case",":delete s.state,"indexed"===s.name&&(t||r(n),s.indexed=!0,s.name=""),Ze(s.type,s.name)&&(s.name=""),s.type=pt(s.type);let o=i(s.parent);s.parent.components.push(o),delete s.parent,s=o;break;case" ":s.state.allowType&&""!==s.type&&(s.type=pt(s.type),delete s.state.allowType,s.state.allowName=!0,s.state.allowParams=!0),s.state.allowName&&""!==s.name&&("indexed"===s.name?(t||r(n),s.indexed&&r(n),s.indexed=!0,s.name=""):Ze(s.type,s.name)?s.name="":s.state.allowName=!1);break;case"[":s.state.allowArray||r(n),s.type+=a,s.state.allowArray=!1,s.state.allowName=!1,s.state.readArray=!0;break;case"]":s.state.readArray||r(n),s.type+=a,s.state.readArray=!1,s.state.allowArray=!0,s.state.allowName=!0;break;default:s.state.allowType?(s.type+=a,s.state.allowParams=!0,s.state.allowArray=!0):s.state.allowName?(s.name+=a,delete s.state.allowArray):s.state.readArray?s.type+=a:r(n)}}return s.parent&&We.throwArgumentError("unexpected eof","param",e),delete a.state,"indexed"===s.name?(t||r(n.length-7),s.indexed&&r(n.length-7),s.indexed=!0,s.name=""):Ze(s.type,s.name)&&(s.name=""),a.type=pt(a.type),a}(e,!!t),nt.fromObject({name:n.name,type:n.type,indexed:n.indexed,components:n.components});var n}static isParamType(e){return!(null==e||!e._isParamType)}}function rt(e,t){return function(e){e=e.trim();let t=[],n="",r=0;for(let i=0;i<e.length;i++){let a=e[i];","===a&&0===r?(t.push(n),n=""):(n+=a,"("===a?r++:")"===a&&(r--,-1===r&&We.throwArgumentError("unbalanced parenthesis","value",e)))}return n&&t.push(n),t}(e).map((e=>nt.fromString(e,t)))}class it{constructor(e,t){e!==Je&&We.throwError("use a static from method",d.errors.UNSUPPORTED_OPERATION,{operation:"new Fragment()"}),Qe(this,t),this._isFragment=!0,Object.freeze(this)}static from(e){return it.isFragment(e)?e:"string"==typeof e?it.fromString(e):it.fromObject(e)}static fromObject(e){if(it.isFragment(e))return e;switch(e.type){case"function":return lt.fromObject(e);case"event":return at.fromObject(e);case"constructor":return dt.fromObject(e);case"error":return ut.fromObject(e);case"fallback":case"receive":return null}return We.throwArgumentError("invalid fragment object","value",e)}static fromString(e){return"event"===(e=(e=(e=e.replace(/\s/g," ")).replace(/\(/g," (").replace(/\)/g,") ").replace(/\s+/g," ")).trim()).split(" ")[0]?at.fromString(e.substring(5).trim()):"function"===e.split(" ")[0]?lt.fromString(e.substring(8).trim()):"constructor"===e.split("(")[0].trim()?dt.fromString(e.trim()):"error"===e.split(" ")[0]?ut.fromString(e.substring(5).trim()):We.throwArgumentError("unsupported fragment","value",e)}static isFragment(e){return!(!e||!e._isFragment)}}class at extends it{format(e){if(e||(e=et.sighash),et[e]||We.throwArgumentError("invalid format type","format",e),e===et.json)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});let t="";return e!==et.sighash&&(t+="event "),t+=this.name+"("+this.inputs.map((t=>t.format(e))).join(e===et.full?", ":",")+") ",e!==et.sighash&&this.anonymous&&(t+="anonymous "),t.trim()}static from(e){return"string"==typeof e?at.fromString(e):at.fromObject(e)}static fromObject(e){if(at.isEventFragment(e))return e;"event"!==e.type&&We.throwArgumentError("invalid event object","value",e);const t={name:yt(e.name),anonymous:e.anonymous,inputs:e.inputs?e.inputs.map(nt.fromObject):[],type:"event"};return new at(Je,t)}static fromString(e){let t=e.match(ht);t||We.throwArgumentError("invalid event string","value",e);let n=!1;return t[3].split(" ").forEach((e=>{switch(e.trim()){case"anonymous":n=!0;break;case"":break;default:We.warn("unknown modifier: "+e)}})),at.fromObject({name:t[1].trim(),anonymous:n,inputs:rt(t[2],!0),type:"event"})}static isEventFragment(e){return e&&e._isFragment&&"event"===e.type}}function st(e,t){t.gas=null;let n=e.split("@");return 1!==n.length?(n.length>2&&We.throwArgumentError("invalid human-readable ABI signature","value",e),n[1].match(/^[0-9]+$/)||We.throwArgumentError("invalid human-readable ABI signature gas","value",e),t.gas=L.from(n[1]),n[0]):e}function ot(e,t){t.constant=!1,t.payable=!1,t.stateMutability="nonpayable",e.split(" ").forEach((e=>{switch(e.trim()){case"constant":t.constant=!0;break;case"payable":t.payable=!0,t.stateMutability="payable";break;case"nonpayable":t.payable=!1,t.stateMutability="nonpayable";break;case"pure":t.constant=!0,t.stateMutability="pure";break;case"view":t.constant=!0,t.stateMutability="view";break;case"external":case"public":case"":break;default:console.log("unknown modifier: "+e)}}))}function ft(e){let t={constant:!1,payable:!0,stateMutability:"payable"};return null!=e.stateMutability?(t.stateMutability=e.stateMutability,t.constant="view"===t.stateMutability||"pure"===t.stateMutability,null!=e.constant&&!!e.constant!==t.constant&&We.throwArgumentError("cannot have constant function with mutability "+t.stateMutability,"value",e),t.payable="payable"===t.stateMutability,null!=e.payable&&!!e.payable!==t.payable&&We.throwArgumentError("cannot have payable function with mutability "+t.stateMutability,"value",e)):null!=e.payable?(t.payable=!!e.payable,null!=e.constant||t.payable||"constructor"===e.type||We.throwArgumentError("unable to determine stateMutability","value",e),t.constant=!!e.constant,t.constant?t.stateMutability="view":t.stateMutability=t.payable?"payable":"nonpayable",t.payable&&t.constant&&We.throwArgumentError("cannot have constant payable function","value",e)):null!=e.constant?(t.constant=!!e.constant,t.payable=!t.constant,t.stateMutability=t.constant?"view":"payable"):"constructor"!==e.type&&We.throwArgumentError("unable to determine stateMutability","value",e),t}class dt extends it{format(e){if(e||(e=et.sighash),et[e]||We.throwArgumentError("invalid format type","format",e),e===et.json)return JSON.stringify({type:"constructor",stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});e===et.sighash&&We.throwError("cannot format a constructor for sighash",d.errors.UNSUPPORTED_OPERATION,{operation:"format(sighash)"});let t="constructor("+this.inputs.map((t=>t.format(e))).join(e===et.full?", ":",")+") ";return this.stateMutability&&"nonpayable"!==this.stateMutability&&(t+=this.stateMutability+" "),t.trim()}static from(e){return"string"==typeof e?dt.fromString(e):dt.fromObject(e)}static fromObject(e){if(dt.isConstructorFragment(e))return e;"constructor"!==e.type&&We.throwArgumentError("invalid constructor object","value",e);let t=ft(e);t.constant&&We.throwArgumentError("constructor cannot be constant","value",e);const n={name:null,type:e.type,inputs:e.inputs?e.inputs.map(nt.fromObject):[],payable:t.payable,stateMutability:t.stateMutability,gas:e.gas?L.from(e.gas):null};return new dt(Je,n)}static fromString(e){let t={type:"constructor"},n=(e=st(e,t)).match(ht);return n&&"constructor"===n[1].trim()||We.throwArgumentError("invalid constructor string","value",e),t.inputs=rt(n[2].trim(),!1),ot(n[3].trim(),t),dt.fromObject(t)}static isConstructorFragment(e){return e&&e._isFragment&&"constructor"===e.type}}class lt extends dt{format(e){if(e||(e=et.sighash),et[e]||We.throwArgumentError("invalid format type","format",e),e===et.json)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e)))),outputs:this.outputs.map((t=>JSON.parse(t.format(e))))});let t="";return e!==et.sighash&&(t+="function "),t+=this.name+"("+this.inputs.map((t=>t.format(e))).join(e===et.full?", ":",")+") ",e!==et.sighash&&(this.stateMutability?"nonpayable"!==this.stateMutability&&(t+=this.stateMutability+" "):this.constant&&(t+="view "),this.outputs&&this.outputs.length&&(t+="returns ("+this.outputs.map((t=>t.format(e))).join(", ")+") "),null!=this.gas&&(t+="@"+this.gas.toString()+" ")),t.trim()}static from(e){return"string"==typeof e?lt.fromString(e):lt.fromObject(e)}static fromObject(e){if(lt.isFunctionFragment(e))return e;"function"!==e.type&&We.throwArgumentError("invalid function object","value",e);let t=ft(e);const n={type:e.type,name:yt(e.name),constant:t.constant,inputs:e.inputs?e.inputs.map(nt.fromObject):[],outputs:e.outputs?e.outputs.map(nt.fromObject):[],payable:t.payable,stateMutability:t.stateMutability,gas:e.gas?L.from(e.gas):null};return new lt(Je,n)}static fromString(e){let t={type:"function"},n=(e=st(e,t)).split(" returns ");n.length>2&&We.throwArgumentError("invalid function string","value",e);let r=n[0].match(ht);if(r||We.throwArgumentError("invalid function signature","value",e),t.name=r[1].trim(),t.name&&yt(t.name),t.inputs=rt(r[2],!1),ot(r[3].trim(),t),n.length>1){let r=n[1].match(ht);""==r[1].trim()&&""==r[3].trim()||We.throwArgumentError("unexpected tokens","value",e),t.outputs=rt(r[2],!1)}else t.outputs=[];return lt.fromObject(t)}static isFunctionFragment(e){return e&&e._isFragment&&"function"===e.type}}function ct(e){const t=e.format();return"Error(string)"!==t&&"Panic(uint256)"!==t||We.throwArgumentError(`cannot specify user defined ${t} error`,"fragment",e),e}class ut extends it{format(e){if(e||(e=et.sighash),et[e]||We.throwArgumentError("invalid format type","format",e),e===et.json)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});let t="";return e!==et.sighash&&(t+="error "),t+=this.name+"("+this.inputs.map((t=>t.format(e))).join(e===et.full?", ":",")+") ",t.trim()}static from(e){return"string"==typeof e?ut.fromString(e):ut.fromObject(e)}static fromObject(e){if(ut.isErrorFragment(e))return e;"error"!==e.type&&We.throwArgumentError("invalid error object","value",e);const t={type:e.type,name:yt(e.name),inputs:e.inputs?e.inputs.map(nt.fromObject):[]};return ct(new ut(Je,t))}static fromString(e){let t={type:"error"},n=e.match(ht);return n||We.throwArgumentError("invalid error signature","value",e),t.name=n[1].trim(),t.name&&yt(t.name),t.inputs=rt(n[2],!1),ct(ut.fromObject(t))}static isErrorFragment(e){return e&&e._isFragment&&"error"===e.type}}function pt(e){return e.match(/^uint($|[^1-9])/)?e="uint256"+e.substring(4):e.match(/^int($|[^1-9])/)&&(e="int256"+e.substring(3)),e}const mt=new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");function yt(e){return e&&e.match(mt)||We.throwArgumentError(`invalid identifier "${e}"`,"value",e),e}const ht=new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$"),bt=new d(K),gt=new RegExp(/^bytes([0-9]*)$/),_t=new RegExp(/^(u?int)([0-9]*)$/);class Tt{constructor(e){bt.checkNew(new.target,Tt),U(this,"coerceFunc",e||null)}_getCoder(e){switch(e.baseType){case"address":return new ke(e.name);case"bool":return new Re(e.name);case"string":return new He(e.name);case"bytes":return new Me(e.name);case"array":return new Le(this._getCoder(e.arrayChildren),e.arrayLength,e.name);case"tuple":return new Ge((e.components||[]).map((e=>this._getCoder(e))),e.name);case"":return new Oe(e.name)}let t=e.type.match(_t);if(t){let n=parseInt(t[2]||"256");return(0===n||n>256||n%8!=0)&&bt.throwArgumentError("invalid "+t[1]+" bit length","param",e),new qe(n/8,"int"===t[1],e.name)}if(t=e.type.match(gt),t){let n=parseInt(t[1]);return(0===n||n>32)&&bt.throwArgumentError("invalid bytes length","param",e),new Ve(n,e.name)}return bt.throwArgumentError("invalid type","type",e.type)}_getWordSize(){return 32}_getReader(e,t){return new ee(e,this._getWordSize(),this.coerceFunc,t)}_getWriter(){return new Q(this._getWordSize())}getDefaultValue(e){const t=e.map((e=>this._getCoder(nt.from(e))));return new Ge(t,"_").defaultValue()}encode(e,t){e.length!==t.length&&bt.throwError("types/values length mismatch",d.errors.INVALID_ARGUMENT,{count:{types:e.length,values:t.length},value:{types:e,values:t}});const n=e.map((e=>this._getCoder(nt.from(e)))),r=new Ge(n,"_"),i=this._getWriter();return r.encode(i,t),i.data}decode(e,t,n){const r=e.map((e=>this._getCoder(nt.from(e))));return new Ge(r,"_").decode(this._getReader(h(t),n))}}const vt=new Tt,wt=new d(K);class Yt extends J{}class At extends J{}class It extends J{}class Ct extends J{static isIndexed(e){return!(!e||!e._isIndexed)}}const Et={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:!0},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"]}};function St(e,t){const n=new Error(`deferred error during ABI decoding triggered accessing ${e}`);return n.error=t,n}class Nt{constructor(e){wt.checkNew(new.target,Nt);let t=[];t="string"==typeof e?JSON.parse(e):e,U(this,"fragments",t.map((e=>it.from(e))).filter((e=>null!=e))),U(this,"_abiCoder",$(new.target,"getAbiCoder")()),U(this,"functions",{}),U(this,"errors",{}),U(this,"events",{}),U(this,"structs",{}),this.fragments.forEach((e=>{let t=null;switch(e.type){case"constructor":return this.deploy?void wt.warn("duplicate definition - constructor"):void U(this,"deploy",e);case"function":t=this.functions;break;case"event":t=this.events;break;case"error":t=this.errors;break;default:return}let n=e.format();t[n]?wt.warn("duplicate definition - "+n):t[n]=e})),this.deploy||U(this,"deploy",dt.from({payable:!1,type:"constructor"})),U(this,"_isInterface",!0)}format(e){e||(e=et.full),e===et.sighash&&wt.throwArgumentError("interface does not support formatting sighash","format",e);const t=this.fragments.map((t=>t.format(e)));return e===et.json?JSON.stringify(t.map((e=>JSON.parse(e)))):t}static getAbiCoder(){return vt}static getAddress(e){return be(e)}static getSighash(e){return Y(Ne(e.format()),0,4)}static getEventTopic(e){return Ne(e.format())}getFunction(e){if(_(e)){for(const t in this.functions)if(e===this.getSighash(t))return this.functions[t];wt.throwArgumentError("no matching function","sighash",e)}if(-1===e.indexOf("(")){const t=e.trim(),n=Object.keys(this.functions).filter((e=>e.split("(")[0]===t));return 0===n.length?wt.throwArgumentError("no matching function","name",t):n.length>1&&wt.throwArgumentError("multiple matching functions","name",t),this.functions[n[0]]}const t=this.functions[lt.fromString(e).format()];return t||wt.throwArgumentError("no matching function","signature",e),t}getEvent(e){if(_(e)){const t=e.toLowerCase();for(const e in this.events)if(t===this.getEventTopic(e))return this.events[e];wt.throwArgumentError("no matching event","topichash",t)}if(-1===e.indexOf("(")){const t=e.trim(),n=Object.keys(this.events).filter((e=>e.split("(")[0]===t));return 0===n.length?wt.throwArgumentError("no matching event","name",t):n.length>1&&wt.throwArgumentError("multiple matching events","name",t),this.events[n[0]]}const t=this.events[at.fromString(e).format()];return t||wt.throwArgumentError("no matching event","signature",e),t}getError(e){if(_(e)){const t=$(this.constructor,"getSighash");for(const n in this.errors)if(e===t(this.errors[n]))return this.errors[n];wt.throwArgumentError("no matching error","sighash",e)}if(-1===e.indexOf("(")){const t=e.trim(),n=Object.keys(this.errors).filter((e=>e.split("(")[0]===t));return 0===n.length?wt.throwArgumentError("no matching error","name",t):n.length>1&&wt.throwArgumentError("multiple matching errors","name",t),this.errors[n[0]]}const t=this.errors[lt.fromString(e).format()];return t||wt.throwArgumentError("no matching error","signature",e),t}getSighash(e){if("string"==typeof e)try{e=this.getFunction(e)}catch(t){try{e=this.getError(e)}catch(e){throw t}}return $(this.constructor,"getSighash")(e)}getEventTopic(e){return"string"==typeof e&&(e=this.getEvent(e)),$(this.constructor,"getEventTopic")(e)}_decodeParams(e,t){return this._abiCoder.decode(e,t)}_encodeParams(e,t){return this._abiCoder.encode(e,t)}encodeDeploy(e){return this._encodeParams(this.deploy.inputs,e||[])}decodeErrorResult(e,t){"string"==typeof e&&(e=this.getError(e));const n=h(t);return v(n.slice(0,4))!==this.getSighash(e)&&wt.throwArgumentError(`data signature does not match error ${e.name}.`,"data",v(n)),this._decodeParams(e.inputs,n.slice(4))}encodeErrorResult(e,t){return"string"==typeof e&&(e=this.getError(e)),v(b([this.getSighash(e),this._encodeParams(e.inputs,t||[])]))}decodeFunctionData(e,t){"string"==typeof e&&(e=this.getFunction(e));const n=h(t);return v(n.slice(0,4))!==this.getSighash(e)&&wt.throwArgumentError(`data signature does not match function ${e.name}.`,"data",v(n)),this._decodeParams(e.inputs,n.slice(4))}encodeFunctionData(e,t){return"string"==typeof e&&(e=this.getFunction(e)),v(b([this.getSighash(e),this._encodeParams(e.inputs,t||[])]))}decodeFunctionResult(e,t){"string"==typeof e&&(e=this.getFunction(e));let n=h(t),r=null,i=null,a=null,s=null;switch(n.length%this._abiCoder._getWordSize()){case 0:try{return this._abiCoder.decode(e.outputs,n)}catch(e){}break;case 4:{const e=v(n.slice(0,4)),t=Et[e];if(t)i=this._abiCoder.decode(t.inputs,n.slice(4)),a=t.name,s=t.signature,t.reason&&(r=i[0]);else try{const t=this.getError(e);i=this._abiCoder.decode(t.inputs,n.slice(4)),a=t.name,s=t.format()}catch(e){}break}}return wt.throwError("call revert exception",d.errors.CALL_EXCEPTION,{method:e.format(),errorArgs:i,errorName:a,errorSignature:s,reason:r})}encodeFunctionResult(e,t){return"string"==typeof e&&(e=this.getFunction(e)),v(this._abiCoder.encode(e.outputs,t||[]))}encodeFilterTopics(e,t){"string"==typeof e&&(e=this.getEvent(e)),t.length>e.inputs.length&&wt.throwError("too many arguments for "+e.format(),d.errors.UNEXPECTED_ARGUMENT,{argument:"values",value:t});let n=[];e.anonymous||n.push(this.getEventTopic(e));const r=(e,t)=>"string"===e.type?Ne(t):"bytes"===e.type?re(v(t)):("address"===e.type&&this._abiCoder.encode(["address"],[t]),C(v(t),32));for(t.forEach(((t,i)=>{let a=e.inputs[i];a.indexed?null==t?n.push(null):"array"===a.baseType||"tuple"===a.baseType?wt.throwArgumentError("filtering with tuples or arrays not supported","contract."+a.name,t):Array.isArray(t)?n.push(t.map((e=>r(a,e)))):n.push(r(a,t)):null!=t&&wt.throwArgumentError("cannot filter non-indexed parameters; must be null","contract."+a.name,t)}));n.length&&null===n[n.length-1];)n.pop();return n}encodeEventLog(e,t){"string"==typeof e&&(e=this.getEvent(e));const n=[],r=[],i=[];return e.anonymous||n.push(this.getEventTopic(e)),t.length!==e.inputs.length&&wt.throwArgumentError("event arguments/values mismatch","values",t),e.inputs.forEach(((e,a)=>{const s=t[a];if(e.indexed)if("string"===e.type)n.push(Ne(s));else if("bytes"===e.type)n.push(re(s));else{if("tuple"===e.baseType||"array"===e.baseType)throw new Error("not implemented");n.push(this._abiCoder.encode([e.type],[s]))}else r.push(e),i.push(s)})),{data:this._abiCoder.encode(r,i),topics:n}}decodeEventLog(e,t,n){if("string"==typeof e&&(e=this.getEvent(e)),null!=n&&!e.anonymous){let t=this.getEventTopic(e);_(n[0],32)&&n[0].toLowerCase()===t||wt.throwError("fragment/topic mismatch",d.errors.INVALID_ARGUMENT,{argument:"topics[0]",expected:t,value:n[0]}),n=n.slice(1)}let r=[],i=[],a=[];e.inputs.forEach(((e,t)=>{e.indexed?"string"===e.type||"bytes"===e.type||"tuple"===e.baseType||"array"===e.baseType?(r.push(nt.fromObject({type:"bytes32",name:e.name})),a.push(!0)):(r.push(e),a.push(!1)):(i.push(e),a.push(!1))}));let s=null!=n?this._abiCoder.decode(r,b(n)):null,o=this._abiCoder.decode(i,t,!0),f=[],l=0,c=0;e.inputs.forEach(((e,t)=>{if(e.indexed)if(null==s)f[t]=new Ct({_isIndexed:!0,hash:null});else if(a[t])f[t]=new Ct({_isIndexed:!0,hash:s[c++]});else try{f[t]=s[c++]}catch(e){f[t]=e}else try{f[t]=o[l++]}catch(e){f[t]=e}if(e.name&&null==f[e.name]){const n=f[t];n instanceof Error?Object.defineProperty(f,e.name,{enumerable:!0,get:()=>{throw St(`property ${JSON.stringify(e.name)}`,n)}}):f[e.name]=n}}));for(let e=0;e<f.length;e++){const t=f[e];t instanceof Error&&Object.defineProperty(f,e,{enumerable:!0,get:()=>{throw St(`index ${e}`,t)}})}return Object.freeze(f)}parseTransaction(e){let t=this.getFunction(e.data.substring(0,10).toLowerCase());return t?new At({args:this._abiCoder.decode(t.inputs,"0x"+e.data.substring(10)),functionFragment:t,name:t.name,signature:t.format(),sighash:this.getSighash(t),value:L.from(e.value||"0")}):null}parseLog(e){let t=this.getEvent(e.topics[0]);return!t||t.anonymous?null:new Yt({eventFragment:t,name:t.name,signature:t.format(),topic:this.getEventTopic(t),args:this.decodeEventLog(t,e.data,e.topics)})}parseError(e){const t=v(e);let n=this.getError(t.substring(0,10).toLowerCase());return n?new It({args:this._abiCoder.decode(n.inputs,"0x"+t.substring(10)),errorFragment:n,name:n.name,signature:n.format(),sighash:this.getSighash(n)}):null}static isInterface(e){return!(!e||!e._isInterface)}}const kt=new d("abstract-provider/5.6.0");class xt extends J{static isForkEvent(e){return!(!e||!e._isForkEvent)}}class Dt{constructor(){kt.checkAbstract(new.target,Dt),U(this,"_isProvider",!0)}getFeeData(){return e=this,t=void 0,r=function*(){const{block:e,gasPrice:t}=yield z({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((e=>null))});let n=null,r=null;return e&&e.baseFeePerGas&&(r=L.from("1500000000"),n=e.baseFeePerGas.mul(2).add(r)),{maxFeePerGas:n,maxPriorityFeePerGas:r,gasPrice:t}},new((n=void 0)||(n=Promise))((function(i,a){function s(e){try{f(r.next(e))}catch(e){a(e)}}function o(e){try{f(r.throw(e))}catch(e){a(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}f((r=r.apply(e,t||[])).next())}));var e,t,n,r}addListener(e,t){return this.on(e,t)}removeListener(e,t){return this.off(e,t)}static isProvider(e){return!(!e||!e._isProvider)}}var Ft=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function s(e){try{f(r.next(e))}catch(e){a(e)}}function o(e){try{f(r.throw(e))}catch(e){a(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}f((r=r.apply(e,t||[])).next())}))};const Pt=new d("abstract-signer/5.6.0"),Lt=["accessList","ccipReadEnabled","chainId","customData","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],Rt=[d.errors.INSUFFICIENT_FUNDS,d.errors.NONCE_EXPIRED,d.errors.REPLACEMENT_UNDERPRICED];class Bt{constructor(){Pt.checkAbstract(new.target,Bt),U(this,"_isSigner",!0)}getBalance(e){return Ft(this,void 0,void 0,(function*(){return this._checkProvider("getBalance"),yield this.provider.getBalance(this.getAddress(),e)}))}getTransactionCount(e){return Ft(this,void 0,void 0,(function*(){return this._checkProvider("getTransactionCount"),yield this.provider.getTransactionCount(this.getAddress(),e)}))}estimateGas(e){return Ft(this,void 0,void 0,(function*(){this._checkProvider("estimateGas");const t=yield z(this.checkTransaction(e));return yield this.provider.estimateGas(t)}))}call(e,t){return Ft(this,void 0,void 0,(function*(){this._checkProvider("call");const n=yield z(this.checkTransaction(e));return yield this.provider.call(n,t)}))}sendTransaction(e){return Ft(this,void 0,void 0,(function*(){this._checkProvider("sendTransaction");const t=yield this.populateTransaction(e),n=yield this.signTransaction(t);return yield this.provider.sendTransaction(n)}))}getChainId(){return Ft(this,void 0,void 0,(function*(){return this._checkProvider("getChainId"),(yield this.provider.getNetwork()).chainId}))}getGasPrice(){return Ft(this,void 0,void 0,(function*(){return this._checkProvider("getGasPrice"),yield this.provider.getGasPrice()}))}getFeeData(){return Ft(this,void 0,void 0,(function*(){return this._checkProvider("getFeeData"),yield this.provider.getFeeData()}))}resolveName(e){return Ft(this,void 0,void 0,(function*(){return this._checkProvider("resolveName"),yield this.provider.resolveName(e)}))}checkTransaction(e){for(const t in e)-1===Lt.indexOf(t)&&Pt.throwArgumentError("invalid transaction key: "+t,"transaction",e);const t=j(e);return null==t.from?t.from=this.getAddress():t.from=Promise.all([Promise.resolve(t.from),this.getAddress()]).then((t=>(t[0].toLowerCase()!==t[1].toLowerCase()&&Pt.throwArgumentError("from address mismatch","transaction",e),t[0]))),t}populateTransaction(e){return Ft(this,void 0,void 0,(function*(){const t=yield z(this.checkTransaction(e));null!=t.to&&(t.to=Promise.resolve(t.to).then((e=>Ft(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.resolveName(e);return null==t&&Pt.throwArgumentError("provided ENS name resolves to null","tx.to",e),t})))),t.to.catch((e=>{})));const n=null!=t.maxFeePerGas||null!=t.maxPriorityFeePerGas;if(null==t.gasPrice||2!==t.type&&!n?0!==t.type&&1!==t.type||!n||Pt.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",e):Pt.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",e),2!==t.type&&null!=t.type||null==t.maxFeePerGas||null==t.maxPriorityFeePerGas)if(0===t.type||1===t.type)null==t.gasPrice&&(t.gasPrice=this.getGasPrice());else{const e=yield this.getFeeData();if(null==t.type)if(null!=e.maxFeePerGas&&null!=e.maxPriorityFeePerGas)if(t.type=2,null!=t.gasPrice){const e=t.gasPrice;delete t.gasPrice,t.maxFeePerGas=e,t.maxPriorityFeePerGas=e}else null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas);else null!=e.gasPrice?(n&&Pt.throwError("network does not support EIP-1559",d.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==t.gasPrice&&(t.gasPrice=e.gasPrice),t.type=0):Pt.throwError("failed to get consistent fee data",d.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"});else 2===t.type&&(null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas))}else t.type=2;return null==t.nonce&&(t.nonce=this.getTransactionCount("pending")),null==t.gasLimit&&(t.gasLimit=this.estimateGas(t).catch((e=>{if(Rt.indexOf(e.code)>=0)throw e;return Pt.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",d.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,tx:t})}))),null==t.chainId?t.chainId=this.getChainId():t.chainId=Promise.all([Promise.resolve(t.chainId),this.getChainId()]).then((t=>(0!==t[1]&&t[0]!==t[1]&&Pt.throwArgumentError("chainId address mismatch","transaction",e),t[0]))),yield z(t)}))}_checkProvider(e){this.provider||Pt.throwError("missing provider",d.errors.UNSUPPORTED_OPERATION,{operation:e||"_checkProvider"})}static isSigner(e){return!(!e||!e._isSigner)}}class Mt extends Bt{constructor(e,t){Pt.checkNew(new.target,Mt),super(),U(this,"address",e),U(this,"provider",t||null)}getAddress(){return Promise.resolve(this.address)}_fail(e,t){return Promise.resolve().then((()=>{Pt.throwError(e,d.errors.UNSUPPORTED_OPERATION,{operation:t})}))}signMessage(e){return this._fail("VoidSigner cannot sign messages","signMessage")}signTransaction(e){return this._fail("VoidSigner cannot sign transactions","signTransaction")}_signTypedData(e,t,n){return this._fail("VoidSigner cannot sign typed data","signTypedData")}connect(e){return new Mt(this.address,e)}}var Vt=__webpack_require__(3715),Ot=__webpack_require__.n(Vt);function Ut(e,t,n){return n={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&n.path)}},e(n,n.exports),n.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==__webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self&&self;var $t=zt;function zt(e,t){if(!e)throw new Error(t||"Assertion failed")}zt.equal=function(e,t,n){if(e!=t)throw new Error(n||"Assertion failed: "+e+" != "+t)};var jt=Ut((function(e,t){var n=t;function r(e){return 1===e.length?"0"+e:e}function i(e){for(var t="",n=0;n<e.length;n++)t+=r(e[n].toString(16));return t}n.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var n=[];if("string"!=typeof e){for(var r=0;r<e.length;r++)n[r]=0|e[r];return n}if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),r=0;r<e.length;r+=2)n.push(parseInt(e[r]+e[r+1],16));else for(r=0;r<e.length;r++){var i=e.charCodeAt(r),a=i>>8,s=255&i;a?n.push(a,s):n.push(s)}return n},n.zero2=r,n.toHex=i,n.encode=function(e,t){return"hex"===t?i(e):e}})),qt=Ut((function(e,t){var n=t;n.assert=$t,n.toArray=jt.toArray,n.zero2=jt.zero2,n.toHex=jt.toHex,n.encode=jt.encode,n.getNAF=function(e,t,n){var r=new Array(Math.max(e.bitLength(),n)+1);r.fill(0);for(var i=1<<t+1,a=e.clone(),s=0;s<r.length;s++){var o,f=a.andln(i-1);a.isOdd()?(o=f>(i>>1)-1?(i>>1)-f:f,a.isubn(o)):o=0,r[s]=o,a.iushrn(1)}return r},n.getJSF=function(e,t){var n=[[],[]];e=e.clone(),t=t.clone();for(var r,i=0,a=0;e.cmpn(-i)>0||t.cmpn(-a)>0;){var s,o,f=e.andln(3)+i&3,d=t.andln(3)+a&3;3===f&&(f=-1),3===d&&(d=-1),s=0==(1&f)?0:3!=(r=e.andln(7)+i&7)&&5!==r||2!==d?f:-f,n[0].push(s),o=0==(1&d)?0:3!=(r=t.andln(7)+a&7)&&5!==r||2!==f?d:-d,n[1].push(o),2*i===s+1&&(i=1-i),2*a===o+1&&(a=1-a),e.iushrn(1),t.iushrn(1)}return n},n.cachedProperty=function(e,t,n){var r="_"+t;e.prototype[t]=function(){return void 0!==this[r]?this[r]:this[r]=n.call(this)}},n.parseBytes=function(e){return"string"==typeof e?n.toArray(e,"hex"):e},n.intFromLE=function(e){return new(N())(e,"hex","le")}})),Ht=qt.getNAF,Gt=qt.getJSF,Wt=qt.assert;function Jt(e,t){this.type=e,this.p=new(N())(t.p,16),this.red=t.prime?N().red(t.prime):N().mont(this.p),this.zero=new(N())(0).toRed(this.red),this.one=new(N())(1).toRed(this.red),this.two=new(N())(2).toRed(this.red),this.n=t.n&&new(N())(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var n=this.n&&this.p.div(this.n);!n||n.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var Kt=Jt;function Xt(e,t){this.curve=e,this.type=t,this.precomputed=null}Jt.prototype.point=function(){throw new Error("Not implemented")},Jt.prototype.validate=function(){throw new Error("Not implemented")},Jt.prototype._fixedNafMul=function(e,t){Wt(e.precomputed);var n=e._getDoubles(),r=Ht(t,1,this._bitLength),i=(1<<n.step+1)-(n.step%2==0?2:1);i/=3;var a,s,o=[];for(a=0;a<r.length;a+=n.step){s=0;for(var f=a+n.step-1;f>=a;f--)s=(s<<1)+r[f];o.push(s)}for(var d=this.jpoint(null,null,null),l=this.jpoint(null,null,null),c=i;c>0;c--){for(a=0;a<o.length;a++)(s=o[a])===c?l=l.mixedAdd(n.points[a]):s===-c&&(l=l.mixedAdd(n.points[a].neg()));d=d.add(l)}return d.toP()},Jt.prototype._wnafMul=function(e,t){var n=4,r=e._getNAFPoints(n);n=r.wnd;for(var i=r.points,a=Ht(t,n,this._bitLength),s=this.jpoint(null,null,null),o=a.length-1;o>=0;o--){for(var f=0;o>=0&&0===a[o];o--)f++;if(o>=0&&f++,s=s.dblp(f),o<0)break;var d=a[o];Wt(0!==d),s="affine"===e.type?d>0?s.mixedAdd(i[d-1>>1]):s.mixedAdd(i[-d-1>>1].neg()):d>0?s.add(i[d-1>>1]):s.add(i[-d-1>>1].neg())}return"affine"===e.type?s.toP():s},Jt.prototype._wnafMulAdd=function(e,t,n,r,i){var a,s,o,f=this._wnafT1,d=this._wnafT2,l=this._wnafT3,c=0;for(a=0;a<r;a++){var u=(o=t[a])._getNAFPoints(e);f[a]=u.wnd,d[a]=u.points}for(a=r-1;a>=1;a-=2){var p=a-1,m=a;if(1===f[p]&&1===f[m]){var y=[t[p],null,null,t[m]];0===t[p].y.cmp(t[m].y)?(y[1]=t[p].add(t[m]),y[2]=t[p].toJ().mixedAdd(t[m].neg())):0===t[p].y.cmp(t[m].y.redNeg())?(y[1]=t[p].toJ().mixedAdd(t[m]),y[2]=t[p].add(t[m].neg())):(y[1]=t[p].toJ().mixedAdd(t[m]),y[2]=t[p].toJ().mixedAdd(t[m].neg()));var h=[-3,-1,-5,-7,0,7,5,1,3],b=Gt(n[p],n[m]);for(c=Math.max(b[0].length,c),l[p]=new Array(c),l[m]=new Array(c),s=0;s<c;s++){var g=0|b[0][s],_=0|b[1][s];l[p][s]=h[3*(g+1)+(_+1)],l[m][s]=0,d[p]=y}}else l[p]=Ht(n[p],f[p],this._bitLength),l[m]=Ht(n[m],f[m],this._bitLength),c=Math.max(l[p].length,c),c=Math.max(l[m].length,c)}var T=this.jpoint(null,null,null),v=this._wnafT4;for(a=c;a>=0;a--){for(var w=0;a>=0;){var Y=!0;for(s=0;s<r;s++)v[s]=0|l[s][a],0!==v[s]&&(Y=!1);if(!Y)break;w++,a--}if(a>=0&&w++,T=T.dblp(w),a<0)break;for(s=0;s<r;s++){var A=v[s];0!==A&&(A>0?o=d[s][A-1>>1]:A<0&&(o=d[s][-A-1>>1].neg()),T="affine"===o.type?T.mixedAdd(o):T.add(o))}}for(a=0;a<r;a++)d[a]=null;return i?T:T.toP()},Jt.BasePoint=Xt,Xt.prototype.eq=function(){throw new Error("Not implemented")},Xt.prototype.validate=function(){return this.curve.validate(this)},Jt.prototype.decodePoint=function(e,t){e=qt.toArray(e,t);var n=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*n)return 6===e[0]?Wt(e[e.length-1]%2==0):7===e[0]&&Wt(e[e.length-1]%2==1),this.point(e.slice(1,1+n),e.slice(1+n,1+2*n));if((2===e[0]||3===e[0])&&e.length-1===n)return this.pointFromX(e.slice(1,1+n),3===e[0]);throw new Error("Unknown point format")},Xt.prototype.encodeCompressed=function(e){return this.encode(e,!0)},Xt.prototype._encode=function(e){var t=this.curve.p.byteLength(),n=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(n):[4].concat(n,this.getY().toArray("be",t))},Xt.prototype.encode=function(e,t){return qt.encode(this._encode(t),e)},Xt.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},Xt.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},Xt.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var n=[this],r=this,i=0;i<t;i+=e){for(var a=0;a<e;a++)r=r.dbl();n.push(r)}return{step:e,points:n}},Xt.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],n=(1<<e)-1,r=1===n?null:this.dbl(),i=1;i<n;i++)t[i]=t[i-1].add(r);return{wnd:e,points:t}},Xt.prototype._getBeta=function(){return null},Xt.prototype.dblp=function(e){for(var t=this,n=0;n<e;n++)t=t.dbl();return t};var Zt=Ut((function(e){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}})),Qt=qt.assert;function en(e){Kt.call(this,"short",e),this.a=new(N())(e.a,16).toRed(this.red),this.b=new(N())(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}Zt(en,Kt);var tn=en;function nn(e,t,n,r){Kt.BasePoint.call(this,e,"affine"),null===t&&null===n?(this.x=null,this.y=null,this.inf=!0):(this.x=new(N())(t,16),this.y=new(N())(n,16),r&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function rn(e,t,n,r){Kt.BasePoint.call(this,e,"jacobian"),null===t&&null===n&&null===r?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(N())(0)):(this.x=new(N())(t,16),this.y=new(N())(n,16),this.z=new(N())(r,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}en.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,n;if(e.beta)t=new(N())(e.beta,16).toRed(this.red);else{var r=this._getEndoRoots(this.p);t=(t=r[0].cmp(r[1])<0?r[0]:r[1]).toRed(this.red)}if(e.lambda)n=new(N())(e.lambda,16);else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(t))?n=i[0]:(n=i[1],Qt(0===this.g.mul(n).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:n,basis:e.basis?e.basis.map((function(e){return{a:new(N())(e.a,16),b:new(N())(e.b,16)}})):this._getEndoBasis(n)}}},en.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:N().mont(e),n=new(N())(2).toRed(t).redInvm(),r=n.redNeg(),i=new(N())(3).toRed(t).redNeg().redSqrt().redMul(n);return[r.redAdd(i).fromRed(),r.redSub(i).fromRed()]},en.prototype._getEndoBasis=function(e){for(var t,n,r,i,a,s,o,f,d,l=this.n.ushrn(Math.floor(this.n.bitLength()/2)),c=e,u=this.n.clone(),p=new(N())(1),m=new(N())(0),y=new(N())(0),h=new(N())(1),b=0;0!==c.cmpn(0);){var g=u.div(c);f=u.sub(g.mul(c)),d=y.sub(g.mul(p));var _=h.sub(g.mul(m));if(!r&&f.cmp(l)<0)t=o.neg(),n=p,r=f.neg(),i=d;else if(r&&2==++b)break;o=f,u=c,c=f,y=p,p=d,h=m,m=_}a=f.neg(),s=d;var T=r.sqr().add(i.sqr());return a.sqr().add(s.sqr()).cmp(T)>=0&&(a=t,s=n),r.negative&&(r=r.neg(),i=i.neg()),a.negative&&(a=a.neg(),s=s.neg()),[{a:r,b:i},{a,b:s}]},en.prototype._endoSplit=function(e){var t=this.endo.basis,n=t[0],r=t[1],i=r.b.mul(e).divRound(this.n),a=n.b.neg().mul(e).divRound(this.n),s=i.mul(n.a),o=a.mul(r.a),f=i.mul(n.b),d=a.mul(r.b);return{k1:e.sub(s).sub(o),k2:f.add(d).neg()}},en.prototype.pointFromX=function(e,t){(e=new(N())(e,16)).red||(e=e.toRed(this.red));var n=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),r=n.redSqrt();if(0!==r.redSqr().redSub(n).cmp(this.zero))throw new Error("invalid point");var i=r.fromRed().isOdd();return(t&&!i||!t&&i)&&(r=r.redNeg()),this.point(e,r)},en.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,n=e.y,r=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(r).redIAdd(this.b);return 0===n.redSqr().redISub(i).cmpn(0)},en.prototype._endoWnafMulAdd=function(e,t,n){for(var r=this._endoWnafT1,i=this._endoWnafT2,a=0;a<e.length;a++){var s=this._endoSplit(t[a]),o=e[a],f=o._getBeta();s.k1.negative&&(s.k1.ineg(),o=o.neg(!0)),s.k2.negative&&(s.k2.ineg(),f=f.neg(!0)),r[2*a]=o,r[2*a+1]=f,i[2*a]=s.k1,i[2*a+1]=s.k2}for(var d=this._wnafMulAdd(1,r,i,2*a,n),l=0;l<2*a;l++)r[l]=null,i[l]=null;return d},Zt(nn,Kt.BasePoint),en.prototype.point=function(e,t,n){return new nn(this,e,t,n)},en.prototype.pointFromJSON=function(e,t){return nn.fromJSON(this,e,t)},nn.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var n=this.curve,r=function(e){return n.point(e.x.redMul(n.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(r)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(r)}}}return t}},nn.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},nn.fromJSON=function(e,t,n){"string"==typeof t&&(t=JSON.parse(t));var r=e.point(t[0],t[1],n);if(!t[2])return r;function i(t){return e.point(t[0],t[1],n)}var a=t[2];return r.precomputed={beta:null,doubles:a.doubles&&{step:a.doubles.step,points:[r].concat(a.doubles.points.map(i))},naf:a.naf&&{wnd:a.naf.wnd,points:[r].concat(a.naf.points.map(i))}},r},nn.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},nn.prototype.isInfinity=function(){return this.inf},nn.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var n=t.redSqr().redISub(this.x).redISub(e.x),r=t.redMul(this.x.redSub(n)).redISub(this.y);return this.curve.point(n,r)},nn.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,n=this.x.redSqr(),r=e.redInvm(),i=n.redAdd(n).redIAdd(n).redIAdd(t).redMul(r),a=i.redSqr().redISub(this.x.redAdd(this.x)),s=i.redMul(this.x.redSub(a)).redISub(this.y);return this.curve.point(a,s)},nn.prototype.getX=function(){return this.x.fromRed()},nn.prototype.getY=function(){return this.y.fromRed()},nn.prototype.mul=function(e){return e=new(N())(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},nn.prototype.mulAdd=function(e,t,n){var r=[this,t],i=[e,n];return this.curve.endo?this.curve._endoWnafMulAdd(r,i):this.curve._wnafMulAdd(1,r,i,2)},nn.prototype.jmulAdd=function(e,t,n){var r=[this,t],i=[e,n];return this.curve.endo?this.curve._endoWnafMulAdd(r,i,!0):this.curve._wnafMulAdd(1,r,i,2,!0)},nn.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},nn.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var n=this.precomputed,r=function(e){return e.neg()};t.precomputed={naf:n.naf&&{wnd:n.naf.wnd,points:n.naf.points.map(r)},doubles:n.doubles&&{step:n.doubles.step,points:n.doubles.points.map(r)}}}return t},nn.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},Zt(rn,Kt.BasePoint),en.prototype.jpoint=function(e,t,n){return new rn(this,e,t,n)},rn.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),n=this.x.redMul(t),r=this.y.redMul(t).redMul(e);return this.curve.point(n,r)},rn.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},rn.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),n=this.z.redSqr(),r=this.x.redMul(t),i=e.x.redMul(n),a=this.y.redMul(t.redMul(e.z)),s=e.y.redMul(n.redMul(this.z)),o=r.redSub(i),f=a.redSub(s);if(0===o.cmpn(0))return 0!==f.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var d=o.redSqr(),l=d.redMul(o),c=r.redMul(d),u=f.redSqr().redIAdd(l).redISub(c).redISub(c),p=f.redMul(c.redISub(u)).redISub(a.redMul(l)),m=this.z.redMul(e.z).redMul(o);return this.curve.jpoint(u,p,m)},rn.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),n=this.x,r=e.x.redMul(t),i=this.y,a=e.y.redMul(t).redMul(this.z),s=n.redSub(r),o=i.redSub(a);if(0===s.cmpn(0))return 0!==o.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var f=s.redSqr(),d=f.redMul(s),l=n.redMul(f),c=o.redSqr().redIAdd(d).redISub(l).redISub(l),u=o.redMul(l.redISub(c)).redISub(i.redMul(d)),p=this.z.redMul(s);return this.curve.jpoint(c,u,p)},rn.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();var t;if(this.curve.zeroA||this.curve.threeA){var n=this;for(t=0;t<e;t++)n=n.dbl();return n}var r=this.curve.a,i=this.curve.tinv,a=this.x,s=this.y,o=this.z,f=o.redSqr().redSqr(),d=s.redAdd(s);for(t=0;t<e;t++){var l=a.redSqr(),c=d.redSqr(),u=c.redSqr(),p=l.redAdd(l).redIAdd(l).redIAdd(r.redMul(f)),m=a.redMul(c),y=p.redSqr().redISub(m.redAdd(m)),h=m.redISub(y),b=p.redMul(h);b=b.redIAdd(b).redISub(u);var g=d.redMul(o);t+1<e&&(f=f.redMul(u)),a=y,o=g,d=b}return this.curve.jpoint(a,d.redMul(i),o)},rn.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},rn.prototype._zeroDbl=function(){var e,t,n;if(this.zOne){var r=this.x.redSqr(),i=this.y.redSqr(),a=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(r).redISub(a);s=s.redIAdd(s);var o=r.redAdd(r).redIAdd(r),f=o.redSqr().redISub(s).redISub(s),d=a.redIAdd(a);d=(d=d.redIAdd(d)).redIAdd(d),e=f,t=o.redMul(s.redISub(f)).redISub(d),n=this.y.redAdd(this.y)}else{var l=this.x.redSqr(),c=this.y.redSqr(),u=c.redSqr(),p=this.x.redAdd(c).redSqr().redISub(l).redISub(u);p=p.redIAdd(p);var m=l.redAdd(l).redIAdd(l),y=m.redSqr(),h=u.redIAdd(u);h=(h=h.redIAdd(h)).redIAdd(h),e=y.redISub(p).redISub(p),t=m.redMul(p.redISub(e)).redISub(h),n=(n=this.y.redMul(this.z)).redIAdd(n)}return this.curve.jpoint(e,t,n)},rn.prototype._threeDbl=function(){var e,t,n;if(this.zOne){var r=this.x.redSqr(),i=this.y.redSqr(),a=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(r).redISub(a);s=s.redIAdd(s);var o=r.redAdd(r).redIAdd(r).redIAdd(this.curve.a),f=o.redSqr().redISub(s).redISub(s);e=f;var d=a.redIAdd(a);d=(d=d.redIAdd(d)).redIAdd(d),t=o.redMul(s.redISub(f)).redISub(d),n=this.y.redAdd(this.y)}else{var l=this.z.redSqr(),c=this.y.redSqr(),u=this.x.redMul(c),p=this.x.redSub(l).redMul(this.x.redAdd(l));p=p.redAdd(p).redIAdd(p);var m=u.redIAdd(u),y=(m=m.redIAdd(m)).redAdd(m);e=p.redSqr().redISub(y),n=this.y.redAdd(this.z).redSqr().redISub(c).redISub(l);var h=c.redSqr();h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h),t=p.redMul(m.redISub(e)).redISub(h)}return this.curve.jpoint(e,t,n)},rn.prototype._dbl=function(){var e=this.curve.a,t=this.x,n=this.y,r=this.z,i=r.redSqr().redSqr(),a=t.redSqr(),s=n.redSqr(),o=a.redAdd(a).redIAdd(a).redIAdd(e.redMul(i)),f=t.redAdd(t),d=(f=f.redIAdd(f)).redMul(s),l=o.redSqr().redISub(d.redAdd(d)),c=d.redISub(l),u=s.redSqr();u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var p=o.redMul(c).redISub(u),m=n.redAdd(n).redMul(r);return this.curve.jpoint(l,p,m)},rn.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),n=this.z.redSqr(),r=t.redSqr(),i=e.redAdd(e).redIAdd(e),a=i.redSqr(),s=this.x.redAdd(t).redSqr().redISub(e).redISub(r),o=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(a)).redSqr(),f=r.redIAdd(r);f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var d=i.redIAdd(s).redSqr().redISub(a).redISub(o).redISub(f),l=t.redMul(d);l=(l=l.redIAdd(l)).redIAdd(l);var c=this.x.redMul(o).redISub(l);c=(c=c.redIAdd(c)).redIAdd(c);var u=this.y.redMul(d.redMul(f.redISub(d)).redISub(s.redMul(o)));u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var p=this.z.redAdd(s).redSqr().redISub(n).redISub(o);return this.curve.jpoint(c,u,p)},rn.prototype.mul=function(e,t){return e=new(N())(e,t),this.curve._wnafMul(this,e)},rn.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),n=e.z.redSqr();if(0!==this.x.redMul(n).redISub(e.x.redMul(t)).cmpn(0))return!1;var r=t.redMul(this.z),i=n.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(r)).cmpn(0)},rn.prototype.eqXToP=function(e){var t=this.z.redSqr(),n=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(n))return!0;for(var r=e.clone(),i=this.curve.redN.redMul(t);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(n.redIAdd(i),0===this.x.cmp(n))return!0}},rn.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},rn.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var an=Ut((function(e,t){var n=t;n.base=Kt,n.short=tn,n.mont=null,n.edwards=null})),sn=Ut((function(e,t){var n,r=t,i=qt.assert;function a(e){"short"===e.type?this.curve=new an.short(e):"edwards"===e.type?this.curve=new an.edwards(e):this.curve=new an.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,i(this.g.validate(),"Invalid curve"),i(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function s(e,t){Object.defineProperty(r,e,{configurable:!0,enumerable:!0,get:function(){var n=new a(t);return Object.defineProperty(r,e,{configurable:!0,enumerable:!0,value:n}),n}})}r.PresetCurve=a,s("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:Ot().sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),s("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:Ot().sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),s("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:Ot().sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),s("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:Ot().sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),s("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:Ot().sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),s("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:Ot().sha256,gRed:!1,g:["9"]}),s("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:Ot().sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=null.crash()}catch(e){n=void 0}s("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:Ot().sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})}));function on(e){if(!(this instanceof on))return new on(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=jt.toArray(e.entropy,e.entropyEnc||"hex"),n=jt.toArray(e.nonce,e.nonceEnc||"hex"),r=jt.toArray(e.pers,e.persEnc||"hex");$t(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,n,r)}var fn=on;on.prototype._init=function(e,t,n){var r=e.concat(t).concat(n);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(r),this._reseed=1,this.reseedInterval=281474976710656},on.prototype._hmac=function(){return new(Ot().hmac)(this.hash,this.K)},on.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},on.prototype.reseed=function(e,t,n,r){"string"!=typeof t&&(r=n,n=t,t=null),e=jt.toArray(e,t),n=jt.toArray(n,r),$t(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(n||[])),this._reseed=1},on.prototype.generate=function(e,t,n,r){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(r=n,n=t,t=null),n&&(n=jt.toArray(n,r||"hex"),this._update(n));for(var i=[];i.length<e;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var a=i.slice(0,e);return this._update(n),this._reseed++,jt.encode(a,t)};var dn=qt.assert;function ln(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}var cn=ln;ln.fromPublic=function(e,t,n){return t instanceof ln?t:new ln(e,{pub:t,pubEnc:n})},ln.fromPrivate=function(e,t,n){return t instanceof ln?t:new ln(e,{priv:t,privEnc:n})},ln.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},ln.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},ln.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},ln.prototype._importPrivate=function(e,t){this.priv=new(N())(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},ln.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?dn(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||dn(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},ln.prototype.derive=function(e){return e.validate()||dn(e.validate(),"public point not validated"),e.mul(this.priv).getX()},ln.prototype.sign=function(e,t,n){return this.ec.sign(e,this,t,n)},ln.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},ln.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var un=qt.assert;function pn(e,t){if(e instanceof pn)return e;this._importDER(e,t)||(un(e.r&&e.s,"Signature without r or s"),this.r=new(N())(e.r,16),this.s=new(N())(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}var mn=pn;function yn(){this.place=0}function hn(e,t){var n=e[t.place++];if(!(128&n))return n;var r=15&n;if(0===r||r>4)return!1;for(var i=0,a=0,s=t.place;a<r;a++,s++)i<<=8,i|=e[s],i>>>=0;return!(i<=127)&&(t.place=s,i)}function bn(e){for(var t=0,n=e.length-1;!e[t]&&!(128&e[t+1])&&t<n;)t++;return 0===t?e:e.slice(t)}function gn(e,t){if(t<128)e.push(t);else{var n=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|n);--n;)e.push(t>>>(n<<3)&255);e.push(t)}}pn.prototype._importDER=function(e,t){e=qt.toArray(e,t);var n=new yn;if(48!==e[n.place++])return!1;var r=hn(e,n);if(!1===r)return!1;if(r+n.place!==e.length)return!1;if(2!==e[n.place++])return!1;var i=hn(e,n);if(!1===i)return!1;var a=e.slice(n.place,i+n.place);if(n.place+=i,2!==e[n.place++])return!1;var s=hn(e,n);if(!1===s)return!1;if(e.length!==s+n.place)return!1;var o=e.slice(n.place,s+n.place);if(0===a[0]){if(!(128&a[1]))return!1;a=a.slice(1)}if(0===o[0]){if(!(128&o[1]))return!1;o=o.slice(1)}return this.r=new(N())(a),this.s=new(N())(o),this.recoveryParam=null,!0},pn.prototype.toDER=function(e){var t=this.r.toArray(),n=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&n[0]&&(n=[0].concat(n)),t=bn(t),n=bn(n);!(n[0]||128&n[1]);)n=n.slice(1);var r=[2];gn(r,t.length),(r=r.concat(t)).push(2),gn(r,n.length);var i=r.concat(n),a=[48];return gn(a,i.length),a=a.concat(i),qt.encode(a,e)};var _n=function(){throw new Error("unsupported")},Tn=qt.assert;function vn(e){if(!(this instanceof vn))return new vn(e);"string"==typeof e&&(Tn(Object.prototype.hasOwnProperty.call(sn,e),"Unknown curve "+e),e=sn[e]),e instanceof sn.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}var wn=vn;vn.prototype.keyPair=function(e){return new cn(this,e)},vn.prototype.keyFromPrivate=function(e,t){return cn.fromPrivate(this,e,t)},vn.prototype.keyFromPublic=function(e,t){return cn.fromPublic(this,e,t)},vn.prototype.genKeyPair=function(e){e||(e={});for(var t=new fn({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||_n(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),n=this.n.byteLength(),r=this.n.sub(new(N())(2));;){var i=new(N())(t.generate(n));if(!(i.cmp(r)>0))return i.iaddn(1),this.keyFromPrivate(i)}},vn.prototype._truncateToN=function(e,t){var n=8*e.byteLength()-this.n.bitLength();return n>0&&(e=e.ushrn(n)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},vn.prototype.sign=function(e,t,n,r){"object"==typeof n&&(r=n,n=null),r||(r={}),t=this.keyFromPrivate(t,n),e=this._truncateToN(new(N())(e,16));for(var i=this.n.byteLength(),a=t.getPrivate().toArray("be",i),s=e.toArray("be",i),o=new fn({hash:this.hash,entropy:a,nonce:s,pers:r.pers,persEnc:r.persEnc||"utf8"}),f=this.n.sub(new(N())(1)),d=0;;d++){var l=r.k?r.k(d):new(N())(o.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(f)>=0)){var c=this.g.mul(l);if(!c.isInfinity()){var u=c.getX(),p=u.umod(this.n);if(0!==p.cmpn(0)){var m=l.invm(this.n).mul(p.mul(t.getPrivate()).iadd(e));if(0!==(m=m.umod(this.n)).cmpn(0)){var y=(c.getY().isOdd()?1:0)|(0!==u.cmp(p)?2:0);return r.canonical&&m.cmp(this.nh)>0&&(m=this.n.sub(m),y^=1),new mn({r:p,s:m,recoveryParam:y})}}}}}},vn.prototype.verify=function(e,t,n,r){e=this._truncateToN(new(N())(e,16)),n=this.keyFromPublic(n,r);var i=(t=new mn(t,"hex")).r,a=t.s;if(i.cmpn(1)<0||i.cmp(this.n)>=0)return!1;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;var s,o=a.invm(this.n),f=o.mul(e).umod(this.n),d=o.mul(i).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(f,n.getPublic(),d)).isInfinity()&&s.eqXToP(i):!(s=this.g.mulAdd(f,n.getPublic(),d)).isInfinity()&&0===s.getX().umod(this.n).cmp(i)},vn.prototype.recoverPubKey=function(e,t,n,r){Tn((3&n)===n,"The recovery param is more than two bits"),t=new mn(t,r);var i=this.n,a=new(N())(e),s=t.r,o=t.s,f=1&n,d=n>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&d)throw new Error("Unable to find sencond key candinate");s=d?this.curve.pointFromX(s.add(this.curve.n),f):this.curve.pointFromX(s,f);var l=t.r.invm(i),c=i.sub(a).mul(l).umod(i),u=o.mul(l).umod(i);return this.g.mulAdd(c,s,u)},vn.prototype.getKeyRecoveryParam=function(e,t,n,r){if(null!==(t=new mn(t,r)).recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var a;try{a=this.recoverPubKey(e,t,i)}catch(e){continue}if(a.eq(n))return i}throw new Error("Unable to find valid recovery factor")};var Yn=Ut((function(e,t){var n=t;n.version="6.5.4",n.utils=qt,n.rand=function(){throw new Error("unsupported")},n.curve=an,n.curves=sn,n.ec=wn,n.eddsa=null})).ec;const An=new d("signing-key/5.6.0");let In=null;function Cn(){return In||(In=new Yn("secp256k1")),In}class En{constructor(e){U(this,"curve","secp256k1"),U(this,"privateKey",v(e));const t=Cn().keyFromPrivate(h(this.privateKey));U(this,"publicKey","0x"+t.getPublic(!1,"hex")),U(this,"compressedPublicKey","0x"+t.getPublic(!0,"hex")),U(this,"_isSigningKey",!0)}_addPoint(e){const t=Cn().keyFromPublic(h(this.publicKey)),n=Cn().keyFromPublic(h(e));return"0x"+t.pub.add(n.pub).encodeCompressed("hex")}signDigest(e){const t=Cn().keyFromPrivate(h(this.privateKey)),n=h(e);32!==n.length&&An.throwArgumentError("bad digest length","digest",e);const r=t.sign(n,{canonical:!0});return E({recoveryParam:r.recoveryParam,r:C("0x"+r.r.toString(16),32),s:C("0x"+r.s.toString(16),32)})}computeSharedSecret(e){const t=Cn().keyFromPrivate(h(this.privateKey)),n=Cn().keyFromPublic(h(Sn(e)));return C("0x"+t.derive(n.getPublic()).toString(16),32)}static isSigningKey(e){return!(!e||!e._isSigningKey)}}function Sn(e,t){const n=h(e);if(32===n.length){const e=new En(n);return t?"0x"+Cn().keyFromPrivate(n).getPublic(!0,"hex"):e.publicKey}return 33===n.length?t?v(n):"0x"+Cn().keyFromPublic(n).getPublic(!1,"hex"):65===n.length?t?"0x"+Cn().keyFromPublic(n).getPublic(!0,"hex"):v(n):An.throwArgumentError("invalid public or private key","key","[REDACTED]")}const Nn=new d("transactions/5.6.0");var kn;function xn(e){return"0x"===e?null:be(e)}function Dn(e){return"0x"===e?$e:L.from(e)}function Fn(e,t){return function(e){return be(Y(re(Y(Sn(e),1)),12))}(function(e,t){const n=E(t),r={r:h(n.r),s:h(n.s)};return"0x"+Cn().recoverPubKey(h(e),r,n.recoveryParam).encode("hex",!1)}(h(e),t))}function Pn(e,t){const n=g(L.from(e).toHexString());return n.length>32&&Nn.throwArgumentError("invalid length for "+t,"transaction:"+t,e),n}function Ln(e,t){return{address:be(e),storageKeys:(t||[]).map(((t,n)=>(32!==w(t)&&Nn.throwArgumentError("invalid access list storageKey",`accessList[${e}:${n}]`,t),t.toLowerCase())))}}function Rn(e){if(Array.isArray(e))return e.map(((e,t)=>Array.isArray(e)?(e.length>2&&Nn.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${t}]`,e),Ln(e[0],e[1])):Ln(e.address,e.storageKeys)));const t=Object.keys(e).map((t=>{const n=e[t].reduce(((e,t)=>(e[t]=!0,e)),{});return Ln(t,Object.keys(n).sort())}));return t.sort(((e,t)=>e.address.localeCompare(t.address))),t}function Bn(e){return Rn(e).map((e=>[e.address,e.storageKeys]))}function Mn(e,t){if(null!=e.gasPrice){const t=L.from(e.gasPrice),n=L.from(e.maxFeePerGas||0);t.eq(n)||Nn.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:t,maxFeePerGas:n})}const n=[Pn(e.chainId||0,"chainId"),Pn(e.nonce||0,"nonce"),Pn(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),Pn(e.maxFeePerGas||0,"maxFeePerGas"),Pn(e.gasLimit||0,"gasLimit"),null!=e.to?be(e.to):"0x",Pn(e.value||0,"value"),e.data||"0x",Bn(e.accessList||[])];if(t){const e=E(t);n.push(Pn(e.recoveryParam,"recoveryParam")),n.push(g(e.r)),n.push(g(e.s))}return A(["0x02",fe(n)])}function Vn(e,t){const n=[Pn(e.chainId||0,"chainId"),Pn(e.nonce||0,"nonce"),Pn(e.gasPrice||0,"gasPrice"),Pn(e.gasLimit||0,"gasLimit"),null!=e.to?be(e.to):"0x",Pn(e.value||0,"value"),e.data||"0x",Bn(e.accessList||[])];if(t){const e=E(t);n.push(Pn(e.recoveryParam,"recoveryParam")),n.push(g(e.r)),n.push(g(e.s))}return A(["0x01",fe(n)])}function On(e,t,n){try{const n=Dn(t[0]).toNumber();if(0!==n&&1!==n)throw new Error("bad recid");e.v=n}catch(e){Nn.throwArgumentError("invalid v for transaction type: 1","v",t[0])}e.r=C(t[1],32),e.s=C(t[2],32);try{const t=re(n(e));e.from=Fn(t,{r:e.r,s:e.s,recoveryParam:e.v})}catch(e){console.log(e)}}!function(e){e[e.legacy=0]="legacy",e[e.eip2930=1]="eip2930",e[e.eip1559=2]="eip1559"}(kn||(kn={}));var Un=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function s(e){try{f(r.next(e))}catch(e){a(e)}}function o(e){try{f(r.throw(e))}catch(e){a(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}f((r=r.apply(e,t||[])).next())}))};const $n=new d("contracts/5.6.0");function zn(e,t){return Un(this,void 0,void 0,(function*(){const n=yield t;"string"!=typeof n&&$n.throwArgumentError("invalid address or ENS name","name",n);try{return be(n)}catch(e){}e||$n.throwError("a provider or signer is needed to resolve ENS names",d.errors.UNSUPPORTED_OPERATION,{operation:"resolveName"});const r=yield e.resolveName(n);return null==r&&$n.throwArgumentError("resolver or addr is not configured for ENS name","name",n),r}))}function jn(e,t,n){return Un(this,void 0,void 0,(function*(){return Array.isArray(n)?yield Promise.all(n.map(((n,r)=>jn(e,Array.isArray(t)?t[r]:t[n.name],n)))):"address"===n.type?yield zn(e,t):"tuple"===n.type?yield jn(e,t,n.components):"array"===n.baseType?Array.isArray(t)?yield Promise.all(t.map((t=>jn(e,t,n.arrayChildren)))):Promise.reject($n.makeError("invalid value for array",d.errors.INVALID_ARGUMENT,{argument:"value",value:t})):t}))}function qn(e,t,n){return Un(this,void 0,void 0,(function*(){let r={};n.length===t.inputs.length+1&&"object"==typeof n[n.length-1]&&(r=j(n.pop())),$n.checkArgumentCount(n.length,t.inputs.length,"passed to contract"),e.signer?r.from?r.from=z({override:zn(e.signer,r.from),signer:e.signer.getAddress()}).then((e=>Un(this,void 0,void 0,(function*(){return be(e.signer)!==e.override&&$n.throwError("Contract with a Signer cannot override from",d.errors.UNSUPPORTED_OPERATION,{operation:"overrides.from"}),e.override})))):r.from=e.signer.getAddress():r.from&&(r.from=zn(e.provider,r.from));const i=yield z({args:jn(e.signer||e.provider,n,t.inputs),address:e.resolvedAddress,overrides:z(r)||{}}),a=e.interface.encodeFunctionData(t,i.args),s={data:a,to:i.address},o=i.overrides;if(null!=o.nonce&&(s.nonce=L.from(o.nonce).toNumber()),null!=o.gasLimit&&(s.gasLimit=L.from(o.gasLimit)),null!=o.gasPrice&&(s.gasPrice=L.from(o.gasPrice)),null!=o.maxFeePerGas&&(s.maxFeePerGas=L.from(o.maxFeePerGas)),null!=o.maxPriorityFeePerGas&&(s.maxPriorityFeePerGas=L.from(o.maxPriorityFeePerGas)),null!=o.from&&(s.from=o.from),null!=o.type&&(s.type=o.type),null!=o.accessList&&(s.accessList=Rn(o.accessList)),null==s.gasLimit&&null!=t.gas){let e=21e3;const n=h(a);for(let t=0;t<n.length;t++)e+=4,n[t]&&(e+=64);s.gasLimit=L.from(t.gas).add(e)}if(o.value){const e=L.from(o.value);e.isZero()||t.payable||$n.throwError("non-payable method cannot override value",d.errors.UNSUPPORTED_OPERATION,{operation:"overrides.value",value:r.value}),s.value=e}o.customData&&(s.customData=j(o.customData)),o.ccipReadEnabled&&(s.ccipReadEnabled=!!o.ccipReadEnabled),delete r.nonce,delete r.gasLimit,delete r.gasPrice,delete r.from,delete r.value,delete r.type,delete r.accessList,delete r.maxFeePerGas,delete r.maxPriorityFeePerGas,delete r.customData,delete r.ccipReadEnabled;const f=Object.keys(r).filter((e=>null!=r[e]));return f.length&&$n.throwError(`cannot override ${f.map((e=>JSON.stringify(e))).join(",")}`,d.errors.UNSUPPORTED_OPERATION,{operation:"overrides",overrides:f}),s}))}function Hn(e,t,n){const r=e.signer||e.provider;return function(...i){return Un(this,void 0,void 0,(function*(){let a;if(i.length===t.inputs.length+1&&"object"==typeof i[i.length-1]){const e=j(i.pop());null!=e.blockTag&&(a=yield e.blockTag),delete e.blockTag,i.push(e)}null!=e.deployTransaction&&(yield e._deployed(a));const s=yield qn(e,t,i),o=yield r.call(s,a);try{let r=e.interface.decodeFunctionResult(t,o);return n&&1===t.outputs.length&&(r=r[0]),r}catch(t){throw t.code===d.errors.CALL_EXCEPTION&&(t.address=e.address,t.args=i,t.transaction=s),t}}))}}function Gn(e,t,n){return t.constant?Hn(e,t,n):function(e,t){return function(...n){return Un(this,void 0,void 0,(function*(){e.signer||$n.throwError("sending a transaction requires a signer",d.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction"}),null!=e.deployTransaction&&(yield e._deployed());const r=yield qn(e,t,n),i=yield e.signer.sendTransaction(r);return function(e,t){const n=t.wait.bind(t);t.wait=t=>n(t).then((t=>(t.events=t.logs.map((n=>{let r=W(n),i=null;try{i=e.interface.parseLog(n)}catch(e){}return i&&(r.args=i.args,r.decode=(t,n)=>e.interface.decodeEventLog(i.eventFragment,t,n),r.event=i.name,r.eventSignature=i.signature),r.removeListener=()=>e.provider,r.getBlock=()=>e.provider.getBlock(t.blockHash),r.getTransaction=()=>e.provider.getTransaction(t.transactionHash),r.getTransactionReceipt=()=>Promise.resolve(t),r})),t)))}(e,i),i}))}}(e,t)}function Wn(e){return!e.address||null!=e.topics&&0!==e.topics.length?(e.address||"*")+"@"+(e.topics?e.topics.map((e=>Array.isArray(e)?e.join("|"):e)).join(":"):""):"*"}class Jn{constructor(e,t){U(this,"tag",e),U(this,"filter",t),this._listeners=[]}addListener(e,t){this._listeners.push({listener:e,once:t})}removeListener(e){let t=!1;this._listeners=this._listeners.filter((n=>!(!t&&n.listener===e&&(t=!0,1))))}removeAllListeners(){this._listeners=[]}listeners(){return this._listeners.map((e=>e.listener))}listenerCount(){return this._listeners.length}run(e){const t=this.listenerCount();return this._listeners=this._listeners.filter((t=>{const n=e.slice();return setTimeout((()=>{t.listener.apply(this,n)}),0),!t.once})),t}prepareEvent(e){}getEmit(e){return[e]}}class Kn extends Jn{constructor(){super("error",null)}}class Xn extends Jn{constructor(e,t,n,r){const i={address:e};let a=t.getEventTopic(n);r?(a!==r[0]&&$n.throwArgumentError("topic mismatch","topics",r),i.topics=r.slice()):i.topics=[a],super(Wn(i),i),U(this,"address",e),U(this,"interface",t),U(this,"fragment",n)}prepareEvent(e){super.prepareEvent(e),e.event=this.fragment.name,e.eventSignature=this.fragment.format(),e.decode=(e,t)=>this.interface.decodeEventLog(this.fragment,e,t);try{e.args=this.interface.decodeEventLog(this.fragment,e.data,e.topics)}catch(t){e.args=null,e.decodeError=t}}getEmit(e){const t=function(e){const t=[],n=function(e,r){if(Array.isArray(r))for(let i in r){const a=e.slice();a.push(i);try{n(a,r[i])}catch(e){t.push({path:a,error:e})}}};return n([],e),t}(e.args);if(t.length)throw t[0].error;const n=(e.args||[]).slice();return n.push(e),n}}class Zn extends Jn{constructor(e,t){super("*",{address:e}),U(this,"address",e),U(this,"interface",t)}prepareEvent(e){super.prepareEvent(e);try{const t=this.interface.parseLog(e);e.event=t.name,e.eventSignature=t.signature,e.decode=(e,n)=>this.interface.decodeEventLog(t.eventFragment,e,n),e.args=t.args}catch(e){}}}class Qn extends class{constructor(e,t,n){$n.checkNew(new.target,Qn),U(this,"interface",$(new.target,"getInterface")(t)),null==n?(U(this,"provider",null),U(this,"signer",null)):Bt.isSigner(n)?(U(this,"provider",n.provider||null),U(this,"signer",n)):Dt.isProvider(n)?(U(this,"provider",n),U(this,"signer",null)):$n.throwArgumentError("invalid signer or provider","signerOrProvider",n),U(this,"callStatic",{}),U(this,"estimateGas",{}),U(this,"functions",{}),U(this,"populateTransaction",{}),U(this,"filters",{});{const e={};Object.keys(this.interface.events).forEach((t=>{const n=this.interface.events[t];U(this.filters,t,((...e)=>({address:this.address,topics:this.interface.encodeFilterTopics(n,e)}))),e[n.name]||(e[n.name]=[]),e[n.name].push(t)})),Object.keys(e).forEach((t=>{const n=e[t];1===n.length?U(this.filters,t,this.filters[n[0]]):$n.warn(`Duplicate definition of ${t} (${n.join(", ")})`)}))}if(U(this,"_runningEvents",{}),U(this,"_wrappedEmits",{}),null==e&&$n.throwArgumentError("invalid contract address or ENS name","addressOrName",e),U(this,"address",e),this.provider)U(this,"resolvedAddress",zn(this.provider,e));else try{U(this,"resolvedAddress",Promise.resolve(be(e)))}catch(e){$n.throwError("provider is required to use ENS name as contract address",d.errors.UNSUPPORTED_OPERATION,{operation:"new Contract"})}this.resolvedAddress.catch((e=>{}));const r={},i={};Object.keys(this.interface.functions).forEach((e=>{const t=this.interface.functions[e];if(i[e])$n.warn(`Duplicate ABI entry for ${JSON.stringify(e)}`);else{i[e]=!0;{const n=t.name;r[`%${n}`]||(r[`%${n}`]=[]),r[`%${n}`].push(e)}null==this[e]&&U(this,e,Gn(this,t,!0)),null==this.functions[e]&&U(this.functions,e,Gn(this,t,!1)),null==this.callStatic[e]&&U(this.callStatic,e,Hn(this,t,!0)),null==this.populateTransaction[e]&&U(this.populateTransaction,e,function(e,t){return function(...n){return qn(e,t,n)}}(this,t)),null==this.estimateGas[e]&&U(this.estimateGas,e,function(e,t){const n=e.signer||e.provider;return function(...r){return Un(this,void 0,void 0,(function*(){n||$n.throwError("estimate require a provider or signer",d.errors.UNSUPPORTED_OPERATION,{operation:"estimateGas"});const i=yield qn(e,t,r);return yield n.estimateGas(i)}))}}(this,t))}})),Object.keys(r).forEach((e=>{const t=r[e];if(t.length>1)return;e=e.substring(1);const n=t[0];try{null==this[e]&&U(this,e,this[n])}catch(e){}null==this.functions[e]&&U(this.functions,e,this.functions[n]),null==this.callStatic[e]&&U(this.callStatic,e,this.callStatic[n]),null==this.populateTransaction[e]&&U(this.populateTransaction,e,this.populateTransaction[n]),null==this.estimateGas[e]&&U(this.estimateGas,e,this.estimateGas[n])}))}static getContractAddress(e){return ge(e)}static getInterface(e){return Nt.isInterface(e)?e:new Nt(e)}deployed(){return this._deployed()}_deployed(e){return this._deployedPromise||(this.deployTransaction?this._deployedPromise=this.deployTransaction.wait().then((()=>this)):this._deployedPromise=this.provider.getCode(this.address,e).then((e=>("0x"===e&&$n.throwError("contract not deployed",d.errors.UNSUPPORTED_OPERATION,{contractAddress:this.address,operation:"getDeployed"}),this)))),this._deployedPromise}fallback(e){this.signer||$n.throwError("sending a transactions require a signer",d.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction(fallback)"});const t=j(e||{});return["from","to"].forEach((function(e){null!=t[e]&&$n.throwError("cannot override "+e,d.errors.UNSUPPORTED_OPERATION,{operation:e})})),t.to=this.resolvedAddress,this.deployed().then((()=>this.signer.sendTransaction(t)))}connect(e){"string"==typeof e&&(e=new Mt(e,this.provider));const t=new this.constructor(this.address,this.interface,e);return this.deployTransaction&&U(t,"deployTransaction",this.deployTransaction),t}attach(e){return new this.constructor(e,this.interface,this.signer||this.provider)}static isIndexed(e){return Ct.isIndexed(e)}_normalizeRunningEvent(e){return this._runningEvents[e.tag]?this._runningEvents[e.tag]:e}_getRunningEvent(e){if("string"==typeof e){if("error"===e)return this._normalizeRunningEvent(new Kn);if("event"===e)return this._normalizeRunningEvent(new Jn("event",null));if("*"===e)return this._normalizeRunningEvent(new Zn(this.address,this.interface));const t=this.interface.getEvent(e);return this._normalizeRunningEvent(new Xn(this.address,this.interface,t))}if(e.topics&&e.topics.length>0){try{const t=e.topics[0];if("string"!=typeof t)throw new Error("invalid topic");const n=this.interface.getEvent(t);return this._normalizeRunningEvent(new Xn(this.address,this.interface,n,e.topics))}catch(e){}const t={address:this.address,topics:e.topics};return this._normalizeRunningEvent(new Jn(Wn(t),t))}return this._normalizeRunningEvent(new Zn(this.address,this.interface))}_checkRunningEvents(e){if(0===e.listenerCount()){delete this._runningEvents[e.tag];const t=this._wrappedEmits[e.tag];t&&e.filter&&(this.provider.off(e.filter,t),delete this._wrappedEmits[e.tag])}}_wrapEvent(e,t,n){const r=W(t);return r.removeListener=()=>{n&&(e.removeListener(n),this._checkRunningEvents(e))},r.getBlock=()=>this.provider.getBlock(t.blockHash),r.getTransaction=()=>this.provider.getTransaction(t.transactionHash),r.getTransactionReceipt=()=>this.provider.getTransactionReceipt(t.transactionHash),e.prepareEvent(r),r}_addEventListener(e,t,n){if(this.provider||$n.throwError("events require a provider or a signer with a provider",d.errors.UNSUPPORTED_OPERATION,{operation:"once"}),e.addListener(t,n),this._runningEvents[e.tag]=e,!this._wrappedEmits[e.tag]){const n=n=>{let r=this._wrapEvent(e,n,t);if(null==r.decodeError)try{const t=e.getEmit(r);this.emit(e.filter,...t)}catch(e){r.decodeError=e.error}null!=e.filter&&this.emit("event",r),null!=r.decodeError&&this.emit("error",r.decodeError,r)};this._wrappedEmits[e.tag]=n,null!=e.filter&&this.provider.on(e.filter,n)}}queryFilter(e,t,n){const r=this._getRunningEvent(e),i=j(r.filter);return"string"==typeof t&&_(t,32)?(null!=n&&$n.throwArgumentError("cannot specify toBlock with blockhash","toBlock",n),i.blockHash=t):(i.fromBlock=null!=t?t:0,i.toBlock=null!=n?n:"latest"),this.provider.getLogs(i).then((e=>e.map((e=>this._wrapEvent(r,e,null)))))}on(e,t){return this._addEventListener(this._getRunningEvent(e),t,!1),this}once(e,t){return this._addEventListener(this._getRunningEvent(e),t,!0),this}emit(e,...t){if(!this.provider)return!1;const n=this._getRunningEvent(e),r=n.run(t)>0;return this._checkRunningEvents(n),r}listenerCount(e){return this.provider?null==e?Object.keys(this._runningEvents).reduce(((e,t)=>e+this._runningEvents[t].listenerCount()),0):this._getRunningEvent(e).listenerCount():0}listeners(e){if(!this.provider)return[];if(null==e){const e=[];for(let t in this._runningEvents)this._runningEvents[t].listeners().forEach((t=>{e.push(t)}));return e}return this._getRunningEvent(e).listeners()}removeAllListeners(e){if(!this.provider)return this;if(null==e){for(const e in this._runningEvents){const t=this._runningEvents[e];t.removeAllListeners(),this._checkRunningEvents(t)}return this}const t=this._getRunningEvent(e);return t.removeAllListeners(),this._checkRunningEvents(t),this}off(e,t){if(!this.provider)return this;const n=this._getRunningEvent(e);return n.removeListener(t),this._checkRunningEvents(n),this}removeListener(e,t){return this.off(e,t)}}{}const er="providers/5.6.1",tr="hash/5.6.0";const nr=new d(tr),rr=new Uint8Array(32);rr.fill(0);const ir=L.from(-1),ar=L.from(0),sr=L.from(1),or=L.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),fr=C(sr.toHexString(),32),dr=C(ar.toHexString(),32),lr={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},cr=["name","version","chainId","verifyingContract","salt"];function ur(e){return function(t){return"string"!=typeof t&&nr.throwArgumentError(`invalid domain value for ${JSON.stringify(e)}`,`domain.${e}`,t),t}}const pr={name:ur("name"),version:ur("version"),chainId:function(e){try{return L.from(e).toString()}catch(e){}return nr.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",e)},verifyingContract:function(e){try{return be(e).toLowerCase()}catch(e){}return nr.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",e)},salt:function(e){try{const t=h(e);if(32!==t.length)throw new Error("bad length");return v(t)}catch(e){}return nr.throwArgumentError('invalid domain value "salt"',"domain.salt",e)}};function mr(e){{const t=e.match(/^(u?)int(\d*)$/);if(t){const n=""===t[1],r=parseInt(t[2]||"256");(r%8!=0||r>256||t[2]&&t[2]!==String(r))&&nr.throwArgumentError("invalid numeric width","type",e);const i=or.mask(n?r-1:r),a=n?i.add(sr).mul(ir):ar;return function(t){const n=L.from(t);return(n.lt(a)||n.gt(i))&&nr.throwArgumentError(`value out-of-bounds for ${e}`,"value",t),C(n.toTwos(256).toHexString(),32)}}}{const t=e.match(/^bytes(\d+)$/);if(t){const n=parseInt(t[1]);return(0===n||n>32||t[1]!==String(n))&&nr.throwArgumentError("invalid bytes width","type",e),function(t){return h(t).length!==n&&nr.throwArgumentError(`invalid length for ${e}`,"value",t),function(e){const t=h(e),n=t.length%32;return n?A([t,rr.slice(n)]):v(t)}(t)}}}switch(e){case"address":return function(e){return C(be(e),32)};case"bool":return function(e){return e?fr:dr};case"bytes":return function(e){return re(e)};case"string":return function(e){return Ne(e)}}return null}function yr(e,t){return`${e}(${t.map((({name:e,type:t})=>t+" "+e)).join(",")})`}class hr{constructor(e){U(this,"types",Object.freeze(W(e))),U(this,"_encoderCache",{}),U(this,"_types",{});const t={},n={},r={};Object.keys(e).forEach((e=>{t[e]={},n[e]=[],r[e]={}}));for(const r in e){const i={};e[r].forEach((a=>{i[a.name]&&nr.throwArgumentError(`duplicate variable name ${JSON.stringify(a.name)} in ${JSON.stringify(r)}`,"types",e),i[a.name]=!0;const s=a.type.match(/^([^\x5b]*)(\x5b|$)/)[1];s===r&&nr.throwArgumentError(`circular type reference to ${JSON.stringify(s)}`,"types",e),mr(s)||(n[s]||nr.throwArgumentError(`unknown type ${JSON.stringify(s)}`,"types",e),n[s].push(r),t[r][s]=!0)}))}const i=Object.keys(n).filter((e=>0===n[e].length));0===i.length?nr.throwArgumentError("missing primary type","types",e):i.length>1&&nr.throwArgumentError(`ambiguous primary types or unused types: ${i.map((e=>JSON.stringify(e))).join(", ")}`,"types",e),U(this,"primaryType",i[0]),function i(a,s){s[a]&&nr.throwArgumentError(`circular type reference to ${JSON.stringify(a)}`,"types",e),s[a]=!0,Object.keys(t[a]).forEach((e=>{n[e]&&(i(e,s),Object.keys(s).forEach((t=>{r[t][e]=!0})))})),delete s[a]}(this.primaryType,{});for(const t in r){const n=Object.keys(r[t]);n.sort(),this._types[t]=yr(t,e[t])+n.map((t=>yr(t,e[t]))).join("")}}getEncoder(e){let t=this._encoderCache[e];return t||(t=this._encoderCache[e]=this._getEncoder(e)),t}_getEncoder(e){{const t=mr(e);if(t)return t}const t=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(t){const e=t[1],n=this.getEncoder(e),r=parseInt(t[3]);return t=>{r>=0&&t.length!==r&&nr.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",t);let i=t.map(n);return this._types[e]&&(i=i.map(re)),re(A(i))}}const n=this.types[e];if(n){const t=Ne(this._types[e]);return e=>{const r=n.map((({name:t,type:n})=>{const r=this.getEncoder(n)(e[t]);return this._types[n]?re(r):r}));return r.unshift(t),A(r)}}return nr.throwArgumentError(`unknown type: ${e}`,"type",e)}encodeType(e){const t=this._types[e];return t||nr.throwArgumentError(`unknown type: ${JSON.stringify(e)}`,"name",e),t}encodeData(e,t){return this.getEncoder(e)(t)}hashStruct(e,t){return re(this.encodeData(e,t))}encode(e){return this.encodeData(this.primaryType,e)}hash(e){return this.hashStruct(this.primaryType,e)}_visit(e,t,n){if(mr(e))return n(e,t);const r=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(r){const e=r[1],i=parseInt(r[3]);return i>=0&&t.length!==i&&nr.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",t),t.map((t=>this._visit(e,t,n)))}const i=this.types[e];return i?i.reduce(((e,{name:r,type:i})=>(e[r]=this._visit(i,t[r],n),e)),{}):nr.throwArgumentError(`unknown type: ${e}`,"type",e)}visit(e,t){return this._visit(this.primaryType,e,t)}static from(e){return new hr(e)}static getPrimaryType(e){return hr.from(e).primaryType}static hashStruct(e,t,n){return hr.from(t).hashStruct(e,n)}static hashDomain(e){const t=[];for(const n in e){const r=lr[n];r||nr.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(n)}`,"domain",e),t.push({name:n,type:r})}return t.sort(((e,t)=>cr.indexOf(e.name)-cr.indexOf(t.name))),hr.hashStruct("EIP712Domain",{EIP712Domain:t},e)}static encode(e,t,n){return A(["0x1901",hr.hashDomain(e),hr.from(t).hash(n)])}static hash(e,t,n){return re(hr.encode(e,t,n))}static resolveNames(e,t,n,r){return i=this,a=void 0,o=function*(){e=j(e);const i={};e.verifyingContract&&!_(e.verifyingContract,20)&&(i[e.verifyingContract]="0x");const a=hr.from(t);a.visit(n,((e,t)=>("address"!==e||_(t,20)||(i[t]="0x"),t)));for(const e in i)i[e]=yield r(e);return e.verifyingContract&&i[e.verifyingContract]&&(e.verifyingContract=i[e.verifyingContract]),n=a.visit(n,((e,t)=>"address"===e&&i[t]?i[t]:t)),{domain:e,value:n}},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{f(o.next(e))}catch(e){t(e)}}function r(e){try{f(o.throw(e))}catch(e){t(e)}}function f(t){var i;t.done?e(t.value):(i=t.value,i instanceof s?i:new s((function(e){e(i)}))).then(n,r)}f((o=o.apply(i,a||[])).next())}));var i,a,s,o}static getPayload(e,t,n){hr.hashDomain(e);const r={},i=[];cr.forEach((t=>{const n=e[t];null!=n&&(r[t]=pr[t](n),i.push({name:t,type:lr[t]}))}));const a=hr.from(t),s=j(t);return s.EIP712Domain?nr.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",t):s.EIP712Domain=i,a.encode(n),{types:s,domain:r,primaryType:a.primaryType,message:a.visit(n,((e,t)=>{if(e.match(/^bytes(\d*)/))return v(h(t));if(e.match(/^u?int/))return L.from(t).toString();switch(e){case"address":return t.toLowerCase();case"bool":return!!t;case"string":return"string"!=typeof t&&nr.throwArgumentError("invalid string","value",t),t}return nr.throwArgumentError("unsupported type","type",e)}))}}}function br(e){e=atob(e);const t=[];for(let n=0;n<e.length;n++)t.push(e.charCodeAt(n));return h(t)}function gr(e){e=h(e);let t="";for(let n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return btoa(t)}function _r(e,t){return n=this,r=void 0,a=function*(){null==t&&(t={});const n={method:t.method||"GET",headers:t.headers||{},body:t.body||void 0};!0!==t.skipFetchSetup&&(n.mode="cors",n.cache="no-cache",n.credentials="same-origin",n.redirect="follow",n.referrer="client");const r=yield fetch(e,n),i=yield r.arrayBuffer(),a={};return r.headers.forEach?r.headers.forEach(((e,t)=>{a[t.toLowerCase()]=e})):r.headers.keys().forEach((e=>{a[e.toLowerCase()]=r.headers.get(e)})),{headers:a,statusCode:r.status,statusMessage:r.statusText,body:h(new Uint8Array(i))}},new((i=void 0)||(i=Promise))((function(e,t){function s(e){try{f(a.next(e))}catch(e){t(e)}}function o(e){try{f(a.throw(e))}catch(e){t(e)}}function f(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(s,o)}f((a=a.apply(n,r||[])).next())}));var n,r,i,a}const Tr=new d("web/5.6.0");function vr(e){return new Promise((t=>{setTimeout(t,e)}))}function wr(e,t){if(null==e)return null;if("string"==typeof e)return e;if(p(e)){if(t&&("text"===t.split("/")[0]||"application/json"===t.split(";")[0].trim()))try{return Ee(e)}catch(e){}return v(e)}return e}function Yr(e,t,n){let r=null;if(null!=t){r=Ie(t);const n="string"==typeof e?{url:e}:j(e);n.headers?0!==Object.keys(n.headers).filter((e=>"content-type"===e.toLowerCase())).length||(n.headers=j(n.headers),n.headers["content-type"]="application/json"):n.headers={"content-type":"application/json"},e=n}return function(e,t,n){const r="object"==typeof e&&null!=e.throttleLimit?e.throttleLimit:12;Tr.assertArgument(r>0&&r%1==0,"invalid connection throttle limit","connection.throttleLimit",r);const i="object"==typeof e?e.throttleCallback:null,a="object"==typeof e&&"number"==typeof e.throttleSlotInterval?e.throttleSlotInterval:100;Tr.assertArgument(a>0&&a%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",a);const s="object"==typeof e&&!!e.errorPassThrough,o={};let f=null;const l={method:"GET"};let c=!1,u=12e4;if("string"==typeof e)f=e;else if("object"==typeof e){if(null!=e&&null!=e.url||Tr.throwArgumentError("missing URL","connection.url",e),f=e.url,"number"==typeof e.timeout&&e.timeout>0&&(u=e.timeout),e.headers)for(const t in e.headers)o[t.toLowerCase()]={key:t,value:String(e.headers[t])},["if-none-match","if-modified-since"].indexOf(t.toLowerCase())>=0&&(c=!0);if(l.allowGzip=!!e.allowGzip,null!=e.user&&null!=e.password){"https:"!==f.substring(0,6)&&!0!==e.allowInsecureAuthentication&&Tr.throwError("basic authentication requires a secure https url",d.errors.INVALID_ARGUMENT,{argument:"url",url:f,user:e.user,password:"[REDACTED]"});const t=e.user+":"+e.password;o.authorization={key:"Authorization",value:"Basic "+gr(Ie(t))}}null!=e.skipFetchSetup&&(l.skipFetchSetup=!!e.skipFetchSetup)}const p=new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$","i"),m=f?f.match(p):null;if(m)try{const e={statusCode:200,statusMessage:"OK",headers:{"content-type":m[1]},body:br(m[2])};let t=e.body;return n&&(t=n(e.body,e)),Promise.resolve(t)}catch(e){Tr.throwError("processing response error",d.errors.SERVER_ERROR,{body:wr(m[1],m[2]),error:e,requestBody:null,requestMethod:"GET",url:f})}t&&(l.method="POST",l.body=t,null==o["content-type"]&&(o["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==o["content-length"]&&(o["content-length"]={key:"Content-Length",value:String(t.length)}));const y={};Object.keys(o).forEach((e=>{const t=o[e];y[t.key]=t.value})),l.headers=y;const h=function(){let e=null;return{promise:new Promise((function(t,n){u&&(e=setTimeout((()=>{null!=e&&(e=null,n(Tr.makeError("timeout",d.errors.TIMEOUT,{requestBody:wr(l.body,y["content-type"]),requestMethod:l.method,timeout:u,url:f})))}),u))})),cancel:function(){null!=e&&(clearTimeout(e),e=null)}}}(),b=function(){return e=this,t=void 0,u=function*(){for(let e=0;e<r;e++){let t=null;try{if(t=yield _r(f,l),e<r)if(301===t.statusCode||302===t.statusCode){const e=t.headers.location||"";if("GET"===l.method&&e.match(/^https:/)){f=t.headers.location;continue}}else if(429===t.statusCode){let n=!0;if(i&&(n=yield i(e,f)),n){let n=0;const r=t.headers["retry-after"];n="string"==typeof r&&r.match(/^[1-9][0-9]*$/)?1e3*parseInt(r):a*parseInt(String(Math.random()*Math.pow(2,e))),yield vr(n);continue}}}catch(e){t=e.response,null==t&&(h.cancel(),Tr.throwError("missing response",d.errors.SERVER_ERROR,{requestBody:wr(l.body,y["content-type"]),requestMethod:l.method,serverError:e,url:f}))}let o=t.body;if(c&&304===t.statusCode?o=null:!s&&(t.statusCode<200||t.statusCode>=300)&&(h.cancel(),Tr.throwError("bad response",d.errors.SERVER_ERROR,{status:t.statusCode,headers:t.headers,body:wr(o,t.headers?t.headers["content-type"]:null),requestBody:wr(l.body,y["content-type"]),requestMethod:l.method,url:f})),n)try{const e=yield n(o,t);return h.cancel(),e}catch(n){if(n.throttleRetry&&e<r){let t=!0;if(i&&(t=yield i(e,f)),t){const t=a*parseInt(String(Math.random()*Math.pow(2,e)));yield vr(t);continue}}h.cancel(),Tr.throwError("processing response error",d.errors.SERVER_ERROR,{body:wr(o,t.headers?t.headers["content-type"]:null),error:n,requestBody:wr(l.body,y["content-type"]),requestMethod:l.method,url:f})}return h.cancel(),o}return Tr.throwError("failed response",d.errors.SERVER_ERROR,{requestBody:wr(l.body,y["content-type"]),requestMethod:l.method,url:f})},new((o=void 0)||(o=Promise))((function(n,r){function i(e){try{s(u.next(e))}catch(e){r(e)}}function a(e){try{s(u.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,a)}s((u=u.apply(e,t||[])).next())}));var e,t,o,u}();return Promise.race([h.promise,b])}(e,r,((e,t)=>{let r=null;if(null!=e)try{r=JSON.parse(Ee(e))}catch(t){Tr.throwError("invalid JSON",d.errors.SERVER_ERROR,{body:e,error:t})}return n&&(r=n(r,t)),r}))}function Ar(e,t){return t||(t={}),null==(t=j(t)).floor&&(t.floor=0),null==t.ceiling&&(t.ceiling=1e4),null==t.interval&&(t.interval=250),new Promise((function(n,r){let i=null,a=!1;const s=()=>!a&&(a=!0,i&&clearTimeout(i),!0);t.timeout&&(i=setTimeout((()=>{s()&&r(new Error("timeout"))}),t.timeout));const o=t.retryLimit;let f=0;!function i(){return e().then((function(e){if(void 0!==e)s()&&n(e);else if(t.oncePoll)t.oncePoll.once("poll",i);else if(t.onceBlock)t.onceBlock.once("block",i);else if(!a){if(f++,f>o)return void(s()&&r(new Error("retry limit reached")));let e=t.interval*parseInt(String(Math.random()*Math.pow(2,f)));e<t.floor&&(e=t.floor),e>t.ceiling&&(e=t.ceiling),setTimeout(i,e)}return null}),(function(e){s()&&r(e)}))}()}))}class Ir{constructor(e){U(this,"alphabet",e),U(this,"base",e.length),U(this,"_alphabetMap",{}),U(this,"_leader",e.charAt(0));for(let t=0;t<e.length;t++)this._alphabetMap[e.charAt(t)]=t}encode(e){let t=h(e);if(0===t.length)return"";let n=[0];for(let e=0;e<t.length;++e){let r=t[e];for(let e=0;e<n.length;++e)r+=n[e]<<8,n[e]=r%this.base,r=r/this.base|0;for(;r>0;)n.push(r%this.base),r=r/this.base|0}let r="";for(let e=0;0===t[e]&&e<t.length-1;++e)r+=this._leader;for(let e=n.length-1;e>=0;--e)r+=this.alphabet[n[e]];return r}decode(e){if("string"!=typeof e)throw new TypeError("Expected String");let t=[];if(0===e.length)return new Uint8Array(t);t.push(0);for(let n=0;n<e.length;n++){let r=this._alphabetMap[e[n]];if(void 0===r)throw new Error("Non-base"+this.base+" character");let i=r;for(let e=0;e<t.length;++e)i+=t[e]*this.base,t[e]=255&i,i>>=8;for(;i>0;)t.push(255&i),i>>=8}for(let n=0;e[n]===this._leader&&n<e.length-1;++n)t.push(0);return h(new Uint8Array(t.reverse()))}}new Ir("abcdefghijklmnopqrstuvwxyz234567");const Cr=new Ir("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");function Er(e,t){t||(t=function(e){return[parseInt(e,16)]});let n=0,r={};return e.split(",").forEach((e=>{let i=e.split(":");n+=parseInt(i[0],16),r[n]=t(i[1])})),r}function Sr(e){let t=0;return e.split(",").map((e=>{let n=e.split("-");1===n.length?n[1]="0":""===n[1]&&(n[1]="1");let r=t+parseInt(n[0],16);return t=parseInt(n[1],16),{l:r,h:t}}))}function Nr(e,t){let n=0;for(let r=0;r<t.length;r++){let i=t[r];if(n+=i.l,e>=n&&e<=n+i.h&&(e-n)%(i.d||1)==0){if(i.e&&-1!==i.e.indexOf(e-n))continue;return i}}return null}const kr=Sr("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),xr="ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((e=>parseInt(e,16))),Dr=[{h:25,s:32,l:65},{h:30,s:32,e:[23],l:127},{h:54,s:1,e:[48],l:64,d:2},{h:14,s:1,l:57,d:2},{h:44,s:1,l:17,d:2},{h:10,s:1,e:[2,6,8],l:61,d:2},{h:16,s:1,l:68,d:2},{h:84,s:1,e:[18,24,66],l:19,d:2},{h:26,s:32,e:[17],l:435},{h:22,s:1,l:71,d:2},{h:15,s:80,l:40},{h:31,s:32,l:16},{h:32,s:1,l:80,d:2},{h:52,s:1,l:42,d:2},{h:12,s:1,l:55,d:2},{h:40,s:1,e:[38],l:15,d:2},{h:14,s:1,l:48,d:2},{h:37,s:48,l:49},{h:148,s:1,l:6351,d:2},{h:88,s:1,l:160,d:2},{h:15,s:16,l:704},{h:25,s:26,l:854},{h:25,s:32,l:55915},{h:37,s:40,l:1247},{h:25,s:-119711,l:53248},{h:25,s:-119763,l:52},{h:25,s:-119815,l:52},{h:25,s:-119867,e:[1,4,5,7,8,11,12,17],l:52},{h:25,s:-119919,l:52},{h:24,s:-119971,e:[2,7,8,17],l:52},{h:24,s:-120023,e:[2,7,13,15,16,17],l:52},{h:25,s:-120075,l:52},{h:25,s:-120127,l:52},{h:25,s:-120179,l:52},{h:25,s:-120231,l:52},{h:25,s:-120283,l:52},{h:25,s:-120335,l:52},{h:24,s:-119543,e:[17],l:56},{h:24,s:-119601,e:[17],l:58},{h:24,s:-119659,e:[17],l:58},{h:24,s:-119717,e:[17],l:58},{h:24,s:-119775,e:[17],l:58}],Fr=Er("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),Pr=Er("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),Lr=Er("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",(function(e){if(e.length%4!=0)throw new Error("bad data");let t=[];for(let n=0;n<e.length;n+=4)t.push(parseInt(e.substring(n,n+4),16));return t})),Rr=Sr("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");function Br(e){if(e.match(/^[a-z0-9-]*$/i)&&e.length<=59)return e.toLowerCase();let t=Se(e);var n;n=t.map((e=>{if(xr.indexOf(e)>=0)return[];if(e>=65024&&e<=65039)return[];let t=function(e){let t=Nr(e,Dr);if(t)return[e+t.s];let n=Fr[e];if(n)return n;let r=Pr[e];return r?[e+r[0]]:Lr[e]||null}(e);return t||[e]})),t=n.reduce(((e,t)=>(t.forEach((t=>{e.push(t)})),e)),[]),t=Se(Ce(t),Te.NFKC),t.forEach((e=>{if(Nr(e,Rr))throw new Error("STRINGPREP_CONTAINS_PROHIBITED")})),t.forEach((e=>{if(Nr(e,kr))throw new Error("STRINGPREP_CONTAINS_UNASSIGNED")}));let r=Ce(t);if("-"===r.substring(0,1)||"--"===r.substring(2,4)||"-"===r.substring(r.length-1))throw new Error("invalid hyphen");if(r.length>63)throw new Error("too long");return r}const Mr=new d(tr),Vr=new Uint8Array(32);Vr.fill(0);const Or=new RegExp("^((.*)\\.)?([^.]+)$");function Ur(e){"string"!=typeof e&&Mr.throwArgumentError("invalid ENS name; not a string","name",e);let t=e,n=Vr;for(;t.length;){const r=t.match(Or);null!=r&&""!==r[2]||Mr.throwArgumentError("invalid ENS address; missing component","name",e),n=re(b([n,re(Ie(Br(r[3])))])),t=r[2]||""}return v(n)}const $r=new d("networks/5.6.0");function zr(e){const t=function(t,n){null==n&&(n={});const r=[];if(t.InfuraProvider&&"-"!==n.infura)try{r.push(new t.InfuraProvider(e,n.infura))}catch(e){}if(t.EtherscanProvider&&"-"!==n.etherscan)try{r.push(new t.EtherscanProvider(e,n.etherscan))}catch(e){}if(t.AlchemyProvider&&"-"!==n.alchemy)try{r.push(new t.AlchemyProvider(e,n.alchemy))}catch(e){}if(t.PocketProvider&&"-"!==n.pocket){const n=["goerli","ropsten","rinkeby"];try{const i=new t.PocketProvider(e);i.network&&-1===n.indexOf(i.network.name)&&r.push(i)}catch(e){}}if(t.CloudflareProvider&&"-"!==n.cloudflare)try{r.push(new t.CloudflareProvider(e))}catch(e){}if(0===r.length)return null;if(t.FallbackProvider){let i=1;return null!=n.quorum?i=n.quorum:"homestead"===e&&(i=2),new t.FallbackProvider(r,i)}return r[0]};return t.renetwork=function(e){return zr(e)},t}function jr(e,t){const n=function(n,r){return n.JsonRpcProvider?new n.JsonRpcProvider(e,t):null};return n.renetwork=function(t){return jr(e,t)},n}const qr={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:zr("homestead")},Hr={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:zr("ropsten")},Gr={chainId:63,name:"classicMordor",_defaultProvider:jr("https://www.ethercluster.com/mordor","classicMordor")},Wr={unspecified:{chainId:0,name:"unspecified"},homestead:qr,mainnet:qr,morden:{chainId:2,name:"morden"},ropsten:Hr,testnet:Hr,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:zr("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:zr("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:zr("goerli")},kintsugi:{chainId:1337702,name:"kintsugi"},classic:{chainId:61,name:"classic",_defaultProvider:jr("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor:Gr,classicTestnet:Gr,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:jr("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic"},maticmum:{chainId:80001,name:"maticmum"},optimism:{chainId:10,name:"optimism"},"optimism-kovan":{chainId:69,name:"optimism-kovan"},"optimism-goerli":{chainId:420,name:"optimism-goerli"},arbitrum:{chainId:42161,name:"arbitrum"},"arbitrum-rinkeby":{chainId:421611,name:"arbitrum-rinkeby"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};function Jr(e){return"0x"+Ot().sha256().update(h(e)).digest("hex")}new d("sha2/5.6.0");var Kr=__webpack_require__(2882),Xr=__webpack_require__.n(Kr);const Zr=new d(er);class Qr{constructor(){Zr.checkNew(new.target,Qr),this.formats=this.getDefaultFormats()}getDefaultFormats(){const e={},t=this.address.bind(this),n=this.bigNumber.bind(this),r=this.blockTag.bind(this),i=this.data.bind(this),a=this.hash.bind(this),s=this.hex.bind(this),o=this.number.bind(this),f=this.type.bind(this);return e.transaction={hash:a,type:f,accessList:Qr.allowNull(this.accessList.bind(this),null),blockHash:Qr.allowNull(a,null),blockNumber:Qr.allowNull(o,null),transactionIndex:Qr.allowNull(o,null),confirmations:Qr.allowNull(o,null),from:t,gasPrice:Qr.allowNull(n),maxPriorityFeePerGas:Qr.allowNull(n),maxFeePerGas:Qr.allowNull(n),gasLimit:n,to:Qr.allowNull(t,null),value:n,nonce:o,data:i,r:Qr.allowNull(this.uint256),s:Qr.allowNull(this.uint256),v:Qr.allowNull(o),creates:Qr.allowNull(t,null),raw:Qr.allowNull(i)},e.transactionRequest={from:Qr.allowNull(t),nonce:Qr.allowNull(o),gasLimit:Qr.allowNull(n),gasPrice:Qr.allowNull(n),maxPriorityFeePerGas:Qr.allowNull(n),maxFeePerGas:Qr.allowNull(n),to:Qr.allowNull(t),value:Qr.allowNull(n),data:Qr.allowNull((e=>this.data(e,!0))),type:Qr.allowNull(o),accessList:Qr.allowNull(this.accessList.bind(this),null)},e.receiptLog={transactionIndex:o,blockNumber:o,transactionHash:a,address:t,topics:Qr.arrayOf(a),data:i,logIndex:o,blockHash:a},e.receipt={to:Qr.allowNull(this.address,null),from:Qr.allowNull(this.address,null),contractAddress:Qr.allowNull(t,null),transactionIndex:o,root:Qr.allowNull(s),gasUsed:n,logsBloom:Qr.allowNull(i),blockHash:a,transactionHash:a,logs:Qr.arrayOf(this.receiptLog.bind(this)),blockNumber:o,confirmations:Qr.allowNull(o,null),cumulativeGasUsed:n,effectiveGasPrice:Qr.allowNull(n),status:Qr.allowNull(o),type:f},e.block={hash:Qr.allowNull(a),parentHash:a,number:o,timestamp:o,nonce:Qr.allowNull(s),difficulty:this.difficulty.bind(this),gasLimit:n,gasUsed:n,miner:Qr.allowNull(t),extraData:i,transactions:Qr.allowNull(Qr.arrayOf(a)),baseFeePerGas:Qr.allowNull(n)},e.blockWithTransactions=j(e.block),e.blockWithTransactions.transactions=Qr.allowNull(Qr.arrayOf(this.transactionResponse.bind(this))),e.filter={fromBlock:Qr.allowNull(r,void 0),toBlock:Qr.allowNull(r,void 0),blockHash:Qr.allowNull(a,void 0),address:Qr.allowNull(t,void 0),topics:Qr.allowNull(this.topics.bind(this),void 0)},e.filterLog={blockNumber:Qr.allowNull(o),blockHash:Qr.allowNull(a),transactionIndex:o,removed:Qr.allowNull(this.boolean.bind(this)),address:t,data:Qr.allowFalsish(i,"0x"),topics:Qr.arrayOf(a),transactionHash:a,logIndex:o},e}accessList(e){return Rn(e||[])}number(e){return"0x"===e?0:L.from(e).toNumber()}type(e){return"0x"===e||null==e?0:L.from(e).toNumber()}bigNumber(e){return L.from(e)}boolean(e){if("boolean"==typeof e)return e;if("string"==typeof e){if("true"===(e=e.toLowerCase()))return!0;if("false"===e)return!1}throw new Error("invalid boolean - "+e)}hex(e,t){return"string"==typeof e&&(t||"0x"===e.substring(0,2)||(e="0x"+e),_(e))?e.toLowerCase():Zr.throwArgumentError("invalid hash","value",e)}data(e,t){const n=this.hex(e,t);if(n.length%2!=0)throw new Error("invalid data; odd-length - "+e);return n}address(e){return be(e)}callAddress(e){if(!_(e,32))return null;const t=be(Y(e,12));return"0x0000000000000000000000000000000000000000"===t?null:t}contractAddress(e){return ge(e)}blockTag(e){if(null==e)return"latest";if("earliest"===e)return"0x0";if("latest"===e||"pending"===e)return e;if("number"==typeof e||_(e))return I(e);throw new Error("invalid blockTag")}hash(e,t){const n=this.hex(e,t);return 32!==w(n)?Zr.throwArgumentError("invalid hash","value",e):n}difficulty(e){if(null==e)return null;const t=L.from(e);try{return t.toNumber()}catch(e){}return null}uint256(e){if(!_(e))throw new Error("invalid uint256");return C(e,32)}_block(e,t){null!=e.author&&null==e.miner&&(e.miner=e.author);const n=null!=e._difficulty?e._difficulty:e.difficulty,r=Qr.check(t,e);return r._difficulty=null==n?null:L.from(n),r}block(e){return this._block(e,this.formats.block)}blockWithTransactions(e){return this._block(e,this.formats.blockWithTransactions)}transactionRequest(e){return Qr.check(this.formats.transactionRequest,e)}transactionResponse(e){null!=e.gas&&null==e.gasLimit&&(e.gasLimit=e.gas),e.to&&L.from(e.to).isZero()&&(e.to="0x0000000000000000000000000000000000000000"),null!=e.input&&null==e.data&&(e.data=e.input),null==e.to&&null==e.creates&&(e.creates=this.contractAddress(e)),1!==e.type&&2!==e.type||null!=e.accessList||(e.accessList=[]);const t=Qr.check(this.formats.transaction,e);if(null!=e.chainId){let n=e.chainId;_(n)&&(n=L.from(n).toNumber()),t.chainId=n}else{let n=e.networkId;null==n&&null==t.v&&(n=e.chainId),_(n)&&(n=L.from(n).toNumber()),"number"!=typeof n&&null!=t.v&&(n=(t.v-35)/2,n<0&&(n=0),n=parseInt(n)),"number"!=typeof n&&(n=0),t.chainId=n}return t.blockHash&&"x"===t.blockHash.replace(/0/g,"")&&(t.blockHash=null),t}transaction(e){return function(e){const t=h(e);if(t[0]>127)return function(e){const t=ce(e);9!==t.length&&6!==t.length&&Nn.throwArgumentError("invalid raw transaction","rawTransaction",e);const n={nonce:Dn(t[0]).toNumber(),gasPrice:Dn(t[1]),gasLimit:Dn(t[2]),to:xn(t[3]),value:Dn(t[4]),data:t[5],chainId:0};if(6===t.length)return n;try{n.v=L.from(t[6]).toNumber()}catch(e){return console.log(e),n}if(n.r=C(t[7],32),n.s=C(t[8],32),L.from(n.r).isZero()&&L.from(n.s).isZero())n.chainId=n.v,n.v=0;else{n.chainId=Math.floor((n.v-35)/2),n.chainId<0&&(n.chainId=0);let r=n.v-27;const i=t.slice(0,6);0!==n.chainId&&(i.push(v(n.chainId)),i.push("0x"),i.push("0x"),r-=2*n.chainId+8);const a=re(fe(i));try{n.from=Fn(a,{r:v(n.r),s:v(n.s),recoveryParam:r})}catch(e){console.log(e)}n.hash=re(e)}return n.type=null,n}(t);switch(t[0]){case 1:return function(e){const t=ce(e.slice(1));8!==t.length&&11!==t.length&&Nn.throwArgumentError("invalid component count for transaction type: 1","payload",v(e));const n={type:1,chainId:Dn(t[0]).toNumber(),nonce:Dn(t[1]).toNumber(),gasPrice:Dn(t[2]),gasLimit:Dn(t[3]),to:xn(t[4]),value:Dn(t[5]),data:t[6],accessList:Rn(t[7])};return 8===t.length||(n.hash=re(e),On(n,t.slice(8),Vn)),n}(t);case 2:return function(e){const t=ce(e.slice(1));9!==t.length&&12!==t.length&&Nn.throwArgumentError("invalid component count for transaction type: 2","payload",v(e));const n=Dn(t[2]),r=Dn(t[3]),i={type:2,chainId:Dn(t[0]).toNumber(),nonce:Dn(t[1]).toNumber(),maxPriorityFeePerGas:n,maxFeePerGas:r,gasPrice:null,gasLimit:Dn(t[4]),to:xn(t[5]),value:Dn(t[6]),data:t[7],accessList:Rn(t[8])};return 9===t.length||(i.hash=re(e),On(i,t.slice(9),Mn)),i}(t)}return Nn.throwError(`unsupported transaction type: ${t[0]}`,d.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:t[0]})}(e)}receiptLog(e){return Qr.check(this.formats.receiptLog,e)}receipt(e){const t=Qr.check(this.formats.receipt,e);if(null!=t.root)if(t.root.length<=4){const e=L.from(t.root).toNumber();0===e||1===e?(null!=t.status&&t.status!==e&&Zr.throwArgumentError("alt-root-status/status mismatch","value",{root:t.root,status:t.status}),t.status=e,delete t.root):Zr.throwArgumentError("invalid alt-root-status","value.root",t.root)}else 66!==t.root.length&&Zr.throwArgumentError("invalid root hash","value.root",t.root);return null!=t.status&&(t.byzantium=!0),t}topics(e){return Array.isArray(e)?e.map((e=>this.topics(e))):null!=e?this.hash(e,!0):null}filter(e){return Qr.check(this.formats.filter,e)}filterLog(e){return Qr.check(this.formats.filterLog,e)}static check(e,t){const n={};for(const r in e)try{const i=e[r](t[r]);void 0!==i&&(n[r]=i)}catch(e){throw e.checkKey=r,e.checkValue=t[r],e}return n}static allowNull(e,t){return function(n){return null==n?t:e(n)}}static allowFalsish(e,t){return function(n){return n?e(n):t}}static arrayOf(e){return function(t){if(!Array.isArray(t))throw new Error("not an array");const n=[];return t.forEach((function(t){n.push(e(t))})),n}}}var ei=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function s(e){try{f(r.next(e))}catch(e){a(e)}}function o(e){try{f(r.throw(e))}catch(e){a(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}f((r=r.apply(e,t||[])).next())}))};const ti=new d(er);function ni(e){return null==e?"null":(32!==w(e)&&ti.throwArgumentError("invalid topic","topic",e),e.toLowerCase())}function ri(e){for(e=e.slice();e.length>0&&null==e[e.length-1];)e.pop();return e.map((e=>{if(Array.isArray(e)){const t={};e.forEach((e=>{t[ni(e)]=!0}));const n=Object.keys(t);return n.sort(),n.join("|")}return ni(e)})).join("&")}function ii(e){if("string"==typeof e){if(32===w(e=e.toLowerCase()))return"tx:"+e;if(-1===e.indexOf(":"))return e}else{if(Array.isArray(e))return"filter:*:"+ri(e);if(xt.isForkEvent(e))throw ti.warn("not implemented"),new Error("not implemented");if(e&&"object"==typeof e)return"filter:"+(e.address||"*")+":"+ri(e.topics||[])}throw new Error("invalid event - "+e)}function ai(){return(new Date).getTime()}function si(e){return new Promise((t=>{setTimeout(t,e)}))}const oi=["block","network","pending","poll"];class fi{constructor(e,t,n){U(this,"tag",e),U(this,"listener",t),U(this,"once",n),this._lastBlockNumber=-2,this._inflight=!1}get event(){switch(this.type){case"tx":return this.hash;case"filter":return this.filter}return this.tag}get type(){return this.tag.split(":")[0]}get hash(){const e=this.tag.split(":");return"tx"!==e[0]?null:e[1]}get filter(){const e=this.tag.split(":");if("filter"!==e[0])return null;const t=e[1],n=""===(r=e[2])?[]:r.split(/&/g).map((e=>{if(""===e)return[];const t=e.split("|").map((e=>"null"===e?null:e));return 1===t.length?t[0]:t}));var r;const i={};return n.length>0&&(i.topics=n),t&&"*"!==t&&(i.address=t),i}pollable(){return this.tag.indexOf(":")>=0||oi.indexOf(this.tag)>=0}}const di={0:{symbol:"btc",p2pkh:0,p2sh:5,prefix:"bc"},2:{symbol:"ltc",p2pkh:48,p2sh:50,prefix:"ltc"},3:{symbol:"doge",p2pkh:30,p2sh:22},60:{symbol:"eth",ilk:"eth"},61:{symbol:"etc",ilk:"eth"},700:{symbol:"xdai",ilk:"eth"}};function li(e){return C(L.from(e).toHexString(),32)}function ci(e){return Cr.encode(b([e,Y(Jr(Jr(e)),0,4)]))}const ui=new RegExp("^(ipfs)://(.*)$","i"),pi=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),ui,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];function mi(e,t){try{return Ee(yi(e,t))}catch(e){}return null}function yi(e,t){if("0x"===e)return null;const n=L.from(Y(e,t,t+32)).toNumber(),r=L.from(Y(e,n,n+32)).toNumber();return Y(e,n+32,n+32+r)}function hi(e){return e.match(/^ipfs:\/\/ipfs\//i)?e=e.substring(12):e.match(/^ipfs:\/\//i)?e=e.substring(7):ti.throwArgumentError("unsupported IPFS format","link",e),`https://gateway.ipfs.io/ipfs/${e}`}function bi(e){const t=h(e);if(t.length>32)throw new Error("internal; should not happen");const n=new Uint8Array(32);return n.set(t,32-t.length),n}function gi(e){if(e.length%32==0)return e;const t=new Uint8Array(32*Math.ceil(e.length/32));return t.set(e),t}function _i(e){const t=[];let n=0;for(let r=0;r<e.length;r++)t.push(null),n+=32;for(let r=0;r<e.length;r++){const i=h(e[r]);t[r]=bi(n),t.push(bi(i.length)),t.push(gi(i)),n+=32+32*Math.ceil(i.length/32)}return A(t)}class Ti{constructor(e,t,n,r){U(this,"provider",e),U(this,"name",n),U(this,"address",e.formatter.address(t)),U(this,"_resolvedAddress",r)}supportsWildcard(){return this._supportsEip2544||(this._supportsEip2544=this.provider.call({to:this.address,data:"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"}).then((e=>L.from(e).eq(1))).catch((e=>{if(e.code===d.errors.CALL_EXCEPTION)return!1;throw this._supportsEip2544=null,e}))),this._supportsEip2544}_fetch(e,t){return ei(this,void 0,void 0,(function*(){const n={to:this.address,ccipReadEnabled:!0,data:A([e,Ur(this.name),t||"0x"])};let r=!1;var i;(yield this.supportsWildcard())&&(r=!0,n.data=A(["0x9061b923",_i([(i=this.name,v(b(i.split(".").map((e=>{const t=Ie("_"+Br(e));return t[0]=t.length-1,t}))))+"00"),n.data])]));try{let e=yield this.provider.call(n);return h(e).length%32==4&&ti.throwError("resolver threw error",d.errors.CALL_EXCEPTION,{transaction:n,data:e}),r&&(e=yi(e,0)),e}catch(e){if(e.code===d.errors.CALL_EXCEPTION)return null;throw e}}))}_fetchBytes(e,t){return ei(this,void 0,void 0,(function*(){const n=yield this._fetch(e,t);return null!=n?yi(n,0):null}))}_getAddress(e,t){const n=di[String(e)];if(null==n&&ti.throwError(`unsupported coin type: ${e}`,d.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${e})`}),"eth"===n.ilk)return this.provider.formatter.address(t);const r=h(t);if(null!=n.p2pkh){const e=t.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);if(e){const t=parseInt(e[1],16);if(e[2].length===2*t&&t>=1&&t<=75)return ci(b([[n.p2pkh],"0x"+e[2]]))}}if(null!=n.p2sh){const e=t.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);if(e){const t=parseInt(e[1],16);if(e[2].length===2*t&&t>=1&&t<=75)return ci(b([[n.p2sh],"0x"+e[2]]))}}if(null!=n.prefix){const e=r[1];let t=r[0];if(0===t?20!==e&&32!==e&&(t=-1):t=-1,t>=0&&r.length===2+e&&e>=1&&e<=75){const e=Xr().toWords(r.slice(2));return e.unshift(t),Xr().encode(n.prefix,e)}}return null}getAddress(e){return ei(this,void 0,void 0,(function*(){if(null==e&&(e=60),60===e)try{const e=yield this._fetch("0x3b3b57de");return"0x"===e||"0x0000000000000000000000000000000000000000000000000000000000000000"===e?null:this.provider.formatter.callAddress(e)}catch(e){if(e.code===d.errors.CALL_EXCEPTION)return null;throw e}const t=yield this._fetchBytes("0xf1cb7e06",li(e));if(null==t||"0x"===t)return null;const n=this._getAddress(e,t);return null==n&&ti.throwError("invalid or unsupported coin data",d.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${e})`,coinType:e,data:t}),n}))}getAvatar(){return ei(this,void 0,void 0,(function*(){const e=[{type:"name",content:this.name}];try{const t=yield this.getText("avatar");if(null==t)return null;for(let n=0;n<pi.length;n++){const r=t.match(pi[n]);if(null==r)continue;const i=r[1].toLowerCase();switch(i){case"https":return e.push({type:"url",content:t}),{linkage:e,url:t};case"data":return e.push({type:"data",content:t}),{linkage:e,url:t};case"ipfs":return e.push({type:"ipfs",content:t}),{linkage:e,url:hi(t)};case"erc721":case"erc1155":{const n="erc721"===i?"0xc87b56dd":"0x0e89341c";e.push({type:i,content:t});const a=this._resolvedAddress||(yield this.getAddress()),s=(r[2]||"").split("/");if(2!==s.length)return null;const o=yield this.provider.formatter.address(s[0]),f=C(L.from(s[1]).toHexString(),32);if("erc721"===i){const t=this.provider.formatter.callAddress(yield this.provider.call({to:o,data:A(["0x6352211e",f])}));if(a!==t)return null;e.push({type:"owner",content:t})}else if("erc1155"===i){const t=L.from(yield this.provider.call({to:o,data:A(["0x00fdd58e",C(a,32),f])}));if(t.isZero())return null;e.push({type:"balance",content:t.toString()})}const d={to:this.provider.formatter.address(s[0]),data:A([n,f])};let l=mi(yield this.provider.call(d),0);if(null==l)return null;e.push({type:"metadata-url-base",content:l}),"erc1155"===i&&(l=l.replace("{id}",f.substring(2)),e.push({type:"metadata-url-expanded",content:l})),l.match(/^ipfs:/i)&&(l=hi(l)),e.push({type:"metadata-url",content:l});const c=yield Yr(l);if(!c)return null;e.push({type:"metadata",content:JSON.stringify(c)});let u=c.image;if("string"!=typeof u)return null;if(u.match(/^(https:\/\/|data:)/i));else{if(null==u.match(ui))return null;e.push({type:"url-ipfs",content:u}),u=hi(u)}return e.push({type:"url",content:u}),{linkage:e,url:u}}}}}catch(e){}return null}))}getContentHash(){return ei(this,void 0,void 0,(function*(){const e=yield this._fetchBytes("0xbc1c58d1");if(null==e||"0x"===e)return null;const t=e.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(t){const e=parseInt(t[3],16);if(t[4].length===2*e)return"ipfs://"+Cr.encode("0x"+t[1])}const n=e.match(/^0xe40101fa011b20([0-9a-f]*)$/);return n&&64===n[1].length?"bzz://"+n[1]:ti.throwError("invalid or unsupported content hash data",d.errors.UNSUPPORTED_OPERATION,{operation:"getContentHash()",data:e})}))}getText(e){return ei(this,void 0,void 0,(function*(){let t=Ie(e);t=b([li(64),li(t.length),t]),t.length%32!=0&&(t=b([t,C("0x",32-e.length%32)]));const n=yield this._fetchBytes("0x59d1d43c",v(t));return null==n||"0x"===n?null:Ee(n)}))}}let vi=null,wi=1;class Yi extends Dt{constructor(e){if(ti.checkNew(new.target,Dt),super(),this._events=[],this._emitted={block:-2},this.disableCcipRead=!1,this.formatter=new.target.getFormatter(),U(this,"anyNetwork","any"===e),this.anyNetwork&&(e=this.detectNetwork()),e instanceof Promise)this._networkPromise=e,e.catch((e=>{})),this._ready().catch((e=>{}));else{const t=$(new.target,"getNetwork")(e);t?(U(this,"_network",t),this.emit("network",t,null)):ti.throwArgumentError("invalid network","network",e)}this._maxInternalBlockNumber=-1024,this._lastBlockNumber=-2,this._maxFilterBlockRange=10,this._pollingInterval=4e3,this._fastQueryDate=0}_ready(){return ei(this,void 0,void 0,(function*(){if(null==this._network){let e=null;if(this._networkPromise)try{e=yield this._networkPromise}catch(e){}null==e&&(e=yield this.detectNetwork()),e||ti.throwError("no network detected",d.errors.UNKNOWN_ERROR,{}),null==this._network&&(this.anyNetwork?this._network=e:U(this,"_network",e),this.emit("network",e,null))}return this._network}))}get ready(){return Ar((()=>this._ready().then((e=>e),(e=>{if(e.code!==d.errors.NETWORK_ERROR||"noNetwork"!==e.event)throw e}))))}static getFormatter(){return null==vi&&(vi=new Qr),vi}static getNetwork(e){return function(e){if(null==e)return null;if("number"==typeof e){for(const t in Wr){const n=Wr[t];if(n.chainId===e)return{name:n.name,chainId:n.chainId,ensAddress:n.ensAddress||null,_defaultProvider:n._defaultProvider||null}}return{chainId:e,name:"unknown"}}if("string"==typeof e){const t=Wr[e];return null==t?null:{name:t.name,chainId:t.chainId,ensAddress:t.ensAddress,_defaultProvider:t._defaultProvider||null}}const t=Wr[e.name];if(!t)return"number"!=typeof e.chainId&&$r.throwArgumentError("invalid network chainId","network",e),e;0!==e.chainId&&e.chainId!==t.chainId&&$r.throwArgumentError("network chainId mismatch","network",e);let n=e._defaultProvider||null;var r;return null==n&&t._defaultProvider&&(n=(r=t._defaultProvider)&&"function"==typeof r.renetwork?t._defaultProvider.renetwork(e):t._defaultProvider),{name:e.name,chainId:t.chainId,ensAddress:e.ensAddress||t.ensAddress||null,_defaultProvider:n}}(null==e?"homestead":e)}ccipReadFetch(e,t,n){return ei(this,void 0,void 0,(function*(){if(this.disableCcipRead||0===n.length)return null;const r=e.to.toLowerCase(),i=t.toLowerCase(),a=[];for(let e=0;e<n.length;e++){const t=n[e],s=t.replace("{sender}",r).replace("{data}",i),o=t.indexOf("{data}")>=0?null:JSON.stringify({data:i,sender:r}),f=yield Yr({url:s,errorPassThrough:!0},o,((e,t)=>(e.status=t.statusCode,e)));if(f.data)return f.data;const l=f.message||"unknown error";if(f.status>=400&&f.status<500)return ti.throwError(`response not found during CCIP fetch: ${l}`,d.errors.SERVER_ERROR,{url:t,errorMessage:l});a.push(l)}return ti.throwError(`error encountered during CCIP fetch: ${a.map((e=>JSON.stringify(e))).join(", ")}`,d.errors.SERVER_ERROR,{urls:n,errorMessages:a})}))}_getInternalBlockNumber(e){return ei(this,void 0,void 0,(function*(){if(yield this._ready(),e>0)for(;this._internalBlockNumber;){const t=this._internalBlockNumber;try{const n=yield t;if(ai()-n.respTime<=e)return n.blockNumber;break}catch(e){if(this._internalBlockNumber===t)break}}const t=ai(),n=z({blockNumber:this.perform("getBlockNumber",{}),networkError:this.getNetwork().then((e=>null),(e=>e))}).then((({blockNumber:e,networkError:r})=>{if(r)throw this._internalBlockNumber===n&&(this._internalBlockNumber=null),r;const i=ai();return(e=L.from(e).toNumber())<this._maxInternalBlockNumber&&(e=this._maxInternalBlockNumber),this._maxInternalBlockNumber=e,this._setFastBlockNumber(e),{blockNumber:e,reqTime:t,respTime:i}}));return this._internalBlockNumber=n,n.catch((e=>{this._internalBlockNumber===n&&(this._internalBlockNumber=null)})),(yield n).blockNumber}))}poll(){return ei(this,void 0,void 0,(function*(){const e=wi++,t=[];let n=null;try{n=yield this._getInternalBlockNumber(100+this.pollingInterval/2)}catch(e){return void this.emit("error",e)}if(this._setFastBlockNumber(n),this.emit("poll",e,n),n!==this._lastBlockNumber){if(-2===this._emitted.block&&(this._emitted.block=n-1),Math.abs(this._emitted.block-n)>1e3)ti.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${n})`),this.emit("error",ti.makeError("network block skew detected",d.errors.NETWORK_ERROR,{blockNumber:n,event:"blockSkew",previousBlockNumber:this._emitted.block})),this.emit("block",n);else for(let e=this._emitted.block+1;e<=n;e++)this.emit("block",e);this._emitted.block!==n&&(this._emitted.block=n,Object.keys(this._emitted).forEach((e=>{if("block"===e)return;const t=this._emitted[e];"pending"!==t&&n-t>12&&delete this._emitted[e]}))),-2===this._lastBlockNumber&&(this._lastBlockNumber=n-1),this._events.forEach((e=>{switch(e.type){case"tx":{const n=e.hash;let r=this.getTransactionReceipt(n).then((e=>e&&null!=e.blockNumber?(this._emitted["t:"+n]=e.blockNumber,this.emit(n,e),null):null)).catch((e=>{this.emit("error",e)}));t.push(r);break}case"filter":if(!e._inflight){e._inflight=!0;const r=e.filter;r.fromBlock=e._lastBlockNumber+1,r.toBlock=n,r.toBlock-this._maxFilterBlockRange>r.fromBlock&&(r.fromBlock=r.toBlock-this._maxFilterBlockRange);const i=this.getLogs(r).then((t=>{e._inflight=!1,0!==t.length&&t.forEach((t=>{t.blockNumber>e._lastBlockNumber&&(e._lastBlockNumber=t.blockNumber),this._emitted["b:"+t.blockHash]=t.blockNumber,this._emitted["t:"+t.transactionHash]=t.blockNumber,this.emit(r,t)}))})).catch((t=>{this.emit("error",t),e._inflight=!1}));t.push(i)}}})),this._lastBlockNumber=n,Promise.all(t).then((()=>{this.emit("didPoll",e)})).catch((e=>{this.emit("error",e)}))}else this.emit("didPoll",e)}))}resetEventsBlock(e){this._lastBlockNumber=e-1,this.polling&&this.poll()}get network(){return this._network}detectNetwork(){return ei(this,void 0,void 0,(function*(){return ti.throwError("provider does not support network detection",d.errors.UNSUPPORTED_OPERATION,{operation:"provider.detectNetwork"})}))}getNetwork(){return ei(this,void 0,void 0,(function*(){const e=yield this._ready(),t=yield this.detectNetwork();if(e.chainId!==t.chainId){if(this.anyNetwork)return this._network=t,this._lastBlockNumber=-2,this._fastBlockNumber=null,this._fastBlockNumberPromise=null,this._fastQueryDate=0,this._emitted.block=-2,this._maxInternalBlockNumber=-1024,this._internalBlockNumber=null,this.emit("network",t,e),yield si(0),this._network;const n=ti.makeError("underlying network changed",d.errors.NETWORK_ERROR,{event:"changed",network:e,detectedNetwork:t});throw this.emit("error",n),n}return e}))}get blockNumber(){return this._getInternalBlockNumber(100+this.pollingInterval/2).then((e=>{this._setFastBlockNumber(e)}),(e=>{})),null!=this._fastBlockNumber?this._fastBlockNumber:-1}get polling(){return null!=this._poller}set polling(e){e&&!this._poller?(this._poller=setInterval((()=>{this.poll()}),this.pollingInterval),this._bootstrapPoll||(this._bootstrapPoll=setTimeout((()=>{this.poll(),this._bootstrapPoll=setTimeout((()=>{this._poller||this.poll(),this._bootstrapPoll=null}),this.pollingInterval)}),0))):!e&&this._poller&&(clearInterval(this._poller),this._poller=null)}get pollingInterval(){return this._pollingInterval}set pollingInterval(e){if("number"!=typeof e||e<=0||parseInt(String(e))!=e)throw new Error("invalid polling interval");this._pollingInterval=e,this._poller&&(clearInterval(this._poller),this._poller=setInterval((()=>{this.poll()}),this._pollingInterval))}_getFastBlockNumber(){const e=ai();return e-this._fastQueryDate>2*this._pollingInterval&&(this._fastQueryDate=e,this._fastBlockNumberPromise=this.getBlockNumber().then((e=>((null==this._fastBlockNumber||e>this._fastBlockNumber)&&(this._fastBlockNumber=e),this._fastBlockNumber)))),this._fastBlockNumberPromise}_setFastBlockNumber(e){null!=this._fastBlockNumber&&e<this._fastBlockNumber||(this._fastQueryDate=ai(),(null==this._fastBlockNumber||e>this._fastBlockNumber)&&(this._fastBlockNumber=e,this._fastBlockNumberPromise=Promise.resolve(e)))}waitForTransaction(e,t,n){return ei(this,void 0,void 0,(function*(){return this._waitForTransaction(e,null==t?1:t,n||0,null)}))}_waitForTransaction(e,t,n,r){return ei(this,void 0,void 0,(function*(){const i=yield this.getTransactionReceipt(e);return(i?i.confirmations:0)>=t?i:new Promise(((i,a)=>{const s=[];let o=!1;const f=function(){return!!o||(o=!0,s.forEach((e=>{e()})),!1)},l=e=>{e.confirmations<t||f()||i(e)};if(this.on(e,l),s.push((()=>{this.removeListener(e,l)})),r){let n=r.startBlock,i=null;const l=s=>ei(this,void 0,void 0,(function*(){o||(yield si(1e3),this.getTransactionCount(r.from).then((c=>ei(this,void 0,void 0,(function*(){if(!o){if(c<=r.nonce)n=s;else{{const t=yield this.getTransaction(e);if(t&&null!=t.blockNumber)return}for(null==i&&(i=n-3,i<r.startBlock&&(i=r.startBlock));i<=s;){if(o)return;const n=yield this.getBlockWithTransactions(i);for(let i=0;i<n.transactions.length;i++){const s=n.transactions[i];if(s.hash===e)return;if(s.from===r.from&&s.nonce===r.nonce){if(o)return;const n=yield this.waitForTransaction(s.hash,t);if(f())return;let i="replaced";return s.data===r.data&&s.to===r.to&&s.value.eq(r.value)?i="repriced":"0x"===s.data&&s.from===s.to&&s.value.isZero()&&(i="cancelled"),void a(ti.makeError("transaction was replaced",d.errors.TRANSACTION_REPLACED,{cancelled:"replaced"===i||"cancelled"===i,reason:i,replacement:this._wrapTransaction(s),hash:e,receipt:n}))}}i++}}o||this.once("block",l)}}))),(e=>{o||this.once("block",l)})))}));if(o)return;this.once("block",l),s.push((()=>{this.removeListener("block",l)}))}if("number"==typeof n&&n>0){const e=setTimeout((()=>{f()||a(ti.makeError("timeout exceeded",d.errors.TIMEOUT,{timeout:n}))}),n);e.unref&&e.unref(),s.push((()=>{clearTimeout(e)}))}}))}))}getBlockNumber(){return ei(this,void 0,void 0,(function*(){return this._getInternalBlockNumber(0)}))}getGasPrice(){return ei(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield this.perform("getGasPrice",{});try{return L.from(e)}catch(t){return ti.throwError("bad result from backend",d.errors.SERVER_ERROR,{method:"getGasPrice",result:e,error:t})}}))}getBalance(e,t){return ei(this,void 0,void 0,(function*(){yield this.getNetwork();const n=yield z({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),r=yield this.perform("getBalance",n);try{return L.from(r)}catch(e){return ti.throwError("bad result from backend",d.errors.SERVER_ERROR,{method:"getBalance",params:n,result:r,error:e})}}))}getTransactionCount(e,t){return ei(this,void 0,void 0,(function*(){yield this.getNetwork();const n=yield z({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),r=yield this.perform("getTransactionCount",n);try{return L.from(r).toNumber()}catch(e){return ti.throwError("bad result from backend",d.errors.SERVER_ERROR,{method:"getTransactionCount",params:n,result:r,error:e})}}))}getCode(e,t){return ei(this,void 0,void 0,(function*(){yield this.getNetwork();const n=yield z({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),r=yield this.perform("getCode",n);try{return v(r)}catch(e){return ti.throwError("bad result from backend",d.errors.SERVER_ERROR,{method:"getCode",params:n,result:r,error:e})}}))}getStorageAt(e,t,n){return ei(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield z({address:this._getAddress(e),blockTag:this._getBlockTag(n),position:Promise.resolve(t).then((e=>I(e)))}),i=yield this.perform("getStorageAt",r);try{return v(i)}catch(e){return ti.throwError("bad result from backend",d.errors.SERVER_ERROR,{method:"getStorageAt",params:r,result:i,error:e})}}))}_wrapTransaction(e,t,n){if(null!=t&&32!==w(t))throw new Error("invalid response - sendTransaction");const r=e;return null!=t&&e.hash!==t&&ti.throwError("Transaction hash mismatch from Provider.sendTransaction.",d.errors.UNKNOWN_ERROR,{expectedHash:e.hash,returnedHash:t}),r.wait=(t,r)=>ei(this,void 0,void 0,(function*(){let i;null==t&&(t=1),null==r&&(r=0),0!==t&&null!=n&&(i={data:e.data,from:e.from,nonce:e.nonce,to:e.to,value:e.value,startBlock:n});const a=yield this._waitForTransaction(e.hash,t,r,i);return null==a&&0===t?null:(this._emitted["t:"+e.hash]=a.blockNumber,0===a.status&&ti.throwError("transaction failed",d.errors.CALL_EXCEPTION,{transactionHash:e.hash,transaction:e,receipt:a}),a)})),r}sendTransaction(e){return ei(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield Promise.resolve(e).then((e=>v(e))),n=this.formatter.transaction(e);null==n.confirmations&&(n.confirmations=0);const r=yield this._getInternalBlockNumber(100+2*this.pollingInterval);try{const e=yield this.perform("sendTransaction",{signedTransaction:t});return this._wrapTransaction(n,e,r)}catch(e){throw e.transaction=n,e.transactionHash=n.hash,e}}))}_getTransactionRequest(e){return ei(this,void 0,void 0,(function*(){const t=yield e,n={};return["from","to"].forEach((e=>{null!=t[e]&&(n[e]=Promise.resolve(t[e]).then((e=>e?this._getAddress(e):null)))})),["gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","value"].forEach((e=>{null!=t[e]&&(n[e]=Promise.resolve(t[e]).then((e=>e?L.from(e):null)))})),["type"].forEach((e=>{null!=t[e]&&(n[e]=Promise.resolve(t[e]).then((e=>null!=e?e:null)))})),t.accessList&&(n.accessList=this.formatter.accessList(t.accessList)),["data"].forEach((e=>{null!=t[e]&&(n[e]=Promise.resolve(t[e]).then((e=>e?v(e):null)))})),this.formatter.transactionRequest(yield z(n))}))}_getFilter(e){return ei(this,void 0,void 0,(function*(){e=yield e;const t={};return null!=e.address&&(t.address=this._getAddress(e.address)),["blockHash","topics"].forEach((n=>{null!=e[n]&&(t[n]=e[n])})),["fromBlock","toBlock"].forEach((n=>{null!=e[n]&&(t[n]=this._getBlockTag(e[n]))})),this.formatter.filter(yield z(t))}))}_call(e,t,n){return ei(this,void 0,void 0,(function*(){n>=10&&ti.throwError("CCIP read exceeded maximum redirections",d.errors.SERVER_ERROR,{redirects:n,transaction:e});const r=e.to,i=yield this.perform("call",{transaction:e,blockTag:t});if(n>=0&&"latest"===t&&null!=r&&"0x556f1830"===i.substring(0,10)&&w(i)%32==4)try{const a=Y(i,4),s=Y(a,0,32);L.from(s).eq(r)||ti.throwError("CCIP Read sender did not match",d.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const o=[],f=L.from(Y(a,32,64)).toNumber(),l=L.from(Y(a,f,f+32)).toNumber(),c=Y(a,f+32);for(let t=0;t<l;t++){const n=mi(c,32*t);null==n&&ti.throwError("CCIP Read contained corrupt URL string",d.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i}),o.push(n)}const u=yi(a,64);L.from(Y(a,100,128)).isZero()||ti.throwError("CCIP Read callback selector included junk",d.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const p=Y(a,96,100),m=yi(a,128),y=yield this.ccipReadFetch(e,u,o);null==y&&ti.throwError("CCIP Read disabled or provided no URLs",d.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const h={to:r,data:A([p,_i([y,m])])};return this._call(h,t,n+1)}catch(e){if(e.code===d.errors.SERVER_ERROR)throw e}try{return v(i)}catch(n){return ti.throwError("bad result from backend",d.errors.SERVER_ERROR,{method:"call",params:{transaction:e,blockTag:t},result:i,error:n})}}))}call(e,t){return ei(this,void 0,void 0,(function*(){yield this.getNetwork();const n=yield z({transaction:this._getTransactionRequest(e),blockTag:this._getBlockTag(t),ccipReadEnabled:Promise.resolve(e.ccipReadEnabled)});return this._call(n.transaction,n.blockTag,n.ccipReadEnabled?0:-1)}))}estimateGas(e){return ei(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield z({transaction:this._getTransactionRequest(e)}),n=yield this.perform("estimateGas",t);try{return L.from(n)}catch(e){return ti.throwError("bad result from backend",d.errors.SERVER_ERROR,{method:"estimateGas",params:t,result:n,error:e})}}))}_getAddress(e){return ei(this,void 0,void 0,(function*(){"string"!=typeof(e=yield e)&&ti.throwArgumentError("invalid address or ENS name","name",e);const t=yield this.resolveName(e);return null==t&&ti.throwError("ENS name not configured",d.errors.UNSUPPORTED_OPERATION,{operation:`resolveName(${JSON.stringify(e)})`}),t}))}_getBlock(e,t){return ei(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;let n=-128;const r={includeTransactions:!!t};if(_(e,32))r.blockHash=e;else try{r.blockTag=yield this._getBlockTag(e),_(r.blockTag)&&(n=parseInt(r.blockTag.substring(2),16))}catch(t){ti.throwArgumentError("invalid block hash or block tag","blockHashOrBlockTag",e)}return Ar((()=>ei(this,void 0,void 0,(function*(){const e=yield this.perform("getBlock",r);if(null==e)return null!=r.blockHash&&null==this._emitted["b:"+r.blockHash]||null!=r.blockTag&&n>this._emitted.block?null:void 0;if(t){let t=null;for(let n=0;n<e.transactions.length;n++){const r=e.transactions[n];if(null==r.blockNumber)r.confirmations=0;else if(null==r.confirmations){null==t&&(t=yield this._getInternalBlockNumber(100+2*this.pollingInterval));let e=t-r.blockNumber+1;e<=0&&(e=1),r.confirmations=e}}const n=this.formatter.blockWithTransactions(e);return n.transactions=n.transactions.map((e=>this._wrapTransaction(e))),n}return this.formatter.block(e)}))),{oncePoll:this})}))}getBlock(e){return this._getBlock(e,!1)}getBlockWithTransactions(e){return this._getBlock(e,!0)}getTransaction(e){return ei(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;const t={transactionHash:this.formatter.hash(e,!0)};return Ar((()=>ei(this,void 0,void 0,(function*(){const n=yield this.perform("getTransaction",t);if(null==n)return null==this._emitted["t:"+e]?null:void 0;const r=this.formatter.transactionResponse(n);if(null==r.blockNumber)r.confirmations=0;else if(null==r.confirmations){let e=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-r.blockNumber+1;e<=0&&(e=1),r.confirmations=e}return this._wrapTransaction(r)}))),{oncePoll:this})}))}getTransactionReceipt(e){return ei(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;const t={transactionHash:this.formatter.hash(e,!0)};return Ar((()=>ei(this,void 0,void 0,(function*(){const n=yield this.perform("getTransactionReceipt",t);if(null==n)return null==this._emitted["t:"+e]?null:void 0;if(null==n.blockHash)return;const r=this.formatter.receipt(n);if(null==r.blockNumber)r.confirmations=0;else if(null==r.confirmations){let e=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-r.blockNumber+1;e<=0&&(e=1),r.confirmations=e}return r}))),{oncePoll:this})}))}getLogs(e){return ei(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield z({filter:this._getFilter(e)}),n=yield this.perform("getLogs",t);return n.forEach((e=>{null==e.removed&&(e.removed=!1)})),Qr.arrayOf(this.formatter.filterLog.bind(this.formatter))(n)}))}getEtherPrice(){return ei(this,void 0,void 0,(function*(){return yield this.getNetwork(),this.perform("getEtherPrice",{})}))}_getBlockTag(e){return ei(this,void 0,void 0,(function*(){if("number"==typeof(e=yield e)&&e<0){e%1&&ti.throwArgumentError("invalid BlockTag","blockTag",e);let t=yield this._getInternalBlockNumber(100+2*this.pollingInterval);return t+=e,t<0&&(t=0),this.formatter.blockTag(t)}return this.formatter.blockTag(e)}))}getResolver(e){return ei(this,void 0,void 0,(function*(){let t=e;for(;;){if(""===t||"."===t)return null;if("eth"!==e&&"eth"===t)return null;const n=yield this._getResolver(t,"getResolver");if(null!=n){const r=new Ti(this,n,e);return t===e||(yield r.supportsWildcard())?r:null}t=t.split(".").slice(1).join(".")}}))}_getResolver(e,t){return ei(this,void 0,void 0,(function*(){null==t&&(t="ENS");const n=yield this.getNetwork();n.ensAddress||ti.throwError("network does not support ENS",d.errors.UNSUPPORTED_OPERATION,{operation:t,network:n.name});try{const t=yield this.call({to:n.ensAddress,data:"0x0178b8bf"+Ur(e).substring(2)});return this.formatter.callAddress(t)}catch(e){}return null}))}resolveName(e){return ei(this,void 0,void 0,(function*(){e=yield e;try{return Promise.resolve(this.formatter.address(e))}catch(t){if(_(e))throw t}"string"!=typeof e&&ti.throwArgumentError("invalid ENS name","name",e);const t=yield this.getResolver(e);return t?yield t.getAddress():null}))}lookupAddress(e){return ei(this,void 0,void 0,(function*(){e=yield e;const t=(e=this.formatter.address(e)).substring(2).toLowerCase()+".addr.reverse",n=yield this._getResolver(t,"lookupAddress");if(null==n)return null;const r=mi(yield this.call({to:n,data:"0x691f3431"+Ur(t).substring(2)}),0);return(yield this.resolveName(r))!=e?null:r}))}getAvatar(e){return ei(this,void 0,void 0,(function*(){let t=null;if(_(e)){const n=this.formatter.address(e).substring(2).toLowerCase()+".addr.reverse",r=yield this._getResolver(n,"getAvatar");if(!r)return null;t=new Ti(this,r,n);try{const e=yield t.getAvatar();if(e)return e.url}catch(e){if(e.code!==d.errors.CALL_EXCEPTION)throw e}try{const e=mi(yield this.call({to:r,data:"0x691f3431"+Ur(n).substring(2)}),0);t=yield this.getResolver(e)}catch(e){if(e.code!==d.errors.CALL_EXCEPTION)throw e;return null}}else if(t=yield this.getResolver(e),!t)return null;const n=yield t.getAvatar();return null==n?null:n.url}))}perform(e,t){return ti.throwError(e+" not implemented",d.errors.NOT_IMPLEMENTED,{operation:e})}_startEvent(e){this.polling=this._events.filter((e=>e.pollable())).length>0}_stopEvent(e){this.polling=this._events.filter((e=>e.pollable())).length>0}_addEventListener(e,t,n){const r=new fi(ii(e),t,n);return this._events.push(r),this._startEvent(r),this}on(e,t){return this._addEventListener(e,t,!1)}once(e,t){return this._addEventListener(e,t,!0)}emit(e,...t){let n=!1,r=[],i=ii(e);return this._events=this._events.filter((e=>e.tag!==i||(setTimeout((()=>{e.listener.apply(this,t)}),0),n=!0,!e.once||(r.push(e),!1)))),r.forEach((e=>{this._stopEvent(e)})),n}listenerCount(e){if(!e)return this._events.length;let t=ii(e);return this._events.filter((e=>e.tag===t)).length}listeners(e){if(null==e)return this._events.map((e=>e.listener));let t=ii(e);return this._events.filter((e=>e.tag===t)).map((e=>e.listener))}off(e,t){if(null==t)return this.removeAllListeners(e);const n=[];let r=!1,i=ii(e);return this._events=this._events.filter((e=>e.tag!==i||e.listener!=t||!!r||(r=!0,n.push(e),!1))),n.forEach((e=>{this._stopEvent(e)})),this}removeAllListeners(e){let t=[];if(null==e)t=this._events,this._events=[];else{const n=ii(e);this._events=this._events.filter((e=>e.tag!==n||(t.push(e),!1)))}return t.forEach((e=>{this._stopEvent(e)})),this}}var Ai=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function s(e){try{f(r.next(e))}catch(e){a(e)}}function o(e){try{f(r.throw(e))}catch(e){a(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}f((r=r.apply(e,t||[])).next())}))};const Ii=new d(er),Ci=["call","estimateGas"];function Ei(e,t,n){if("call"===e&&t.code===d.errors.SERVER_ERROR){const e=t.error;if(e&&e.message.match("reverted")&&_(e.data))return e.data;Ii.throwError("missing revert data in call exception",d.errors.CALL_EXCEPTION,{error:t,data:"0x"})}let r=t.message;t.code===d.errors.SERVER_ERROR&&t.error&&"string"==typeof t.error.message?r=t.error.message:"string"==typeof t.body?r=t.body:"string"==typeof t.responseText&&(r=t.responseText),r=(r||"").toLowerCase();const i=n.transaction||n.signedTransaction;throw r.match(/insufficient funds|base fee exceeds gas limit/)&&Ii.throwError("insufficient funds for intrinsic transaction cost",d.errors.INSUFFICIENT_FUNDS,{error:t,method:e,transaction:i}),r.match(/nonce too low/)&&Ii.throwError("nonce has already been used",d.errors.NONCE_EXPIRED,{error:t,method:e,transaction:i}),r.match(/replacement transaction underpriced/)&&Ii.throwError("replacement fee too low",d.errors.REPLACEMENT_UNDERPRICED,{error:t,method:e,transaction:i}),r.match(/only replay-protected/)&&Ii.throwError("legacy pre-eip-155 transactions not supported",d.errors.UNSUPPORTED_OPERATION,{error:t,method:e,transaction:i}),Ci.indexOf(e)>=0&&r.match(/gas required exceeds allowance|always failing transaction|execution reverted/)&&Ii.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",d.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,method:e,transaction:i}),t}function Si(e){return new Promise((function(t){setTimeout(t,e)}))}function Ni(e){if(e.error){const t=new Error(e.error.message);throw t.code=e.error.code,t.data=e.error.data,t}return e.result}function ki(e){return e?e.toLowerCase():e}const xi={};class Di extends Bt{constructor(e,t,n){if(Ii.checkNew(new.target,Di),super(),e!==xi)throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");U(this,"provider",t),null==n&&(n=0),"string"==typeof n?(U(this,"_address",this.provider.formatter.address(n)),U(this,"_index",null)):"number"==typeof n?(U(this,"_index",n),U(this,"_address",null)):Ii.throwArgumentError("invalid address or index","addressOrIndex",n)}connect(e){return Ii.throwError("cannot alter JSON-RPC Signer connection",d.errors.UNSUPPORTED_OPERATION,{operation:"connect"})}connectUnchecked(){return new Fi(xi,this.provider,this._address||this._index)}getAddress(){return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then((e=>(e.length<=this._index&&Ii.throwError("unknown account #"+this._index,d.errors.UNSUPPORTED_OPERATION,{operation:"getAddress"}),this.provider.formatter.address(e[this._index]))))}sendUncheckedTransaction(e){e=j(e);const t=this.getAddress().then((e=>(e&&(e=e.toLowerCase()),e)));if(null==e.gasLimit){const n=j(e);n.from=t,e.gasLimit=this.provider.estimateGas(n)}return null!=e.to&&(e.to=Promise.resolve(e.to).then((e=>Ai(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.provider.resolveName(e);return null==t&&Ii.throwArgumentError("provided ENS name resolves to null","tx.to",e),t}))))),z({tx:z(e),sender:t}).then((({tx:t,sender:n})=>{null!=t.from?t.from.toLowerCase()!==n&&Ii.throwArgumentError("from address mismatch","transaction",e):t.from=n;const r=this.provider.constructor.hexlifyTransaction(t,{from:!0});return this.provider.send("eth_sendTransaction",[r]).then((e=>e),(e=>Ei("sendTransaction",e,r)))}))}signTransaction(e){return Ii.throwError("signing transactions is unsupported",d.errors.UNSUPPORTED_OPERATION,{operation:"signTransaction"})}sendTransaction(e){return Ai(this,void 0,void 0,(function*(){const t=yield this.provider._getInternalBlockNumber(100+2*this.provider.pollingInterval),n=yield this.sendUncheckedTransaction(e);try{return yield Ar((()=>Ai(this,void 0,void 0,(function*(){const e=yield this.provider.getTransaction(n);if(null!==e)return this.provider._wrapTransaction(e,n,t)}))),{oncePoll:this.provider})}catch(e){throw e.transactionHash=n,e}}))}signMessage(e){return Ai(this,void 0,void 0,(function*(){const t="string"==typeof e?Ie(e):e,n=yield this.getAddress();return yield this.provider.send("personal_sign",[v(t),n.toLowerCase()])}))}_legacySignMessage(e){return Ai(this,void 0,void 0,(function*(){const t="string"==typeof e?Ie(e):e,n=yield this.getAddress();return yield this.provider.send("eth_sign",[n.toLowerCase(),v(t)])}))}_signTypedData(e,t,n){return Ai(this,void 0,void 0,(function*(){const r=yield hr.resolveNames(e,t,n,(e=>this.provider.resolveName(e))),i=yield this.getAddress();return yield this.provider.send("eth_signTypedData_v4",[i.toLowerCase(),JSON.stringify(hr.getPayload(r.domain,t,r.value))])}))}unlock(e){return Ai(this,void 0,void 0,(function*(){const t=this.provider,n=yield this.getAddress();return t.send("personal_unlockAccount",[n.toLowerCase(),e,null])}))}}class Fi extends Di{sendTransaction(e){return this.sendUncheckedTransaction(e).then((e=>({hash:e,nonce:null,gasLimit:null,gasPrice:null,data:null,value:null,chainId:null,confirmations:0,from:null,wait:t=>this.provider.waitForTransaction(e,t)})))}}const Pi={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0};class Li extends Yi{constructor(e,t){Ii.checkNew(new.target,Li);let n=t;null==n&&(n=new Promise(((e,t)=>{setTimeout((()=>{this.detectNetwork().then((t=>{e(t)}),(e=>{t(e)}))}),0)}))),super(n),e||(e=$(this.constructor,"defaultUrl")()),U(this,"connection","string"==typeof e?Object.freeze({url:e}):Object.freeze(j(e))),this._nextId=42}get _cache(){return null==this._eventLoopCache&&(this._eventLoopCache={}),this._eventLoopCache}static defaultUrl(){return"http://localhost:8545"}detectNetwork(){return this._cache.detectNetwork||(this._cache.detectNetwork=this._uncachedDetectNetwork(),setTimeout((()=>{this._cache.detectNetwork=null}),0)),this._cache.detectNetwork}_uncachedDetectNetwork(){return Ai(this,void 0,void 0,(function*(){yield Si(0);let e=null;try{e=yield this.send("eth_chainId",[])}catch(t){try{e=yield this.send("net_version",[])}catch(e){}}if(null!=e){const t=$(this.constructor,"getNetwork");try{return t(L.from(e).toNumber())}catch(t){return Ii.throwError("could not detect network",d.errors.NETWORK_ERROR,{chainId:e,event:"invalidNetwork",serverError:t})}}return Ii.throwError("could not detect network",d.errors.NETWORK_ERROR,{event:"noNetwork"})}))}getSigner(e){return new Di(xi,this,e)}getUncheckedSigner(e){return this.getSigner(e).connectUnchecked()}listAccounts(){return this.send("eth_accounts",[]).then((e=>e.map((e=>this.formatter.address(e)))))}send(e,t){const n={method:e,params:t,id:this._nextId++,jsonrpc:"2.0"};this.emit("debug",{action:"request",request:W(n),provider:this});const r=["eth_chainId","eth_blockNumber"].indexOf(e)>=0;if(r&&this._cache[e])return this._cache[e];const i=Yr(this.connection,JSON.stringify(n),Ni).then((e=>(this.emit("debug",{action:"response",request:n,response:e,provider:this}),e)),(e=>{throw this.emit("debug",{action:"response",error:e,request:n,provider:this}),e}));return r&&(this._cache[e]=i,setTimeout((()=>{this._cache[e]=null}),0)),i}prepareRequest(e,t){switch(e){case"getBlockNumber":return["eth_blockNumber",[]];case"getGasPrice":return["eth_gasPrice",[]];case"getBalance":return["eth_getBalance",[ki(t.address),t.blockTag]];case"getTransactionCount":return["eth_getTransactionCount",[ki(t.address),t.blockTag]];case"getCode":return["eth_getCode",[ki(t.address),t.blockTag]];case"getStorageAt":return["eth_getStorageAt",[ki(t.address),t.position,t.blockTag]];case"sendTransaction":return["eth_sendRawTransaction",[t.signedTransaction]];case"getBlock":return t.blockTag?["eth_getBlockByNumber",[t.blockTag,!!t.includeTransactions]]:t.blockHash?["eth_getBlockByHash",[t.blockHash,!!t.includeTransactions]]:null;case"getTransaction":return["eth_getTransactionByHash",[t.transactionHash]];case"getTransactionReceipt":return["eth_getTransactionReceipt",[t.transactionHash]];case"call":return["eth_call",[$(this.constructor,"hexlifyTransaction")(t.transaction,{from:!0}),t.blockTag]];case"estimateGas":return["eth_estimateGas",[$(this.constructor,"hexlifyTransaction")(t.transaction,{from:!0})]];case"getLogs":return t.filter&&null!=t.filter.address&&(t.filter.address=ki(t.filter.address)),["eth_getLogs",[t.filter]]}return null}perform(e,t){return Ai(this,void 0,void 0,(function*(){if("call"===e||"estimateGas"===e){const e=t.transaction;if(e&&null!=e.type&&L.from(e.type).isZero()&&null==e.maxFeePerGas&&null==e.maxPriorityFeePerGas){const n=yield this.getFeeData();null==n.maxFeePerGas&&null==n.maxPriorityFeePerGas&&((t=j(t)).transaction=j(e),delete t.transaction.type)}}const n=this.prepareRequest(e,t);null==n&&Ii.throwError(e+" not implemented",d.errors.NOT_IMPLEMENTED,{operation:e});try{return yield this.send(n[0],n[1])}catch(n){return Ei(e,n,t)}}))}_startEvent(e){"pending"===e.tag&&this._startPending(),super._startEvent(e)}_startPending(){if(null!=this._pendingFilter)return;const e=this,t=this.send("eth_newPendingTransactionFilter",[]);this._pendingFilter=t,t.then((function(n){return function r(){e.send("eth_getFilterChanges",[n]).then((function(n){if(e._pendingFilter!=t)return null;let r=Promise.resolve();return n.forEach((function(t){e._emitted["t:"+t.toLowerCase()]="pending",r=r.then((function(){return e.getTransaction(t).then((function(t){return e.emit("pending",t),null}))}))})),r.then((function(){return Si(1e3)}))})).then((function(){if(e._pendingFilter==t)return setTimeout((function(){r()}),0),null;e.send("eth_uninstallFilter",[n])})).catch((e=>{}))}(),n})).catch((e=>{}))}_stopEvent(e){"pending"===e.tag&&0===this.listenerCount("pending")&&(this._pendingFilter=null),super._stopEvent(e)}static hexlifyTransaction(e,t){const n=j(Pi);if(t)for(const e in t)t[e]&&(n[e]=!0);var r,i;i=n,(r=e)&&"object"==typeof r||O.throwArgumentError("invalid object","object",r),Object.keys(r).forEach((e=>{i[e]||O.throwArgumentError("invalid object key - "+e,"transaction:"+e,r)}));const a={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((function(t){if(null==e[t])return;const n=I(e[t]);"gasLimit"===t&&(t="gas"),a[t]=n})),["from","to","data"].forEach((function(t){null!=e[t]&&(a[t]=v(e[t]))})),e.accessList&&(a.accessList=Rn(e.accessList)),a}}const Ri=new d(er);let Bi=1;function Mi(e,t){const n="Web3LegacyFetcher";return function(e,r){const i={method:e,params:r,id:Bi++,jsonrpc:"2.0"};return new Promise(((e,r)=>{this.emit("debug",{action:"request",fetcher:n,request:W(i),provider:this}),t(i,((t,a)=>{if(t)return this.emit("debug",{action:"response",fetcher:n,error:t,request:i,provider:this}),r(t);if(this.emit("debug",{action:"response",fetcher:n,request:i,response:a,provider:this}),a.error){const e=new Error(a.error.message);return e.code=a.error.code,e.data=a.error.data,r(e)}e(a.result)}))}))}}class Vi extends Li{constructor(e,t){Ri.checkNew(new.target,Vi),null==e&&Ri.throwArgumentError("missing provider","provider",e);let n=null,r=null,i=null;"function"==typeof e?(n="unknown:",r=e):(n=e.host||e.path||"",!n&&e.isMetaMask&&(n="metamask"),i=e,e.request?(""===n&&(n="eip-1193:"),r=function(e){return function(t,n){null==n&&(n=[]);const r={method:t,params:n};return this.emit("debug",{action:"request",fetcher:"Eip1193Fetcher",request:W(r),provider:this}),e.request(r).then((e=>(this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:r,response:e,provider:this}),e)),(e=>{throw this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:r,error:e,provider:this}),e}))}}(e)):e.sendAsync?r=Mi(0,e.sendAsync.bind(e)):e.send?r=Mi(0,e.send.bind(e)):Ri.throwArgumentError("unsupported provider","provider",e),n||(n="unknown:")),super(n,t),U(this,"jsonRpcFetchFunc",r),U(this,"provider",i)}send(e,t){return this.jsonRpcFetchFunc(e,t)}}__webpack_require__(2003);var Oi=__webpack_require__(3379),Ui=__webpack_require__.n(Oi),$i=__webpack_require__(7795),zi=__webpack_require__.n($i),ji=__webpack_require__(569),qi=__webpack_require__.n(ji),Hi=__webpack_require__(3565),Gi=__webpack_require__.n(Hi),Wi=__webpack_require__(9216),Ji=__webpack_require__.n(Wi),Ki=__webpack_require__(4589),Xi=__webpack_require__.n(Ki),Zi=__webpack_require__(1413),Qi={};Qi.styleTagTransform=Xi(),Qi.setAttributes=Gi(),Qi.insert=qi().bind(null,"head"),Qi.domAPI=zi(),Qi.insertStyleElement=Ji(),Ui()(Zi.Z,Qi),Zi.Z&&Zi.Z.locals&&Zi.Z.locals;const ea=e=>async(t,{outputFormat:n="hex"}={})=>{"string"==typeof t&&(t=(new globalThis.TextEncoder).encode(t));const r=await globalThis.crypto.subtle.digest(e,t);return"hex"===n?(e=>{const t=new DataView(e);let n="";for(let e=0;e<t.byteLength;e+=4)n+=t.getUint32(e).toString(16).padStart(8,"0");return n})(r):r},ta=(ea("SHA-1"),ea("SHA-256"),ea("SHA-384"),ea("SHA-512"),__webpack_require__(5670).create({host:"ipfs.infura.io",port:"5001",protocol:"https"}),__webpack_require__(8899)),na=new Vi(window.ethereum).getSigner(),ra=document.getElementById("walletin"),ia=document.getElementById("email"),aa=document.getElementById("name"),sa=document.getElementById("form");(()=>{const e=e=>{let t=0;console.log(ia.value.length,aa.value.length),ia.value.length>=10&&t++,aa.value.length>=6&&t++,2==t?(ra.disabled=!1,ra.style.opacity=1):t<2&&(ra.disabled=!0,ra.style.opacity=.8)};ia.addEventListener("keyup",e),aa.addEventListener("keyup",e),ra.addEventListener("mouseover",e);const t=async()=>{await ethereum.request({method:"eth_accounts"});const e=await n();na.signMessage(aa.value+" "+ia),await e.makeUser(aa.value,ia.value,"datastream").then((e=>(console.log(e),e))),sa.innerHTML="<div id='txt'><h1>YOUR TX IS ON ITS WAY</h1><p>You are now signed up and will recieve all information via email soon !</p><p>Join us on our social media <a href='https://discord.gg/qVYG38PNyZ'>DISCORD</a> <a href=''>TWITTER</a></p>"},n=async()=>{const e=Object.keys(ta.networks)[0];return new Qn(ta.networks[e].address,ta.abi,na)};(()=>{const{ethereum:e}=window;return Boolean(e&&e.isMetaMask)})()?(ra.disabled=!0,ra.style.opacity=.8,ra.value="Get Listed !",ra.addEventListener("click",(async e=>{console.log("go");try{ra.innerHTML="Connecting ...",await ethereum.request({method:"eth_requestAccounts"});const e=await ethereum.request({method:"net_version"});var n="Switch Network";80001===Number(e)&&(n="Mumbai"),1===Number(e)&&(n="ETH"),137===Number(e)&&(n="Polygon"),100===Number(e)&&(n="xDai"),10===Number(e)&&(n="Optimism"),200===Number(e)&&(n="Arbitrum"),43224===Number(e)&&(n="Avalanche"),1312===Number(e)&&(n="ACAB"),ra.innerHTML=n,await t()}catch(e){console.error(e),ra.innerText="GET WHITELISTED !"}}))):(ra.value="Click here to install MetaMask!",ra.addEventListener("click",(()=>{alert("You are being redirected to the official download of Metamask.io ... Please Follow their installation instructions."),window.open("https://metamask.io")})))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,